/// <reference types="qs" />
/// <reference types="express" />
import { Analytics, AnalyticsTypes, AnalyticsLibConfigs, AdobeAnalytics, EventVars } from './types';
import { AnalyticsContext, handleAnalyticsEvent, useModalTrack, useDrawerTrack, TAnalyticsContext, TAnalyticsEventData, TComponent, TContextWithEventData, TEventContext, THandleAnalyticsEvent, TUseContext } from './spellbook';
export declare enum AnalyticsValues {
    adobe = "adobe"
}
export declare enum EnvironmentValues {
    production = "production",
    development = "development",
    staging = "staging"
}
/**
 * Retrieve the configured settings of your analytics library.
 * @returns {Analytics} The configured analytics profile.
 */
export declare const getConfiguration: () => Analytics;
/**
 * Configure analytics settings for this JS bundle/file. If multiple bundles are created, you should call configure for each bundle.
 * @param {AnalyticsTypes} type - The analytics type to use.
 * @param {AnalyticsLibConfigs} config - The configuration details of your chosen analytics provider.
 * @returns {Analytics} The configured analytics profile.
 */
export declare const configure: (type: AnalyticsTypes, config: AnalyticsLibConfigs) => Analytics;
/**
 * Generates a script tag for inclusion in HTML document.
 * @returns {string} A script tag configured to your analytics details.
 */
export declare const analyticsScript: () => string;
/**
 * Send beacon to configured analytics.
 * @param {EventVars} vars - The beacon variables you're sending.
 * @returns {boolean} Whether the beacon was creatable
 */
export declare const track: (vars: EventVars) => boolean;
/**
 * Send beacon to configured analytics.
 * @param {EventVars} vars - The beacon variables you're sending.
 * @returns {boolean} Whether the beacon was creatable
 */
export declare const event: (name: string, vars: EventVars) => boolean;
export declare function usePageBeacon(vars: EventVars): void;
export declare function useEventBeacon(name: string, vars: EventVars): void;
declare const _default: {
    configure: (type: AnalyticsTypes, config: AdobeAnalytics) => Analytics;
    getConfiguration: () => Analytics;
    analyticsScript: () => string;
    visitorParser: (config?: import("./types").VisitorSession | undefined) => (req: import("express").Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: import("express").Response<any, Record<string, any>>, next: import("express").NextFunction) => void;
    track: (vars: EventVars) => boolean;
    event: (name: string, vars: EventVars) => boolean;
    usePageBeacon: typeof usePageBeacon;
    useEventBeacon: typeof useEventBeacon;
};
export default _default;
export { AnalyticsContext, handleAnalyticsEvent, useModalTrack, useDrawerTrack, };
export type { TAnalyticsContext, TEventContext, TComponent, TAnalyticsEventData, TUseContext, THandleAnalyticsEvent, TContextWithEventData, };
//# sourceMappingURL=index.d.ts.map