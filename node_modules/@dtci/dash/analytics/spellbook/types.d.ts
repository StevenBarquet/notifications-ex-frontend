/// <reference types="react" />
export declare type TComponent = 'Button' | 'Modal' | 'Drawer' | 'Form' | 'Input' | 'Select' | 'MultiSelect' | 'TextArea';
export declare type TEventContext = {
    readonly componentType: TComponent;
    readonly actionName: string;
    componentName?: string;
    label?: string;
    value?: Record<string, unknown>[];
    params?: Record<string, unknown>;
};
export declare type TAnalyticsContext = {
    event?: (TComponent: TComponent, context: TEventContext) => void;
};
export declare type TAnalyticsEventData = Record<string, unknown>;
export declare type TUseContext = ReturnType<(<T extends TAnalyticsContext>(context: React.Context<T>) => T)>;
export declare type THandleAnalyticsEvent = {
    analyticsContext: TUseContext;
    analyticsEventData?: TAnalyticsEventData;
    readonly componentType: TComponent;
    readonly actionName: string;
    label?: string;
    componentName?: string;
    value?: Record<string, unknown>[];
    params?: Record<string, unknown>;
};
export declare type TContextWithEventData = Pick<THandleAnalyticsEvent, 'analyticsContext' | 'analyticsEventData'>;
//# sourceMappingURL=types.d.ts.map