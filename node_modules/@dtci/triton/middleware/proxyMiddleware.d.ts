/// <reference types="node" />
/// <reference types="express-serve-static-core" />
import { createProxyMiddleware, Options } from 'http-proxy-middleware';
import * as http from 'http';
import { ClientRequest } from 'http';
export interface ProxyOptions {
    logLevel: 'warn' | 'debug' | 'info' | 'error' | 'silent';
    cookieName: string;
    authType: string;
    proxyMiddlewareOptions: Options;
    observe: {
        request?: (proxyReq: ClientRequest, req: any) => void;
        error?: (err: Error, req: Express.Request, res: Express.Response) => void;
        response?: (proxyRes: http.IncomingMessage, req: Express.Request, res: Express.Response) => void;
    };
    setProxyHeaders?: (req: Express.Request) => Record<string, string>;
}
export declare const proxyMiddleware: (source: string, target: string, options?: Partial<ProxyOptions> | undefined) => ReturnType<typeof createProxyMiddleware>;
//# sourceMappingURL=proxyMiddleware.d.ts.map