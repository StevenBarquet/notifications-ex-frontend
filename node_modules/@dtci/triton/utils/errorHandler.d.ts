import { AxiosError } from 'axios';
export interface ErrorCallbacks {
    refreshSession: (error: AxiosError, contextPath?: string) => Promise<void>;
    redirectToErrorPage: (error: AxiosError | Error, contextPath?: string) => void;
    propagateError: (error: Error) => void;
}
export declare function isAxiosError(err: AxiosError | Error | unknown): err is AxiosError;
export declare function getStatus(err: AxiosError): number;
export interface ErrorStatusCodes {
    refresh?: number[];
    propagate?: number[];
}
export declare function errorHandler(err: AxiosError | Error, callbacks: ErrorCallbacks, contextPath?: string, ignoreHandler?: boolean, errorStatusCodesOverride?: ErrorStatusCodes): void;
export declare const buildErrorUrl: (status?: number | undefined, msg?: string | undefined, contextPath?: string | undefined) => string;
export declare const refreshSession: (err: AxiosError, contextPath?: string | undefined) => Promise<void>;
export declare const redirectToErrorPage: (err: AxiosError | Error, contextPath?: string | undefined) => void;
export declare const propagateError: (error: Error) => void;
export declare const handleRefresh: (contextPath?: string | undefined) => Promise<void>;
//# sourceMappingURL=errorHandler.d.ts.map