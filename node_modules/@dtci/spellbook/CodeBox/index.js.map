{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/BadgedContainer/BadgedContainer.tsx","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/external commonjs \"@dtci/dash/analytics\"","webpack://@dtci/spellbook/./src/Spinner/Spinner.tsx","webpack://@dtci/spellbook/./src/Button/Button.tsx","webpack://@dtci/spellbook/./src/Notification/Notification.tsx","webpack://@dtci/spellbook/external commonjs \"react-toastify\"","webpack://@dtci/spellbook/./src/Toast/Toast.tsx","webpack://@dtci/spellbook/./src/Toast/ToastContainer.tsx","webpack://@dtci/spellbook/./src/CodeBox/CodeBox.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import { FC, HTMLAttributes, ReactNode } from 'react';\nimport classNames from 'classnames';\n\n//Styles\nimport './BadgedContainer.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface BadgedContainerBadgeProps {\n  position: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n  class?: string;\n  component: ReactNode;\n}\n\nexport interface BadgedContainerProps extends HTMLAttributes<HTMLDivElement> {\n  /** Class name **/\n  className?: string;\n  /** Children */\n  children: ReactNode;\n  /** Badges that are positioned on the container */\n  badges: BadgedContainerBadgeProps | BadgedContainerBadgeProps[];\n  // Test IDs for sections of BadgedContainer\n  testMetadata?: TestMetadata;\n}\n\nconst BadgedContainer: FC<BadgedContainerProps> = ({\n  className,\n  badges,\n  children,\n  testMetadata,\n  ...otherProps\n}) => {\n  if (!Array.isArray(badges)) {\n    badges = [badges];\n  }\n  return (\n    <div\n      className={classNames('sb-badged-container__container', className)}\n      {...testMetadata}\n      {...otherProps}\n    >\n      {badges.map((badge, index) => (\n        <div\n          key={index}\n          className={classNames(\n            `sb-badged-container__badge \n            sb-badged-container__${badge.position}-badge`,\n            badge.class,\n          )}\n        >\n          {badge.component}\n        </div>\n      ))}\n      {children}\n    </div>\n  );\n};\n\nexport default BadgedContainer;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@dtci/dash/analytics\");","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Spinner.scss';\n\n// Types\nimport {\n  AnimationOptions,\n  LocationOptions,\n  SizeOptions,\n  TestMetadata,\n} from '../types';\n\nexport interface SpinnerProps {\n  /** Add a class to the spinner */\n  className?: string;\n  /** Loading text for screen readers */\n  loadText?: string;\n  /** Size: smaller, small, medium (default), large */\n  size?: SizeOptions;\n  /** Full URL to a custom image you would like to use */\n  imageUrl?: string;\n  /** Animation: spin (default), bounce, rock, wobble */\n  animation?: AnimationOptions;\n  /** Location: mask, background */\n  /** Mask can break some animations but allows you to change the color of the icon. Use background if Mask is causing problems. */\n  location?: LocationOptions;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Spinner: FC<SpinnerProps> = ({\n  className,\n  loadText = 'Loading...',\n  size = 'medium',\n  imageUrl,\n  animation = 'spin',\n  location = 'mask',\n  testMetadata,\n  ...otherProps\n}) => {\n  const spinnerClassnames = useMemo(\n    () =>\n      classNames(\n        `sb-spinner_${location}`,\n        `sb-spinner_animate_${animation}`,\n        `sb-spinner_${size}`,\n      ),\n    [size, animation, location],\n  );\n\n  let styles = {};\n  if (imageUrl) {\n    if (location === 'mask') {\n      styles = {\n        maskImage: `url(${imageUrl})`,\n        WebkitMaskImage: `url(${imageUrl})`,\n      };\n    } else {\n      styles = {\n        backgroundImage: `url(${imageUrl})`,\n      };\n    }\n  }\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames('sb-spinner', className)}\n      role=\"alert\"\n      aria-live=\"assertive\"\n      {...testMetadata}\n    >\n      <p className=\"sb-spinner-load-text\">{loadText}</p>\n      <div\n        className={spinnerClassnames}\n        style={styles}\n        data-testid=\"spinner-mask\"\n      />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import {\n  ButtonHTMLAttributes,\n  DetailedHTMLProps,\n  FC,\n  HTMLProps,\n  MouseEvent,\n  MouseEventHandler,\n  forwardRef,\n  useCallback,\n  useMemo,\n  useContext,\n} from 'react';\nimport classNames from 'classnames';\n\n// Analytics\nimport {\n  AnalyticsContext,\n  TAnalyticsEventData,\n  handleAnalyticsEvent,\n} from '@dtci/dash/analytics';\n\n// Components\nimport Spinner from '../Spinner';\n\n// Styles\nimport './Button.scss';\n\n// Types\nimport { FontAwesomePackage, TestMetadata } from 'types';\n\nexport interface ButtonProps\n  extends DetailedHTMLProps<\n    ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  > {\n  /** Set the button style: promoted (default), standard, demoted, link */\n  styleType?: 'promoted' | 'standard' | 'demoted' | 'link';\n  /** Set the button color: primary (default), secondary, success, error, warning */\n  colorType?: 'primary' | 'secondary' | 'success' | 'error' | 'warning';\n  /** Set the icon position: before (default), after, stacked */\n  iconPlacement?: 'before' | 'after' | 'stacked';\n  /** Can change the size of the button: smaller, small, large */\n  sizeType?: 'smaller' | 'small' | 'large' | 'auto';\n  /** Name of Font Awesome icon to show or custom icon component */\n  iconType?: string | JSX.Element;\n  /** Package of Font Awesome icon */\n  iconPackage?: FontAwesomePackage;\n  /** Boolean to determine if button has an icon and no label */\n  iconOnly?: boolean;\n  /** Set label text for accessibility, should match button text **/\n  labelText?: string;\n  /** shakeOnDisabledHover */\n  shakeOnDisabledHover?: boolean;\n  /** Indicates if button should be disabled */\n  disabled?: boolean;\n  /** Indicates an async loading state */\n  isFetching?: boolean;\n  /** onClick event handler  */\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  // Test IDs for sections of Button\n  testMetadata?: TestMetadata;\n  /** Border Flush */\n  flush?: 'left' | 'right' | 'flush';\n  /** Additional event information to pass to analytics tracking */\n  analyticsEventData?: TAnalyticsEventData;\n}\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      colorType = 'primary',\n      styleType = 'promoted',\n      labelText,\n      iconType,\n      iconPackage = 'fas',\n      iconPlacement = 'before',\n      sizeType,\n      iconOnly,\n      children,\n      shakeOnDisabledHover,\n      disabled,\n      isFetching = false,\n      onClick,\n      testMetadata,\n      flush,\n      analyticsEventData,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const isStackedButton = iconPlacement === 'stacked';\n\n    const analyticsContext = useContext(AnalyticsContext);\n\n    const handleClick = useCallback(\n      (event: MouseEvent<HTMLButtonElement>) => {\n        if (isFetching) {\n          event.preventDefault();\n          event.stopPropagation();\n          return;\n        }\n        onClick?.(event);\n        handleAnalyticsEvent({\n          analyticsContext,\n          analyticsEventData,\n          componentType: 'Button',\n          actionName: 'click',\n          label:\n            otherProps?.['aria-label'] ||\n            labelText ||\n            children?.toString() ||\n            iconType?.toString() ||\n            '',\n        });\n      },\n      [\n        isFetching,\n        onClick,\n        analyticsContext,\n        otherProps,\n        labelText,\n        children,\n        iconType,\n        analyticsEventData,\n      ],\n    );\n\n    const buttonClassNames = useMemo(\n      () =>\n        classNames(\n          'sb-button',\n          {\n            ['sb-button_' + colorType]: colorType,\n            ['sb-button_' + styleType]: styleType,\n            ['sb-button_' + sizeType]: sizeType,\n            ['sb-button_icon-' + iconPlacement]: iconType && iconPlacement,\n            'sb-button_icon-only': iconOnly,\n            'sb-button_no-icon': !iconType,\n            'sb-button_fetching': isFetching,\n            'sb-button_disabled': isStackedButton && disabled, // only stacked needs to have a class for disabled\n            'sb-shake-on-disabled': shakeOnDisabledHover,\n            'sb-button_async': isFetching,\n            'sb-button__flush-right': flush === 'right',\n            'sb-button__flush': flush === 'flush',\n            'sb-button__flush-left': flush === 'left',\n          },\n          className,\n        ),\n      [\n        colorType,\n        styleType,\n        iconPlacement,\n        iconOnly,\n        shakeOnDisabledHover,\n        className,\n        disabled,\n        isStackedButton,\n        sizeType,\n        isFetching,\n        iconType,\n        flush,\n      ],\n    );\n\n    const stackedButtonWrapperClassNames = useMemo(\n      () =>\n        classNames('sb-stacked-wrapper', {\n          'sb-stacked-wrapper-disabled': disabled,\n        }),\n      [disabled],\n    );\n\n    const loader = (\n      <div className=\"sb-button_spinner-container\">\n        <Spinner size=\"small\" className=\"sb-button_spinner\" />\n      </div>\n    );\n\n    const icon = (\n      <span className=\"sb-button_icon-container\">\n        {typeof iconType === 'string' ? (\n          <>\n            {isFetching && loader}\n            <i\n              className={`${iconPackage} ${iconType} sb-button_icon`}\n              data-testid={\n                testMetadata?.['data-testid'] ? 'button-icon' : undefined\n              }\n            />\n          </>\n        ) : (\n          <>\n            {isFetching && loader}\n            <span className=\"sb-button_icon\">{iconType}</span>\n          </>\n        )}\n      </span>\n    );\n\n    return (\n      <>\n        {!isStackedButton && (\n          <button\n            {...otherProps}\n            ref={ref}\n            className={buttonClassNames}\n            aria-label={labelText}\n            title={labelText}\n            disabled={disabled}\n            onClick={handleClick}\n            {...testMetadata}\n          >\n            {iconType &&\n              (iconOnly || !iconPlacement || iconPlacement === 'before') &&\n              icon}\n\n            {!iconOnly && <span className=\"sb-button-text\">{children}</span>}\n            {isFetching && !iconType && loader}\n            {iconType && !iconOnly && iconPlacement === 'after' && icon}\n          </button>\n        )}\n\n        {isStackedButton && (\n          <button\n            {...otherProps}\n            disabled={disabled}\n            aria-label={labelText}\n            ref={ref}\n            title={labelText}\n            className={stackedButtonWrapperClassNames}\n            onClick={handleClick}\n          >\n            <span className={buttonClassNames}>{icon}</span>\n            <div className=\"sb-stacked-label\">{children}</div>\n          </button>\n        )}\n      </>\n    );\n  },\n);\n\nButton.displayName = 'Button';\n\nexport default Button as FC<HTMLProps<HTMLButtonElement> & ButtonProps>;\n","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Button from '../Button';\n\n// Styles\nimport './Notification.scss';\n\n// Types\nimport { TestMetadata } from 'types';\nimport { OnChangeType } from '../types';\n\nexport interface NotificationProps {\n  /** Boolean to determine if notification is a banner notification */\n  banner?: boolean;\n  /** Boolean to determine if notification is a toast notification */\n  toast?: boolean;\n  /* Boolean to determine if notification is showing in line with other text elements */\n  inline?: boolean;\n  /** Type of notification: info, warning, error, success */\n  notifType?: 'info' | 'error' | 'success' | 'warning';\n  /** Name of Font Awesome icon to show (if any)*/\n  iconTypePrimary?: string;\n  /** Set role to status, alert, or alertdialog for screen readers  */\n  role?: 'status' | 'alert' | 'alertdialog';\n  /** Class name for notification */\n  className?: string;\n  /** Boolean to determine if user can dismiss notification with close button  */\n  hideClose?: boolean;\n  /** function to click the close button  */\n  onClose?: OnChangeType;\n  /** Boolean to turn off aria-live announcements */\n  stopAnnouncements?: boolean;\n  /** Determine if light color theme should be used */\n  light?: boolean;\n  /** Determine if dark color theme should be used */\n  dark?: boolean;\n  // Test IDs for component sections\n  testMetadata?: {\n    notification?: TestMetadata;\n    closeButton?: TestMetadata;\n  };\n}\n\nconst ariaLiveProp = (\n  stopAnnouncements?: boolean,\n  banner?: boolean,\n  toast?: boolean,\n): 'off' | 'polite' | 'assertive' | undefined => {\n  let result: 'off' | 'polite' | 'assertive' | undefined;\n\n  if (stopAnnouncements) {\n    result = 'off';\n  } else if (toast) {\n    result = 'polite';\n  } else if (banner) {\n    result = 'assertive';\n  }\n\n  return result;\n};\n\nconst Notification: FC<NotificationProps> = ({\n  banner,\n  toast,\n  inline,\n  notifType,\n  iconTypePrimary,\n  role = 'status',\n  hideClose,\n  stopAnnouncements,\n  children,\n  light,\n  dark,\n  onClose,\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const notificationClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-notification',\n        {\n          'sb-notification_banner': banner,\n          'sb-notification_toast': toast,\n          'sb-notification_inline': inline,\n          'sb-notification_info': notifType === 'info',\n          'sb-notification_error': notifType === 'error',\n          'sb-notification_success': notifType === 'success',\n          'sb-notification_warning': notifType === 'warning',\n          'sb-notification_light': light,\n          'sb-notification_dark': dark,\n          'sb-notification_closable': !hideClose,\n        },\n        className,\n      ),\n    [banner, dark, inline, light, notifType, className, toast, hideClose],\n  );\n\n  return (\n    <section\n      {...otherProps}\n      className={notificationClassNames}\n      role={role}\n      tabIndex={banner ? 0 : undefined}\n      aria-live={ariaLiveProp(stopAnnouncements, banner, toast)}\n      {...testMetadata?.notification}\n    >\n      {iconTypePrimary && (\n        <i\n          className={classNames(\n            'sb-notification__type-icon',\n            'fas',\n            iconTypePrimary,\n          )}\n          aria-hidden=\"true\"\n        />\n      )}\n      {children}\n      {!hideClose && (\n        <Button\n          styleType=\"demoted\"\n          iconOnly\n          iconType=\"fa-times\"\n          labelText=\"Close\"\n          className=\"sb-notification__close-button\"\n          onClick={onClose}\n          {...testMetadata?.closeButton}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default Notification;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react-toastify\");","import { ReactNode } from 'react';\nimport { toast, cssTransition, Slide, ToastOptions } from 'react-toastify';\n\nexport const ReactToast = toast;\n\nconst None = cssTransition({\n  enter: 'zoomIn',\n  exit: 'zoomOut',\n  duration: 10,\n});\n\nexport type ToastPosition =\n  | 'bottom-right'\n  | 'bottom-left'\n  | 'bottom-center'\n  | 'top-right'\n  | 'top-left'\n  | 'top-center';\n\nexport interface ToastProps {\n  /** Toast content */\n  content: ReactNode;\n  /** Toast position */\n  position?: ToastPosition;\n  /** containerId */\n  containerId?: string | number;\n  /** toastId */\n  toastId?: string | number;\n  animate?: boolean;\n  autoClose?: number | false;\n  closeOnClick?: boolean;\n  additionalToastOps?: ToastOptions;\n}\n\nconst Toast = (props: ToastProps): void => {\n  const {\n    content,\n    position = 'bottom-right',\n    containerId,\n    animate = true,\n    autoClose,\n    closeOnClick,\n    toastId,\n    additionalToastOps,\n  } = props;\n\n  ReactToast(content, {\n    position,\n    containerId,\n    closeOnClick: closeOnClick,\n    transition: animate ? Slide : None,\n    autoClose: autoClose,\n    toastId: toastId,\n    ...additionalToastOps,\n  });\n};\n\nexport default Toast;\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { ToastContainer as ReactToastContainer } from 'react-toastify';\n\n// Styles\nimport './ToastContainer.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface ToastContainerProps {\n  /** Toast content */\n  autoClose?: number | false;\n  /** Toast content closeOnClick */\n  closeOnClick?: boolean;\n  /** Inline */\n  inline?: boolean;\n  /** enableMultiContainer */\n  enableMultiContainer?: boolean;\n  /** containerId */\n  containerId?: string | number;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst ToastContainer: FC<ToastContainerProps> = ({\n  autoClose = 3000,\n  closeOnClick = false,\n  inline = false,\n  enableMultiContainer = false,\n  containerId,\n  testMetadata,\n  ...otherProps\n}) => {\n  return (\n    <ReactToastContainer\n      {...otherProps}\n      autoClose={autoClose}\n      closeButton={false}\n      enableMultiContainer={enableMultiContainer}\n      hideProgressBar\n      closeOnClick={closeOnClick}\n      className={classNames({ inline })}\n      containerId={containerId}\n      draggable={false}\n      {...testMetadata}\n    />\n  );\n};\n\nexport default ToastContainer;\n","import { FC } from 'react';\n\n// Components\nimport BadgedContainer from '../BadgedContainer';\nimport Button from '../Button';\nimport Notification from '../Notification';\nimport { Toast, ToastContainer } from '../Toast';\n\n// Styles\nimport './CodeBox.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface CodeBoxProps {\n  code: string;\n  // Test IDs for sections of CodeBox\n  testMetadata?: {\n    copyButton?: TestMetadata;\n    code?: TestMetadata;\n  };\n}\n\nconst CodeBox: FC<CodeBoxProps> = ({\n  code,\n  testMetadata = {\n    copyButton: { 'data-testid': 'copyButton' },\n    code: { 'data-testid': 'code' },\n  },\n}) => {\n  const onCopyClick = (): void => {\n    navigator.clipboard.writeText(code);\n\n    Toast({\n      position: 'top-right',\n      closeOnClick: true,\n      animate: true,\n      containerId: 'code-box-container',\n      content: (\n        <Notification\n          iconTypePrimary=\"fa-check-circle\"\n          role=\"status\"\n          notifType=\"success\"\n          light\n          hideClose\n        >\n          <div>Copied code to clipboard!</div>\n        </Notification>\n      ),\n    });\n  };\n\n  return (\n    <>\n      <BadgedContainer\n        className=\"sb-code-box__container\"\n        badges={{\n          component: (\n            <Button\n              labelText=\"Copy\"\n              sizeType=\"smaller\"\n              onClick={onCopyClick}\n              {...testMetadata?.copyButton}\n            >\n              Copy\n            </Button>\n          ),\n          position: 'bottom-right',\n        }}\n      >\n        <pre>\n          <code className=\"sb-code-box\" {...testMetadata?.code}>\n            {code}\n          </code>\n        </pre>\n      </BadgedContainer>\n      <ToastContainer containerId=\"code-box-container\" enableMultiContainer />\n    </>\n  );\n};\n\nexport default CodeBox;\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","className","badges","children","testMetadata","otherProps","Array","isArray","classNames","map","badge","index","position","class","component","loadText","size","imageUrl","animation","location","spinnerClassnames","useMemo","styles","maskImage","WebkitMaskImage","backgroundImage","role","style","Button","forwardRef","ref","colorType","styleType","labelText","iconType","iconPackage","iconPlacement","sizeType","iconOnly","shakeOnDisabledHover","disabled","isFetching","onClick","flush","analyticsEventData","isStackedButton","analyticsContext","useContext","AnalyticsContext","handleClick","useCallback","event","preventDefault","stopPropagation","handleAnalyticsEvent","componentType","actionName","label","toString","buttonClassNames","stackedButtonWrapperClassNames","loader","icon","undefined","title","displayName","ariaLiveProp","stopAnnouncements","banner","toast","result","inline","notifType","iconTypePrimary","hideClose","light","dark","onClose","notificationClassNames","tabIndex","notification","closeButton","ReactToast","None","cssTransition","enter","exit","duration","props","content","containerId","animate","autoClose","closeOnClick","toastId","additionalToastOps","transition","Slide","enableMultiContainer","hideProgressBar","draggable","code","copyButton","navigator","clipboard","writeText","Toast"],"sourceRoot":""}