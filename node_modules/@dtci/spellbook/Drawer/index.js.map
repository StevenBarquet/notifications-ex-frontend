{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"@dtci/dash/analytics\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/Spinner/Spinner.tsx","webpack://@dtci/spellbook/./src/Button/Button.tsx","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/slicedToArray\"","webpack://@dtci/spellbook/./src/Overlay/Overlay.tsx","webpack://@dtci/spellbook/./src/Linear/Linear.tsx","webpack://@dtci/spellbook/./src/Loader/Loader.tsx","webpack://@dtci/spellbook/./src/Container/Container.tsx","webpack://@dtci/spellbook/./src/PanelLayout/Panel.tsx","webpack://@dtci/spellbook/./src/PanelLayout/PanelLayout.tsx","webpack://@dtci/spellbook/./src/StandardLayout/StandardLayout.tsx","webpack://@dtci/spellbook/./src/StandardLayout/BodyPanel.tsx","webpack://@dtci/spellbook/./src/StandardLayout/HeaderPanel.tsx","webpack://@dtci/spellbook/./src/StandardLayout/FooterPanel.tsx","webpack://@dtci/spellbook/external commonjs \"@dtci/triton/hooks\"","webpack://@dtci/spellbook/./src/Drawer/Drawer.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@dtci/dash/analytics\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Spinner.scss';\n\n// Types\nimport {\n  AnimationOptions,\n  LocationOptions,\n  SizeOptions,\n  TestMetadata,\n} from '../types';\n\nexport interface SpinnerProps {\n  /** Add a class to the spinner */\n  className?: string;\n  /** Loading text for screen readers */\n  loadText?: string;\n  /** Size: smaller, small, medium (default), large */\n  size?: SizeOptions;\n  /** Full URL to a custom image you would like to use */\n  imageUrl?: string;\n  /** Animation: spin (default), bounce, rock, wobble */\n  animation?: AnimationOptions;\n  /** Location: mask, background */\n  /** Mask can break some animations but allows you to change the color of the icon. Use background if Mask is causing problems. */\n  location?: LocationOptions;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Spinner: FC<SpinnerProps> = ({\n  className,\n  loadText = 'Loading...',\n  size = 'medium',\n  imageUrl,\n  animation = 'spin',\n  location = 'mask',\n  testMetadata,\n  ...otherProps\n}) => {\n  const spinnerClassnames = useMemo(\n    () =>\n      classNames(\n        `sb-spinner_${location}`,\n        `sb-spinner_animate_${animation}`,\n        `sb-spinner_${size}`,\n      ),\n    [size, animation, location],\n  );\n\n  let styles = {};\n  if (imageUrl) {\n    if (location === 'mask') {\n      styles = {\n        maskImage: `url(${imageUrl})`,\n        WebkitMaskImage: `url(${imageUrl})`,\n      };\n    } else {\n      styles = {\n        backgroundImage: `url(${imageUrl})`,\n      };\n    }\n  }\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames('sb-spinner', className)}\n      role=\"alert\"\n      aria-live=\"assertive\"\n      {...testMetadata}\n    >\n      <p className=\"sb-spinner-load-text\">{loadText}</p>\n      <div\n        className={spinnerClassnames}\n        style={styles}\n        data-testid=\"spinner-mask\"\n      />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import {\n  ButtonHTMLAttributes,\n  DetailedHTMLProps,\n  FC,\n  HTMLProps,\n  MouseEvent,\n  MouseEventHandler,\n  forwardRef,\n  useCallback,\n  useMemo,\n  useContext,\n} from 'react';\nimport classNames from 'classnames';\n\n// Analytics\nimport {\n  AnalyticsContext,\n  TAnalyticsEventData,\n  handleAnalyticsEvent,\n} from '@dtci/dash/analytics';\n\n// Components\nimport Spinner from '../Spinner';\n\n// Styles\nimport './Button.scss';\n\n// Types\nimport { FontAwesomePackage, TestMetadata } from 'types';\n\nexport interface ButtonProps\n  extends DetailedHTMLProps<\n    ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  > {\n  /** Set the button style: promoted (default), standard, demoted, link */\n  styleType?: 'promoted' | 'standard' | 'demoted' | 'link';\n  /** Set the button color: primary (default), secondary, success, error, warning */\n  colorType?: 'primary' | 'secondary' | 'success' | 'error' | 'warning';\n  /** Set the icon position: before (default), after, stacked */\n  iconPlacement?: 'before' | 'after' | 'stacked';\n  /** Can change the size of the button: smaller, small, large */\n  sizeType?: 'smaller' | 'small' | 'large' | 'auto';\n  /** Name of Font Awesome icon to show or custom icon component */\n  iconType?: string | JSX.Element;\n  /** Package of Font Awesome icon */\n  iconPackage?: FontAwesomePackage;\n  /** Boolean to determine if button has an icon and no label */\n  iconOnly?: boolean;\n  /** Set label text for accessibility, should match button text **/\n  labelText?: string;\n  /** shakeOnDisabledHover */\n  shakeOnDisabledHover?: boolean;\n  /** Indicates if button should be disabled */\n  disabled?: boolean;\n  /** Indicates an async loading state */\n  isFetching?: boolean;\n  /** onClick event handler  */\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  // Test IDs for sections of Button\n  testMetadata?: TestMetadata;\n  /** Border Flush */\n  flush?: 'left' | 'right' | 'flush';\n  /** Additional event information to pass to analytics tracking */\n  analyticsEventData?: TAnalyticsEventData;\n}\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      colorType = 'primary',\n      styleType = 'promoted',\n      labelText,\n      iconType,\n      iconPackage = 'fas',\n      iconPlacement = 'before',\n      sizeType,\n      iconOnly,\n      children,\n      shakeOnDisabledHover,\n      disabled,\n      isFetching = false,\n      onClick,\n      testMetadata,\n      flush,\n      analyticsEventData,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const isStackedButton = iconPlacement === 'stacked';\n\n    const analyticsContext = useContext(AnalyticsContext);\n\n    const handleClick = useCallback(\n      (event: MouseEvent<HTMLButtonElement>) => {\n        if (isFetching) {\n          event.preventDefault();\n          event.stopPropagation();\n          return;\n        }\n        onClick?.(event);\n        handleAnalyticsEvent({\n          analyticsContext,\n          analyticsEventData,\n          componentType: 'Button',\n          actionName: 'click',\n          label:\n            otherProps?.['aria-label'] ||\n            labelText ||\n            children?.toString() ||\n            iconType?.toString() ||\n            '',\n        });\n      },\n      [\n        isFetching,\n        onClick,\n        analyticsContext,\n        otherProps,\n        labelText,\n        children,\n        iconType,\n        analyticsEventData,\n      ],\n    );\n\n    const buttonClassNames = useMemo(\n      () =>\n        classNames(\n          'sb-button',\n          {\n            ['sb-button_' + colorType]: colorType,\n            ['sb-button_' + styleType]: styleType,\n            ['sb-button_' + sizeType]: sizeType,\n            ['sb-button_icon-' + iconPlacement]: iconType && iconPlacement,\n            'sb-button_icon-only': iconOnly,\n            'sb-button_no-icon': !iconType,\n            'sb-button_fetching': isFetching,\n            'sb-button_disabled': isStackedButton && disabled, // only stacked needs to have a class for disabled\n            'sb-shake-on-disabled': shakeOnDisabledHover,\n            'sb-button_async': isFetching,\n            'sb-button__flush-right': flush === 'right',\n            'sb-button__flush': flush === 'flush',\n            'sb-button__flush-left': flush === 'left',\n          },\n          className,\n        ),\n      [\n        colorType,\n        styleType,\n        iconPlacement,\n        iconOnly,\n        shakeOnDisabledHover,\n        className,\n        disabled,\n        isStackedButton,\n        sizeType,\n        isFetching,\n        iconType,\n        flush,\n      ],\n    );\n\n    const stackedButtonWrapperClassNames = useMemo(\n      () =>\n        classNames('sb-stacked-wrapper', {\n          'sb-stacked-wrapper-disabled': disabled,\n        }),\n      [disabled],\n    );\n\n    const loader = (\n      <div className=\"sb-button_spinner-container\">\n        <Spinner size=\"small\" className=\"sb-button_spinner\" />\n      </div>\n    );\n\n    const icon = (\n      <span className=\"sb-button_icon-container\">\n        {typeof iconType === 'string' ? (\n          <>\n            {isFetching && loader}\n            <i\n              className={`${iconPackage} ${iconType} sb-button_icon`}\n              data-testid={\n                testMetadata?.['data-testid'] ? 'button-icon' : undefined\n              }\n            />\n          </>\n        ) : (\n          <>\n            {isFetching && loader}\n            <span className=\"sb-button_icon\">{iconType}</span>\n          </>\n        )}\n      </span>\n    );\n\n    return (\n      <>\n        {!isStackedButton && (\n          <button\n            {...otherProps}\n            ref={ref}\n            className={buttonClassNames}\n            aria-label={labelText}\n            title={labelText}\n            disabled={disabled}\n            onClick={handleClick}\n            {...testMetadata}\n          >\n            {iconType &&\n              (iconOnly || !iconPlacement || iconPlacement === 'before') &&\n              icon}\n\n            {!iconOnly && <span className=\"sb-button-text\">{children}</span>}\n            {isFetching && !iconType && loader}\n            {iconType && !iconOnly && iconPlacement === 'after' && icon}\n          </button>\n        )}\n\n        {isStackedButton && (\n          <button\n            {...otherProps}\n            disabled={disabled}\n            aria-label={labelText}\n            ref={ref}\n            title={labelText}\n            className={stackedButtonWrapperClassNames}\n            onClick={handleClick}\n          >\n            <span className={buttonClassNames}>{icon}</span>\n            <div className=\"sb-stacked-label\">{children}</div>\n          </button>\n        )}\n      </>\n    );\n  },\n);\n\nButton.displayName = 'Button';\n\nexport default Button as FC<HTMLProps<HTMLButtonElement> & ButtonProps>;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/slicedToArray\");","import { FC, useMemo, useState, useEffect, useCallback } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Overlay.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface OverlayProps {\n  className?: string;\n  // token to control opacity (dark default)\n  type?: 'light' | 'dark';\n  // controls whether or not the overlay is visible (false default)\n  isVisible?: boolean;\n  // func that gets called when the overlay is clicked\n  onOverlayClick?: () => void;\n  // should isVisible be set to false if clicked (false default) - click on outside\n  hideOnClick?: boolean;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Overlay: FC<OverlayProps> = ({\n  children,\n  type = 'dark',\n  isVisible = true,\n  onOverlayClick,\n  hideOnClick = false,\n  className,\n  testMetadata = { 'data-testid': 'overlay' },\n  ...otherProps\n}) => {\n  const overlayClassNames = useMemo(\n    () =>\n      classNames('sb-overlay', className, {\n        'sb-overlay_dark': type === 'dark',\n        'sb-overlay_light': type === 'light',\n      }),\n    [className, type],\n  );\n\n  const [visible, setVisible] = useState<boolean>(isVisible);\n\n  useEffect(() => {\n    setVisible(isVisible);\n  }, [isVisible]);\n\n  const handleClick = useCallback(() => {\n    if (hideOnClick) setVisible(!visible);\n\n    onOverlayClick && onOverlayClick();\n  }, [hideOnClick, visible, setVisible, onOverlayClick]);\n\n  return visible ? (\n    <div\n      {...otherProps}\n      className={overlayClassNames}\n      onClick={handleClick}\n      {...testMetadata}\n    >\n      {children}\n    </div>\n  ) : (\n    <></>\n  );\n};\n\nexport default Overlay;\n","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Linear.scss';\n\n// Types\nimport { SizeOptions } from '../types';\nimport { TestMetadata } from 'types';\n\nexport interface LinearProps {\n  /** Add a class to the spinner */\n  className?: string;\n  /** Size: small, medium, large */\n  size?: SizeOptions;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n  /** variant */\n  variant?: 'determinate' | 'indeterminate';\n  /** max value for determinate variant */\n  max?: number;\n  /** current value for determinate variant */\n  value?: number;\n  /** to show or hide label */\n  showLabel?: boolean;\n}\n\nconst Linear: FC<LinearProps> = ({\n  className,\n  size,\n  testMetadata,\n  variant = 'indeterminate',\n  value = 0,\n  max = 100,\n  showLabel = false,\n  ...otherProps\n}) => {\n  const currentValue = useMemo(() => {\n    if (value >= 0 && max > 0) {\n      if (value > max) return 100;\n      return Math.round((value / max) * 100);\n    }\n    return 0;\n  }, [max, value]);\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames('sb-linear-container', className, {\n        'sb-linear-small': size === 'small',\n        'sb-linear-large': size === 'large',\n      })}\n      role=\"alert\"\n      aria-live=\"assertive\"\n      {...testMetadata}\n    >\n      <div\n        className={`sb-${variant}`}\n        data-testid={\n          testMetadata?.['data-testid'] ? 'linear-variant' : undefined\n        }\n      />\n      {variant === 'determinate' && (\n        <>\n          <div\n            className={classNames(\n              'sb-determinate-bar',\n              `sb-${variant}-bar_${currentValue}`,\n            )}\n          />\n          {showLabel && (\n            <div className=\"sb-determinate-label\">{`${currentValue}%`}</div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Linear;\n","import { FC, ReactElement } from 'react';\n\n// Components\nimport Linear from '../Linear';\nimport Spinner from '../Spinner';\n\n// Styles\nimport './Loader.scss';\n\n// Types\nimport { SizeOptions, TestMetadata } from '../types';\n\ntype LoaderType = 'spinner' | 'linear';\n\nexport interface LoaderProps {\n  /** Text to display above the loader */\n  text?: string;\n  /** Size of the loader */\n  size: SizeOptions;\n  /** Custom class name for the component */\n  className?: string;\n  /** Type of loader (Spinner default) */\n  type?: LoaderType;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst loader = (type: LoaderType, size: SizeOptions): ReactElement => {\n  switch (type) {\n    case 'linear':\n      return <Linear size={size} />;\n    case 'spinner':\n    default:\n      return <Spinner size={size} loadText=\"\" />;\n  }\n};\n\nconst Loader: FC<LoaderProps> = ({\n  className,\n  text,\n  type = 'spinner',\n  size,\n  testMetadata,\n  ...otherProps\n}) => (\n  <div\n    {...otherProps}\n    role=\"progressbar\"\n    className={className}\n    {...testMetadata}\n  >\n    {text && <div className=\"sb-loader-text\">{text}</div>}\n    {loader(type, size)}\n  </div>\n);\n\nexport default Loader;\n","import { ComponentProps, FC, ReactNode, Ref, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Loader, { LoaderProps } from '../Loader';\n\n// Styles\nimport './Container.scss';\n\n// Types\nimport {\n  ElevationHeight,\n  PrismFill,\n  SizeOptions,\n  SpacingOptions,\n  WidthOptions,\n  MarginOptions,\n  TestMetadata,\n  ContainerStateType,\n} from '../types';\n\nexport interface ContainerProps extends ComponentProps<'div'> {\n  /** Elements to Wrap */\n  children: ReactNode;\n  /** Class name */\n  className?: string;\n  /** Controls the fill of the container: transparent, white (default), gray, theme */\n  fill?: 'transparent' | 'error-light' | PrismFill;\n  /** Controls the padding: none, normal (default), tight, loose. Either set one value to set all positions or four (T-R-B-L) */\n  padding?: SpacingOptions | SpacingOptions[];\n  /** Controls the margin: none, normal (default), tight, loose, centered. Either set one value to set all positions or four (T-R-B-L) */\n  margin?: MarginOptions | SpacingOptions[];\n  /** Controls the width of the stroke on the container: none (default), standard, thin, thick */\n  strokeWidth?: WidthOptions;\n  /** Controls the color of the stroke, prism system colors with black by default */\n  strokeColor?: PrismFill;\n  /** Drives corner radius and geometric shape: none, small (default), medium, large  */\n  cornerRadius?: 'none' | SizeOptions;\n  /** Creates visual hierarchy by using shadow and Z-depth: none, low, mid (default), high  */\n  elevation?: ElevationHeight;\n  /** Event to fire when the card is clicked */\n  onClick?: () => void;\n  /** Ref for container div */\n  containerRef?: Ref<HTMLDivElement>;\n  /** Height of the container */\n  height?: 'auto' | 'full';\n  /** Test IDs for sections of Container */\n  testMetadata?: TestMetadata;\n  /** Container state props */\n  containerStateProps?: ContainerStateProps;\n}\n\nexport interface ContainerStateProps {\n  /** The current state of the container */\n  containerState?: ContainerStateType;\n  /** An optional override message to display */\n  message?: string;\n  /** Loader size to be used for loading state */\n  loaderSize?: LoaderProps['size'];\n}\n\nconst defaultMessage: {\n  [key in ContainerStateType]: string;\n} = {\n  loading: 'Loading...',\n  error: 'Something went wrong when fetching data',\n  empty: 'No results',\n};\n\nconst Container: FC<ContainerProps> = ({\n  children,\n  className,\n  padding = 'none',\n  margin = 'none',\n  strokeWidth = 'none',\n  strokeColor = 'black',\n  cornerRadius = 'none',\n  elevation = 'none',\n  fill = 'transparent',\n  height = 'auto',\n  containerRef,\n  testMetadata,\n  containerStateProps,\n  ...otherProps\n}) => {\n  const containerClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-container',\n        ['sb-container_size-' + height],\n        ['sb-container_corner-radius-' + cornerRadius],\n        ['sb-container_elevation-' + elevation],\n        ['sb-container_fill-' + fill],\n        ['sb-container_stroke-width-' + strokeWidth],\n        ['sb-container_stroke-color-' + strokeColor],\n        {\n          /** Only add state class when its set */\n          'sb-container_state':\n            containerStateProps &&\n            containerStateProps?.containerState !== undefined,\n          ['sb-container_state-' + containerStateProps?.containerState]:\n            containerStateProps &&\n            containerStateProps?.containerState !== undefined,\n\n          /** If padding is not array - just set the class, ie sb-container_padding-loose */\n          ['sb-container_padding-' + padding]: !Array.isArray(padding),\n\n          /** Else go through top-right-bottom-left and set, ie sb-container_padding-top-loose */\n          ['sb-container_padding-top-' + padding[0]]:\n            Array.isArray(padding) && padding.length > 0,\n          ['sb-container_padding-right-' + padding[1]]:\n            Array.isArray(padding) && padding.length > 1,\n          ['sb-container_padding-bottom-' + padding[2]]:\n            Array.isArray(padding) && padding.length > 2,\n          ['sb-container_padding-left-' + padding[3]]:\n            Array.isArray(padding) && padding.length > 3,\n\n          /** If margin is not array - just set the class, ie sb-container_margin-loose */\n          ['sb-container_margin-' + margin]: !Array.isArray(margin),\n\n          /** Else go through top-right-bottom-left and set, ie sb-container_margin-top-loose */\n          ['sb-container_margin-top-' + margin[0]]:\n            Array.isArray(margin) && margin.length > 0,\n          ['sb-container_margin-right-' + margin[1]]:\n            Array.isArray(margin) && margin.length > 1,\n          ['sb-container_margin-bottom-' + margin[2]]:\n            Array.isArray(margin) && margin.length > 2,\n          ['sb-container_margin-left-' + margin[3]]:\n            Array.isArray(margin) && margin.length > 3,\n        },\n        className,\n      ),\n    [\n      strokeWidth,\n      strokeColor,\n      cornerRadius,\n      elevation,\n      fill,\n      className,\n      padding,\n      margin,\n      height,\n      containerStateProps,\n    ],\n  );\n\n  return (\n    <div\n      {...otherProps}\n      className={containerClassNames}\n      ref={containerRef}\n      {...testMetadata}\n    >\n      {containerStateProps?.containerState && (\n        <div>\n          {containerStateProps.message ??\n            defaultMessage[containerStateProps.containerState]}\n          {containerStateProps.containerState === 'loading' && (\n            <Loader size={containerStateProps?.loaderSize || 'large'} />\n          )}\n        </div>\n      )}\n\n      {!containerStateProps?.containerState && children}\n    </div>\n  );\n};\n\nexport default Container;\n","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Container, { ContainerProps } from '../Container';\n\n// Styles\nimport './Panel.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface PanelProps extends ContainerProps {\n  /** Grid area name of Panel */\n  name: string;\n  /** Can choose to only show panel for specific sizes */\n  visibleOn?: {\n    size: 'slim' | 'small' | 'medium' | 'large' | 'wide';\n    direction: 'up' | 'down';\n  };\n  /** Panel can scroll */\n  isScrollable?: boolean;\n  /** Set overflow: hidden */\n  overflow?: 'visible' | 'hidden' | 'scroll' | 'auto';\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Panel: FC<PanelProps> = ({\n  children,\n  className,\n  style,\n  name,\n  visibleOn,\n  testMetadata,\n  isScrollable = true,\n  overflow = 'visible',\n  ...otherProps\n}) => {\n  const nameToken = useMemo((): Record<string, string> => {\n    return {\n      '--sb-panel-layout__panel-name': name,\n    };\n  }, [name]);\n\n  return (\n    <Container\n      className={classNames(\n        'sb-panel',\n        visibleOn &&\n          `sb-panel__visible-on-${visibleOn.size}-${visibleOn.direction}`,\n        {\n          'sb-panel_scrollable': isScrollable,\n          [`sb-panel_${overflow}`]: overflow !== 'visible',\n        },\n        className,\n      )}\n      style={{ ...nameToken, ...style }}\n      {...testMetadata}\n      {...otherProps}\n    >\n      {children}\n    </Container>\n  );\n};\n\nexport default Panel;\n","import { ComponentProps, FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './PanelLayout.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface CssGridProps {\n  /** Sets token for grid-template-columns */\n  columns: string[];\n  /** Sets token for grid-template-rows */\n  rows: string[];\n  /** Sets token for grid-template-columns, each array represents a row */\n  areas: string[][];\n}\n\nexport interface PanelLayoutProps extends ComponentProps<'div'> {\n  slim: CssGridProps;\n  small?: CssGridProps;\n  medium?: CssGridProps;\n  large?: CssGridProps;\n  wide?: CssGridProps;\n  className?: string;\n  testMetadata?: TestMetadata;\n}\n\nconst isCssGridEntryDefined = (\n  entry: [string, CssGridProps | undefined],\n): entry is [string, CssGridProps] => {\n  const [, spec] = entry;\n  return spec !== undefined;\n};\n\nconst getTokensFromCssGridProp = (\n  reflowpoint: string,\n  prop: CssGridProps,\n): Record<string, string> => {\n  const areaRows = prop.areas.map((row) => `\"${row.join(' ')}\"`).join('\\n');\n\n  return {\n    [`--sb-panel-layout-${reflowpoint}-areas`]: areaRows,\n    [`--sb-panel-layout-${reflowpoint}-columns`]: prop.columns.join(' '),\n    [`--sb-panel-layout-${reflowpoint}-rows`]: prop.rows.join(' '),\n  };\n};\n\nconst PanelLayout: FC<PanelLayoutProps> = ({\n  children,\n  className,\n  style,\n  slim,\n  small,\n  medium,\n  large,\n  wide,\n  testMetadata,\n}) => {\n  const tokens = useMemo(\n    () =>\n      Object.entries({ slim, small, medium, large, wide })\n        .filter(isCssGridEntryDefined)\n        .reduce<Record<string, string>>(\n          (tokens, [reflowpoint, spec]) => ({\n            ...tokens,\n            ...getTokensFromCssGridProp(reflowpoint, spec),\n          }),\n          {},\n        ),\n    [slim, small, medium, large, wide],\n  );\n\n  return (\n    <div\n      className={classNames('sb-panel-layout', className)}\n      style={{ ...tokens, ...style }}\n      {...testMetadata}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default PanelLayout;\n","import { FC } from 'react';\n\n// Components\nimport { PanelLayout } from '../PanelLayout';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface StandardLayoutProps {\n  /** Custom class name for layout */\n  className?: string;\n  /** Test data IDs for layout */\n  testMetadata?: TestMetadata;\n  /** Areas */\n  areaMap?: {\n    header: string;\n    body: string;\n    footer: string;\n  };\n}\n\nconst StandardLayout: FC<StandardLayoutProps> = ({\n  children,\n  areaMap = {\n    header: 'header',\n    body: 'body',\n    footer: 'footer',\n  },\n  ...otherProps\n}) => {\n  return (\n    <PanelLayout\n      slim={{\n        columns: ['1fr'],\n        rows: ['auto', '1fr', 'auto'],\n        areas: [[areaMap.header], [areaMap.body], [areaMap.footer]],\n      }}\n      {...otherProps}\n    >\n      {children}\n    </PanelLayout>\n  );\n};\n\nexport default StandardLayout;\n","import { FC } from 'react';\n\n// Components\nimport { Panel } from '../PanelLayout';\n\n// Types\nimport { PanelTemplateProps } from 'types';\n\nconst BodyPanel: FC<PanelTemplateProps> = ({\n  children,\n  name,\n  ...otherProps\n}) => {\n  return (\n    <Panel name={name || 'body'} {...otherProps}>\n      {children}\n    </Panel>\n  );\n};\n\nexport default BodyPanel;\n","import { FC } from 'react';\n\n// Components\nimport { Panel } from '../PanelLayout';\n\n// Types\nimport { PanelTemplateProps } from 'types';\n\nconst HeaderPanel: FC<PanelTemplateProps> = ({\n  children,\n  name,\n  ...otherProps\n}) => {\n  return (\n    <Panel name={name || 'header'} {...otherProps}>\n      {children}\n    </Panel>\n  );\n};\n\nexport default HeaderPanel;\n","import { FC } from 'react';\n\n// Components\nimport { Panel } from '../PanelLayout';\n\n// Types\nimport { PanelTemplateProps } from 'types';\n\nconst FooterPanel: FC<PanelTemplateProps> = ({ children, ...otherProps }) => {\n  return (\n    <Panel name=\"footer\" {...otherProps}>\n      {children}\n    </Panel>\n  );\n};\n\nexport default FooterPanel;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@dtci/triton/hooks\");","import { FC, ReactNode, SyntheticEvent, useContext, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Button from '../Button';\nimport Overlay from '../Overlay';\nimport {\n  StandardLayout,\n  HeaderPanel,\n  BodyPanel,\n  FooterPanel,\n} from '../StandardLayout';\n\n// Styles\nimport './Drawer.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Analytics\nimport {\n  AnalyticsContext,\n  TAnalyticsEventData,\n  useDrawerTrack,\n} from '@dtci/dash/analytics';\n\n// Hooks\nimport { usePrevious } from '@dtci/triton/hooks';\n\nexport interface DrawerProps {\n  /** Determines if the drawer should shrink the main content when opened */\n  shouldShrinkMainContent?: boolean;\n  /** Determines if the drawer is open */\n  isPanelOpen: boolean;\n  /** Panel component to be rendered as an overlay from the right side */\n  panel: ReactNode;\n  /** Short descriptor of drawer (shows in header and for ARIA labeling) */\n  header: ReactNode;\n  /** Determines if drawer header should be hidden */\n  hideHeader?: boolean;\n  /** Determines if drawer header should be frozen */\n  freezeHeader?: boolean;\n  /** Determines if close button on drawer should be hidden */\n  hideClose?: boolean;\n  /** Close button function */\n  onClose?: (e: SyntheticEvent) => void;\n  /** Class name for drawer container */\n  className?: string;\n  /** Animation direction for the drawer */\n  position?: 'left' | 'right';\n  /** Type of page overlay: blackout, whiteout */\n  bodyOverlay?: 'blackout' | 'whiteout';\n  // Test IDs for component sections\n  testMetadata?: {\n    drawerMain?: TestMetadata;\n    drawerOverlay?: TestMetadata;\n    drawerOverlayHeader?: TestMetadata;\n    drawerOverlayCloseButton?: TestMetadata;\n    drawerFooter?: TestMetadata;\n  };\n  /** Optional ReactNode to put in the footer of the drawer */\n  footer?: ReactNode;\n  size?: 'normal' | '80' | '85' | '90' | '95';\n  /** Additional event information to pass to analytics tracking */\n  analyticsEventData?: TAnalyticsEventData;\n}\n\nconst Drawer: FC<DrawerProps> = ({\n  isPanelOpen,\n  shouldShrinkMainContent,\n  panel,\n  header,\n  hideHeader,\n  freezeHeader = false,\n  hideClose,\n  onClose = () => {\n    // noop\n  },\n  className,\n  children,\n  position = 'right',\n  bodyOverlay,\n  footer,\n  testMetadata = {\n    drawerMain: { 'data-testid': 'drawerMain' },\n    drawerOverlay: { 'data-testid': 'drawerOverlay' },\n    drawerOverlayHeader: { 'data-testid': 'drawerOverlayHeader' },\n    drawerOverlayCloseButton: { 'data-testid': 'drawerOverlayCloseButton' },\n    drawerFooter: { 'data-testid': 'drawerFooter' },\n  },\n  size = 'normal',\n  analyticsEventData,\n  ...otherProps\n}) => {\n  const prevIsPanelOpen = usePrevious(isPanelOpen);\n\n  const DrawerOverlayStyles = useMemo(\n    () =>\n      classNames(\n        `sb-drawer__overlay${position === 'right' ? '' : '__' + position}`,\n        {\n          [`sb-drawer__overlay_is-open${\n            position === 'right' ? '' : '__' + position\n          }`]: isPanelOpen,\n        },\n      ),\n    [isPanelOpen, position],\n  );\n\n  const mainLayoutStyles = useMemo(\n    () =>\n      classNames({\n        [`sb-drawer__main_is-shrunk${\n          position === 'right' ? '' : '__' + position\n        }`]: shouldShrinkMainContent && isPanelOpen,\n        'sb-drawer__main_is-open': isPanelOpen,\n      }),\n    [shouldShrinkMainContent, isPanelOpen, position],\n  );\n\n  const drawerClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-drawer',\n        `sb-drawer__size-${size}`,\n        {\n          'sb-drawer_can-shrink': shouldShrinkMainContent,\n          'sb-drawer_can-overlay': !shouldShrinkMainContent,\n        },\n        className,\n      ),\n    [className, shouldShrinkMainContent, size],\n  );\n\n  const closeButtonClassNames = useMemo(\n    () =>\n      classNames('sb-drawer__close', {\n        'sb-drawer__close_hide-header': hideHeader,\n      }),\n    [hideHeader],\n  );\n\n  const analyticsContext = useContext(AnalyticsContext);\n\n  useDrawerTrack(\n    { analyticsContext, analyticsEventData },\n    isPanelOpen,\n    prevIsPanelOpen,\n    {\n      header,\n      className,\n    },\n  );\n\n  return (\n    <div {...otherProps} className={drawerClassNames} data-testid=\"drawerPanel\">\n      <section\n        className={classNames('sb-drawer__main', mainLayoutStyles)}\n        {...testMetadata?.drawerMain}\n      >\n        {children}\n        <Overlay\n          isVisible={isPanelOpen && bodyOverlay !== undefined}\n          type={bodyOverlay === 'whiteout' ? 'light' : 'dark'}\n        />\n      </section>\n      <aside\n        className={classNames('sb-drawer__overlay', DrawerOverlayStyles)}\n        {...testMetadata?.drawerOverlay}\n      >\n        <StandardLayout>\n          {!hideHeader && (\n            <HeaderPanel\n              className=\"sb-drawer__header\"\n              isScrollable={freezeHeader}\n              {...testMetadata?.drawerOverlayHeader}\n            >\n              {header}\n              {!hideClose && (\n                <Button\n                  sizeType=\"large\"\n                  iconOnly\n                  tabIndex={isPanelOpen ? 0 : -1}\n                  iconType=\"fa-times\"\n                  styleType=\"demoted\"\n                  labelText=\"Close\"\n                  className={closeButtonClassNames}\n                  onClick={onClose}\n                  analyticsEventData={{\n                    componentName: 'Drawer Close Button',\n                  }}\n                  {...testMetadata?.drawerOverlayCloseButton}\n                />\n              )}\n            </HeaderPanel>\n          )}\n          <BodyPanel isScrollable={freezeHeader}>\n            {hideHeader && !hideClose && (\n              <Button\n                sizeType=\"large\"\n                iconOnly\n                iconType=\"fa-times\"\n                styleType=\"demoted\"\n                labelText=\"Close\"\n                className={closeButtonClassNames}\n                onClick={onClose}\n                analyticsEventData={{\n                  componentName: 'Drawer Close Button',\n                }}\n                {...testMetadata?.drawerOverlayCloseButton}\n              />\n            )}\n            {panel}\n          </BodyPanel>\n          {footer && (\n            <FooterPanel {...testMetadata?.drawerFooter}>{footer}</FooterPanel>\n          )}\n        </StandardLayout>\n      </aside>\n    </div>\n  );\n};\n\nexport default Drawer;\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","className","loadText","size","imageUrl","animation","location","testMetadata","otherProps","spinnerClassnames","useMemo","classNames","styles","maskImage","WebkitMaskImage","backgroundImage","role","style","Button","forwardRef","ref","colorType","styleType","labelText","iconType","iconPackage","iconPlacement","sizeType","iconOnly","children","shakeOnDisabledHover","disabled","isFetching","onClick","flush","analyticsEventData","isStackedButton","analyticsContext","useContext","AnalyticsContext","handleClick","useCallback","event","preventDefault","stopPropagation","handleAnalyticsEvent","componentType","actionName","label","toString","buttonClassNames","stackedButtonWrapperClassNames","loader","icon","undefined","title","displayName","type","isVisible","onOverlayClick","hideOnClick","overlayClassNames","useState","visible","setVisible","useEffect","variant","max","showLabel","currentValue","Math","round","text","defaultMessage","loading","error","empty","padding","margin","strokeWidth","strokeColor","cornerRadius","elevation","fill","height","containerRef","containerStateProps","containerClassNames","containerState","Array","isArray","length","message","loaderSize","name","visibleOn","isScrollable","overflow","nameToken","direction","isCssGridEntryDefined","entry","slim","small","medium","large","wide","tokens","entries","filter","reduce","reflowpoint","spec","areaRows","areas","map","row","join","columns","rows","getTokensFromCssGridProp","areaMap","header","body","footer","isPanelOpen","shouldShrinkMainContent","panel","hideHeader","freezeHeader","hideClose","onClose","position","bodyOverlay","drawerMain","drawerOverlay","drawerOverlayHeader","drawerOverlayCloseButton","drawerFooter","prevIsPanelOpen","usePrevious","DrawerOverlayStyles","mainLayoutStyles","drawerClassNames","closeButtonClassNames","useDrawerTrack","tabIndex","componentName"],"sourceRoot":""}