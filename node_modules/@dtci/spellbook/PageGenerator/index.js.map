{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/external commonjs \"react-helmet\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/Linear/Linear.tsx","webpack://@dtci/spellbook/./src/Spinner/Spinner.tsx","webpack://@dtci/spellbook/./src/Loader/Loader.tsx","webpack://@dtci/spellbook/./src/Container/Container.tsx","webpack://@dtci/spellbook/./src/PanelLayout/Panel.tsx","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/slicedToArray\"","webpack://@dtci/spellbook/./src/PanelLayout/PanelLayout.tsx","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/toConsumableArray\"","webpack://@dtci/spellbook/external commonjs \"lodash\"","webpack://@dtci/spellbook/./src/PageGenerator/utils.ts","webpack://@dtci/spellbook/./src/PageGenerator/Canvas.tsx","webpack://@dtci/spellbook/./src/Sections/HeaderSection/HeaderSection.tsx","webpack://@dtci/spellbook/./src/Sections/BodySection/BodySection.tsx","webpack://@dtci/spellbook/./src/Sections/FullSection/FullSection.tsx","webpack://@dtci/spellbook/./src/Renditions/WhiteRendition/WhiteRendition.tsx","webpack://@dtci/spellbook/./src/Renditions/GrayRendition/GrayRendition.tsx","webpack://@dtci/spellbook/./src/Renditions/PrimaryRendition/PrimaryRendition.tsx","webpack://@dtci/spellbook/./src/Renditions/FooterRendition/FooterRendition.tsx","webpack://@dtci/spellbook/./src/Renditions/TransparentRendition/TransparentRendition.tsx","webpack://@dtci/spellbook/./src/Renditions/AppHeaderRendition/AppHeaderRendition.tsx","webpack://@dtci/spellbook/./src/StandardLayout/StandardLayout.tsx","webpack://@dtci/spellbook/./src/StandardLayout/BodyPanel.tsx","webpack://@dtci/spellbook/./src/StandardLayout/HeaderPanel.tsx","webpack://@dtci/spellbook/./src/StandardLayout/FooterPanel.tsx","webpack://@dtci/spellbook/./src/Canvases/BasicCanvas/BasicCanvas.tsx","webpack://@dtci/spellbook/./src/PageGenerator/Canvases/BasicCanvas/BasicCanvas.tsx","webpack://@dtci/spellbook/./src/DualPanelLayout/DualPanelLayout.tsx","webpack://@dtci/spellbook/./src/DualPanelLayout/PrimaryPanel.tsx","webpack://@dtci/spellbook/./src/DualPanelLayout/SecondaryPanel.tsx","webpack://@dtci/spellbook/./src/Canvases/DualPanelCanvas/DualPanelCanvas.tsx","webpack://@dtci/spellbook/./src/PageGenerator/Canvases/DualPanelCanvas/DualPanelCanvas.tsx","webpack://@dtci/spellbook/./src/PageGenerator/Canvases/BodyCanvas/BodyCanvas.tsx","webpack://@dtci/spellbook/./src/Canvases/BasicFormCanvas/BasicFormCanvas.tsx","webpack://@dtci/spellbook/./src/Canvases/BasicFullBodyCanvas/BasicFullBodyCanvas.tsx","webpack://@dtci/spellbook/./src/Canvases/ComponentCanvas/ComponentCanvas.tsx","webpack://@dtci/spellbook/./src/PageGenerator/Canvases/FormCanvas/FormCanvas.tsx","webpack://@dtci/spellbook/./src/PageGenerator/Layouts/StandardLayout.tsx","webpack://@dtci/spellbook/./src/PageGenerator/Layouts/DualLayout.tsx","webpack://@dtci/spellbook/./src/SidebarLayout/SidebarLayout.tsx","webpack://@dtci/spellbook/./src/PageGenerator/Layouts/SidebarLayout.tsx","webpack://@dtci/spellbook/./src/PageGenerator/PageGenerator.tsx","webpack://@dtci/spellbook/./src/PageGenerator/ContentArea.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react-helmet\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Linear.scss';\n\n// Types\nimport { SizeOptions } from '../types';\nimport { TestMetadata } from 'types';\n\nexport interface LinearProps {\n  /** Add a class to the spinner */\n  className?: string;\n  /** Size: small, medium, large */\n  size?: SizeOptions;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n  /** variant */\n  variant?: 'determinate' | 'indeterminate';\n  /** max value for determinate variant */\n  max?: number;\n  /** current value for determinate variant */\n  value?: number;\n  /** to show or hide label */\n  showLabel?: boolean;\n}\n\nconst Linear: FC<LinearProps> = ({\n  className,\n  size,\n  testMetadata,\n  variant = 'indeterminate',\n  value = 0,\n  max = 100,\n  showLabel = false,\n  ...otherProps\n}) => {\n  const currentValue = useMemo(() => {\n    if (value >= 0 && max > 0) {\n      if (value > max) return 100;\n      return Math.round((value / max) * 100);\n    }\n    return 0;\n  }, [max, value]);\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames('sb-linear-container', className, {\n        'sb-linear-small': size === 'small',\n        'sb-linear-large': size === 'large',\n      })}\n      role=\"alert\"\n      aria-live=\"assertive\"\n      {...testMetadata}\n    >\n      <div\n        className={`sb-${variant}`}\n        data-testid={\n          testMetadata?.['data-testid'] ? 'linear-variant' : undefined\n        }\n      />\n      {variant === 'determinate' && (\n        <>\n          <div\n            className={classNames(\n              'sb-determinate-bar',\n              `sb-${variant}-bar_${currentValue}`,\n            )}\n          />\n          {showLabel && (\n            <div className=\"sb-determinate-label\">{`${currentValue}%`}</div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Linear;\n","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Spinner.scss';\n\n// Types\nimport {\n  AnimationOptions,\n  LocationOptions,\n  SizeOptions,\n  TestMetadata,\n} from '../types';\n\nexport interface SpinnerProps {\n  /** Add a class to the spinner */\n  className?: string;\n  /** Loading text for screen readers */\n  loadText?: string;\n  /** Size: smaller, small, medium (default), large */\n  size?: SizeOptions;\n  /** Full URL to a custom image you would like to use */\n  imageUrl?: string;\n  /** Animation: spin (default), bounce, rock, wobble */\n  animation?: AnimationOptions;\n  /** Location: mask, background */\n  /** Mask can break some animations but allows you to change the color of the icon. Use background if Mask is causing problems. */\n  location?: LocationOptions;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Spinner: FC<SpinnerProps> = ({\n  className,\n  loadText = 'Loading...',\n  size = 'medium',\n  imageUrl,\n  animation = 'spin',\n  location = 'mask',\n  testMetadata,\n  ...otherProps\n}) => {\n  const spinnerClassnames = useMemo(\n    () =>\n      classNames(\n        `sb-spinner_${location}`,\n        `sb-spinner_animate_${animation}`,\n        `sb-spinner_${size}`,\n      ),\n    [size, animation, location],\n  );\n\n  let styles = {};\n  if (imageUrl) {\n    if (location === 'mask') {\n      styles = {\n        maskImage: `url(${imageUrl})`,\n        WebkitMaskImage: `url(${imageUrl})`,\n      };\n    } else {\n      styles = {\n        backgroundImage: `url(${imageUrl})`,\n      };\n    }\n  }\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames('sb-spinner', className)}\n      role=\"alert\"\n      aria-live=\"assertive\"\n      {...testMetadata}\n    >\n      <p className=\"sb-spinner-load-text\">{loadText}</p>\n      <div\n        className={spinnerClassnames}\n        style={styles}\n        data-testid=\"spinner-mask\"\n      />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import { FC, ReactElement } from 'react';\n\n// Components\nimport Linear from '../Linear';\nimport Spinner from '../Spinner';\n\n// Styles\nimport './Loader.scss';\n\n// Types\nimport { SizeOptions, TestMetadata } from '../types';\n\ntype LoaderType = 'spinner' | 'linear';\n\nexport interface LoaderProps {\n  /** Text to display above the loader */\n  text?: string;\n  /** Size of the loader */\n  size: SizeOptions;\n  /** Custom class name for the component */\n  className?: string;\n  /** Type of loader (Spinner default) */\n  type?: LoaderType;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst loader = (type: LoaderType, size: SizeOptions): ReactElement => {\n  switch (type) {\n    case 'linear':\n      return <Linear size={size} />;\n    case 'spinner':\n    default:\n      return <Spinner size={size} loadText=\"\" />;\n  }\n};\n\nconst Loader: FC<LoaderProps> = ({\n  className,\n  text,\n  type = 'spinner',\n  size,\n  testMetadata,\n  ...otherProps\n}) => (\n  <div\n    {...otherProps}\n    role=\"progressbar\"\n    className={className}\n    {...testMetadata}\n  >\n    {text && <div className=\"sb-loader-text\">{text}</div>}\n    {loader(type, size)}\n  </div>\n);\n\nexport default Loader;\n","import { ComponentProps, FC, ReactNode, Ref, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Loader, { LoaderProps } from '../Loader';\n\n// Styles\nimport './Container.scss';\n\n// Types\nimport {\n  ElevationHeight,\n  PrismFill,\n  SizeOptions,\n  SpacingOptions,\n  WidthOptions,\n  MarginOptions,\n  TestMetadata,\n  ContainerStateType,\n} from '../types';\n\nexport interface ContainerProps extends ComponentProps<'div'> {\n  /** Elements to Wrap */\n  children: ReactNode;\n  /** Class name */\n  className?: string;\n  /** Controls the fill of the container: transparent, white (default), gray, theme */\n  fill?: 'transparent' | 'error-light' | PrismFill;\n  /** Controls the padding: none, normal (default), tight, loose. Either set one value to set all positions or four (T-R-B-L) */\n  padding?: SpacingOptions | SpacingOptions[];\n  /** Controls the margin: none, normal (default), tight, loose, centered. Either set one value to set all positions or four (T-R-B-L) */\n  margin?: MarginOptions | SpacingOptions[];\n  /** Controls the width of the stroke on the container: none (default), standard, thin, thick */\n  strokeWidth?: WidthOptions;\n  /** Controls the color of the stroke, prism system colors with black by default */\n  strokeColor?: PrismFill;\n  /** Drives corner radius and geometric shape: none, small (default), medium, large  */\n  cornerRadius?: 'none' | SizeOptions;\n  /** Creates visual hierarchy by using shadow and Z-depth: none, low, mid (default), high  */\n  elevation?: ElevationHeight;\n  /** Event to fire when the card is clicked */\n  onClick?: () => void;\n  /** Ref for container div */\n  containerRef?: Ref<HTMLDivElement>;\n  /** Height of the container */\n  height?: 'auto' | 'full';\n  /** Test IDs for sections of Container */\n  testMetadata?: TestMetadata;\n  /** Container state props */\n  containerStateProps?: ContainerStateProps;\n}\n\nexport interface ContainerStateProps {\n  /** The current state of the container */\n  containerState?: ContainerStateType;\n  /** An optional override message to display */\n  message?: string;\n  /** Loader size to be used for loading state */\n  loaderSize?: LoaderProps['size'];\n}\n\nconst defaultMessage: {\n  [key in ContainerStateType]: string;\n} = {\n  loading: 'Loading...',\n  error: 'Something went wrong when fetching data',\n  empty: 'No results',\n};\n\nconst Container: FC<ContainerProps> = ({\n  children,\n  className,\n  padding = 'none',\n  margin = 'none',\n  strokeWidth = 'none',\n  strokeColor = 'black',\n  cornerRadius = 'none',\n  elevation = 'none',\n  fill = 'transparent',\n  height = 'auto',\n  containerRef,\n  testMetadata,\n  containerStateProps,\n  ...otherProps\n}) => {\n  const containerClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-container',\n        ['sb-container_size-' + height],\n        ['sb-container_corner-radius-' + cornerRadius],\n        ['sb-container_elevation-' + elevation],\n        ['sb-container_fill-' + fill],\n        ['sb-container_stroke-width-' + strokeWidth],\n        ['sb-container_stroke-color-' + strokeColor],\n        {\n          /** Only add state class when its set */\n          'sb-container_state':\n            containerStateProps &&\n            containerStateProps?.containerState !== undefined,\n          ['sb-container_state-' + containerStateProps?.containerState]:\n            containerStateProps &&\n            containerStateProps?.containerState !== undefined,\n\n          /** If padding is not array - just set the class, ie sb-container_padding-loose */\n          ['sb-container_padding-' + padding]: !Array.isArray(padding),\n\n          /** Else go through top-right-bottom-left and set, ie sb-container_padding-top-loose */\n          ['sb-container_padding-top-' + padding[0]]:\n            Array.isArray(padding) && padding.length > 0,\n          ['sb-container_padding-right-' + padding[1]]:\n            Array.isArray(padding) && padding.length > 1,\n          ['sb-container_padding-bottom-' + padding[2]]:\n            Array.isArray(padding) && padding.length > 2,\n          ['sb-container_padding-left-' + padding[3]]:\n            Array.isArray(padding) && padding.length > 3,\n\n          /** If margin is not array - just set the class, ie sb-container_margin-loose */\n          ['sb-container_margin-' + margin]: !Array.isArray(margin),\n\n          /** Else go through top-right-bottom-left and set, ie sb-container_margin-top-loose */\n          ['sb-container_margin-top-' + margin[0]]:\n            Array.isArray(margin) && margin.length > 0,\n          ['sb-container_margin-right-' + margin[1]]:\n            Array.isArray(margin) && margin.length > 1,\n          ['sb-container_margin-bottom-' + margin[2]]:\n            Array.isArray(margin) && margin.length > 2,\n          ['sb-container_margin-left-' + margin[3]]:\n            Array.isArray(margin) && margin.length > 3,\n        },\n        className,\n      ),\n    [\n      strokeWidth,\n      strokeColor,\n      cornerRadius,\n      elevation,\n      fill,\n      className,\n      padding,\n      margin,\n      height,\n      containerStateProps,\n    ],\n  );\n\n  return (\n    <div\n      {...otherProps}\n      className={containerClassNames}\n      ref={containerRef}\n      {...testMetadata}\n    >\n      {containerStateProps?.containerState && (\n        <div>\n          {containerStateProps.message ??\n            defaultMessage[containerStateProps.containerState]}\n          {containerStateProps.containerState === 'loading' && (\n            <Loader size={containerStateProps?.loaderSize || 'large'} />\n          )}\n        </div>\n      )}\n\n      {!containerStateProps?.containerState && children}\n    </div>\n  );\n};\n\nexport default Container;\n","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Container, { ContainerProps } from '../Container';\n\n// Styles\nimport './Panel.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface PanelProps extends ContainerProps {\n  /** Grid area name of Panel */\n  name: string;\n  /** Can choose to only show panel for specific sizes */\n  visibleOn?: {\n    size: 'slim' | 'small' | 'medium' | 'large' | 'wide';\n    direction: 'up' | 'down';\n  };\n  /** Panel can scroll */\n  isScrollable?: boolean;\n  /** Set overflow: hidden */\n  overflow?: 'visible' | 'hidden' | 'scroll' | 'auto';\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Panel: FC<PanelProps> = ({\n  children,\n  className,\n  style,\n  name,\n  visibleOn,\n  testMetadata,\n  isScrollable = true,\n  overflow = 'visible',\n  ...otherProps\n}) => {\n  const nameToken = useMemo((): Record<string, string> => {\n    return {\n      '--sb-panel-layout__panel-name': name,\n    };\n  }, [name]);\n\n  return (\n    <Container\n      className={classNames(\n        'sb-panel',\n        visibleOn &&\n          `sb-panel__visible-on-${visibleOn.size}-${visibleOn.direction}`,\n        {\n          'sb-panel_scrollable': isScrollable,\n          [`sb-panel_${overflow}`]: overflow !== 'visible',\n        },\n        className,\n      )}\n      style={{ ...nameToken, ...style }}\n      {...testMetadata}\n      {...otherProps}\n    >\n      {children}\n    </Container>\n  );\n};\n\nexport default Panel;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/slicedToArray\");","import { ComponentProps, FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './PanelLayout.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface CssGridProps {\n  /** Sets token for grid-template-columns */\n  columns: string[];\n  /** Sets token for grid-template-rows */\n  rows: string[];\n  /** Sets token for grid-template-columns, each array represents a row */\n  areas: string[][];\n}\n\nexport interface PanelLayoutProps extends ComponentProps<'div'> {\n  slim: CssGridProps;\n  small?: CssGridProps;\n  medium?: CssGridProps;\n  large?: CssGridProps;\n  wide?: CssGridProps;\n  className?: string;\n  testMetadata?: TestMetadata;\n}\n\nconst isCssGridEntryDefined = (\n  entry: [string, CssGridProps | undefined],\n): entry is [string, CssGridProps] => {\n  const [, spec] = entry;\n  return spec !== undefined;\n};\n\nconst getTokensFromCssGridProp = (\n  reflowpoint: string,\n  prop: CssGridProps,\n): Record<string, string> => {\n  const areaRows = prop.areas.map((row) => `\"${row.join(' ')}\"`).join('\\n');\n\n  return {\n    [`--sb-panel-layout-${reflowpoint}-areas`]: areaRows,\n    [`--sb-panel-layout-${reflowpoint}-columns`]: prop.columns.join(' '),\n    [`--sb-panel-layout-${reflowpoint}-rows`]: prop.rows.join(' '),\n  };\n};\n\nconst PanelLayout: FC<PanelLayoutProps> = ({\n  children,\n  className,\n  style,\n  slim,\n  small,\n  medium,\n  large,\n  wide,\n  testMetadata,\n}) => {\n  const tokens = useMemo(\n    () =>\n      Object.entries({ slim, small, medium, large, wide })\n        .filter(isCssGridEntryDefined)\n        .reduce<Record<string, string>>(\n          (tokens, [reflowpoint, spec]) => ({\n            ...tokens,\n            ...getTokensFromCssGridProp(reflowpoint, spec),\n          }),\n          {},\n        ),\n    [slim, small, medium, large, wide],\n  );\n\n  return (\n    <div\n      className={classNames('sb-panel-layout', className)}\n      style={{ ...tokens, ...style }}\n      {...testMetadata}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default PanelLayout;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/toConsumableArray\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash\");","import { isArray } from 'lodash';\nimport { ReactElement, ReactNode } from 'react';\nimport { SpacingOptions } from '../types';\nimport {\n  CanvasObject,\n  Layout,\n  LayoutObject,\n  PageSchema,\n  AreaObject,\n} from './types';\n\nexport const isLayout = (layout: Layout): layout is LayoutObject => {\n  return (layout as LayoutObject).type !== undefined;\n};\n\nexport const parsePageSchema = (page: string | PageSchema): PageSchema => {\n  let schema = page;\n  try {\n    schema = typeof page === 'string' ? (JSON.parse(page) as PageSchema) : page;\n  } catch (e) {\n    throw Error('PageGenerator: Unable to load page config');\n  }\n\n  if (schema.canvas && !validateSchema(schema.canvas)) {\n    throw Error(\n      'PageGenerator: Duplicate key used for one or more page areas. Page section naming must be globally unique.',\n    );\n  }\n\n  return schema;\n};\n\nexport const validateSchema = (canvas: CanvasObject): boolean => {\n  const keys = collectKeys(canvas);\n\n  // A set can only contain unique values, so this is a performant way of checking for duplicates\n  return new Set(keys).size === keys.length;\n};\n\nexport const collectKeys = (canvas: CanvasObject): string[] => {\n  const schemaKeys: string[] = [];\n\n  const areas = canvas.areas;\n\n  if (isArray(areas)) {\n    areas.forEach((section: AreaObject) => {\n      if (section.name) {\n        schemaKeys.push(section.name);\n      }\n      if (section.canvas) {\n        schemaKeys.push(...collectKeys(section.canvas));\n      }\n    });\n  }\n  return schemaKeys;\n};\n\nexport const getContainerPadding = (section: AreaObject): SpacingOptions[] => {\n  if (section?.container && section?.container?.padding) {\n    const container = section?.container;\n    if (typeof container.padding === 'string') {\n      return [\n        container.padding,\n        container.padding,\n        container.padding,\n        container.padding,\n      ];\n    } else {\n      const padding = container.padding;\n      return [\n        padding?.top || 'normal',\n        padding?.right || 'loose',\n        padding?.bottom || 'normal',\n        padding?.left || 'loose',\n      ];\n    }\n  } else if (section?.canvas?.template) {\n    return ['none', 'none', 'none', 'none'];\n  }\n\n  return ['normal', 'loose', 'normal', 'loose'];\n};\n\nexport const getChildren = (\n  children: Array<Exclude<ReactNode, boolean | null | undefined>>,\n  name: string,\n): Array<Exclude<ReactNode, boolean | null | undefined>> => {\n  return children.filter(\n    (child: ReactNode) => (child as ReactElement)?.props?.name === name,\n  );\n};\n","import { useContext } from 'react';\n\n// Context\nimport { PageGeneratorContext } from './PageGenerator';\n\n// Components\nimport { Panel } from '../PanelLayout';\nimport Container from '../Container';\n\n// Types\nimport { CanvasObject, AreaObject } from './types';\n\n// utils\nimport { getContainerPadding, isLayout } from './utils';\n\nexport interface CanvasProps {\n  canvas: CanvasObject;\n}\n\n/* Recursively generates canvases from templates or layouts */\nconst Canvas = ({ canvas }: CanvasProps): JSX.Element | null => {\n  const context = useContext(PageGeneratorContext);\n  if (context === undefined) {\n    throw new Error('PageGeneratorContext is not defined');\n  }\n\n  if (!canvas) {\n    return null;\n  }\n\n  const Layout = canvas.layout\n    ? typeof canvas.layout === 'string'\n      ? context.options.layouts[canvas.layout]\n      : context.options.layouts[canvas.layout.type]\n    : context.options.layouts['standard'];\n\n  const Template =\n    canvas.template && context.options.canvases[canvas.template]\n      ? context.options.canvases[canvas.template]\n      : undefined;\n\n  // Group areas by areaMap location\n  const sectionNames = canvas.areas\n    ? canvas.areas.reduce((acc, section) => {\n        return {\n          ...acc,\n          [section.area]: section,\n        };\n      }, {})\n    : {};\n\n  if (Template) {\n    return <Template sectionNames={sectionNames} />;\n  } else if (canvas.layout) {\n    return (\n      <Layout\n        areas={sectionNames}\n        className={\n          (canvas.layout &&\n            isLayout(canvas.layout) &&\n            canvas.layout.className) ||\n          undefined\n        }\n      >\n        {canvas.areas &&\n          canvas.areas.map((section: AreaObject) => {\n            const rendition = section?.rendition?.type || 'basic';\n            const Rendition = context.options.renditions[rendition];\n            return (\n              <Panel\n                key={section.name}\n                name={section.name}\n                overflow={section?.overflow}\n                isScrollable={false}\n              >\n                <Rendition\n                  fullSize={\n                    section?.rendition?.fullSize !== undefined\n                      ? section?.rendition?.fullSize\n                      : true\n                  }\n                  elevated={\n                    section?.rendition?.elevated !== undefined\n                      ? section?.rendition?.elevated\n                      : false\n                  }\n                >\n                  <Container\n                    padding={getContainerPadding(section)}\n                    height=\"full\"\n                    testMetadata={{\n                      'data-testid': `PageGenerator_Section_${section.name}`,\n                    }}\n                  >\n                    {context.utils.renderChildren(section)}\n                  </Container>\n                </Rendition>\n              </Panel>\n            );\n          })}\n      </Layout>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default Canvas;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Container from '../../Container';\n\n// Types\nimport { SpacingOptions, TestMetadata } from 'types';\n\n// Styles\nimport './HeaderSection.scss';\n\nexport interface HeaderSectionProps {\n  /** Controls the padding: none, normal (default), tight, loose*/\n  padding?: SpacingOptions | SpacingOptions[];\n  /** Additional class */\n  className?: string;\n  // Test IDs for HeaderSection\n  testMetadata?: TestMetadata;\n}\n\nconst HeaderSection: React.FC<HeaderSectionProps> = ({\n  padding = ['normal', 'loose', 'normal', 'loose'],\n  children,\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const headerSectionClassNames = useMemo(\n    () => classNames('sb-header-section', className),\n    [className],\n  );\n\n  return (\n    <Container\n      {...otherProps}\n      padding={padding}\n      className={headerSectionClassNames}\n      {...testMetadata}\n    >\n      {children}\n    </Container>\n  );\n};\n\nexport default HeaderSection;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Container from '../../Container';\n\n// Types\nimport { SpacingOptions, TestMetadata } from 'types';\n\n// Styles\nimport './BodySection.scss';\n\nexport interface BodySectionProps {\n  /** Controls the padding: none, normal (default), tight, loose*/\n  padding?: SpacingOptions | SpacingOptions[];\n  /** Additional class */\n  className?: string;\n  // Test IDs for BodySection\n  testMetadata?: TestMetadata;\n}\n\nconst BodySection: React.FC<BodySectionProps> = ({\n  padding = ['normal', 'loose', 'normal', 'loose'],\n  children,\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const bodySectionClassNames = useMemo(\n    () => classNames('sb-body-section', className),\n    [className],\n  );\n\n  return (\n    <Container\n      {...otherProps}\n      padding={padding}\n      className={bodySectionClassNames}\n      {...testMetadata}\n    >\n      {children}\n    </Container>\n  );\n};\n\nexport default BodySection;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Container from '../../Container';\n\n// Types\nimport { SpacingOptions, TestMetadata } from 'types';\n\n// Styles\nimport './FullSection.scss';\n\nexport interface FullSectionProps {\n  /** Controls the padding: none, normal (default), tight, loose*/\n  padding?: SpacingOptions | SpacingOptions[];\n  /** Additional class */\n  className?: string;\n  // Test IDs for FullSection\n  testMetadata?: TestMetadata;\n}\n\nconst FullSection: React.FC<FullSectionProps> = ({\n  padding = 'none',\n  children,\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const fullSectionClassNames = useMemo(\n    () => classNames('sb-full-section', className),\n    [className],\n  );\n\n  return (\n    <Container\n      {...otherProps}\n      padding={padding}\n      className={fullSectionClassNames}\n      {...testMetadata}\n    >\n      {children}\n    </Container>\n  );\n};\n\nexport default FullSection;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\n\n// Types\nimport { RenditionProps } from '../types';\n\n// Styles\nimport './WhiteRendition.scss';\nimport '../Renditions.scss';\n\nconst WhiteRendition: React.FC<RenditionProps> = ({\n  elevated = false,\n  fullSize = false,\n  borders = 'none',\n  roundedBorder = false,\n  children,\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const renditionClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-white-rendition',\n        Array.isArray(borders)\n          ? borders.map((border) => `sb-rendition_border-${border}`)\n          : `sb-rendition_border-${borders}`,\n        {\n          'sb-rendition_border-rounded': roundedBorder,\n          'sb-rendition_elevated': elevated,\n          'sb-rendition_full-size': fullSize,\n        },\n        className,\n      ),\n    [className, elevated, fullSize, roundedBorder, borders],\n  );\n\n  return (\n    <div {...otherProps} className={renditionClassNames} {...testMetadata}>\n      {children}\n    </div>\n  );\n};\n\nexport default WhiteRendition;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Types\nimport { RenditionProps } from '../types';\n\n// Styles\nimport './GrayRendition.scss';\nimport '../Renditions.scss';\n\nconst GrayRendition: React.FC<RenditionProps> = ({\n  elevated = false,\n  fullSize = false,\n  borders = 'none',\n  roundedBorder = false,\n  children,\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const renditionClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-gray-rendition',\n        Array.isArray(borders)\n          ? borders.map((border) => `sb-rendition_border-${border}`)\n          : `sb-rendition_border-${borders}`,\n        {\n          'sb-rendition_border-rounded': roundedBorder,\n          'sb-rendition_elevated': elevated,\n          'sb-rendition_full-size': fullSize,\n        },\n        className,\n      ),\n    [className, elevated, fullSize, borders, roundedBorder],\n  );\n\n  return (\n    <div {...otherProps} className={renditionClassNames} {...testMetadata}>\n      {children}\n    </div>\n  );\n};\n\nexport default GrayRendition;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\n\n// Types\nimport { RenditionProps } from '../types';\n\n// Styles\nimport './PrimaryRendition.scss';\nimport '../Renditions.scss';\n\nconst PrimaryRendition: React.FC<RenditionProps> = ({\n  elevated = false,\n  fullSize = false,\n  borders = 'none',\n  roundedBorder = false,\n  children,\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const renditionClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-primary-rendition',\n        Array.isArray(borders)\n          ? borders.map((border) => `sb-rendition_border-${border}`)\n          : `sb-rendition_border-${borders}`,\n        {\n          'sb-rendition_border-rounded': roundedBorder,\n          'sb-rendition_elevated': elevated,\n          'sb-rendition_full-size': fullSize,\n        },\n        className,\n      ),\n    [className, elevated, fullSize, roundedBorder, borders],\n  );\n\n  return (\n    <div {...otherProps} className={renditionClassNames} {...testMetadata}>\n      {children}\n    </div>\n  );\n};\n\nexport default PrimaryRendition;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\n\n// Types\nimport { RenditionProps } from '../types';\n\n// Styles\nimport './FooterRendition.scss';\nimport '../Renditions.scss';\n\nconst FooterRendition: React.FC<RenditionProps> = ({\n  elevated = false,\n  fullSize = false,\n  borders = 'none',\n  roundedBorder = false,\n  children,\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const renditionClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-footer-rendition',\n        Array.isArray(borders)\n          ? borders.map((border) => `sb-rendition_border-${border}`)\n          : `sb-rendition_border-${borders}`,\n        {\n          'sb-rendition_border-rounded': roundedBorder,\n          'sb-rendition_elevated': elevated,\n          'sb-rendition_full-size': fullSize,\n        },\n        className,\n      ),\n    [className, elevated, fullSize, roundedBorder, borders],\n  );\n\n  return (\n    <div {...otherProps} className={renditionClassNames} {...testMetadata}>\n      {children}\n    </div>\n  );\n};\n\nexport default FooterRendition;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\n\n// Types\nimport { RenditionProps } from '../types';\n\n// Styles\nimport './TransparentRendition.scss';\nimport '../Renditions.scss';\n\nconst TransparentRendition: React.FC<RenditionProps> = ({\n  elevated = false,\n  fullSize = false,\n  borders = 'none',\n  roundedBorder = false,\n  children,\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const renditionClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-transparent-rendition',\n        Array.isArray(borders)\n          ? borders.map((border) => `sb-rendition_border-${border}`)\n          : `sb-rendition_border-${borders}`,\n        {\n          'sb-rendition_border-rounded': roundedBorder,\n          'sb-rendition_elevated': elevated,\n          'sb-rendition_full-size': fullSize,\n        },\n        className,\n      ),\n    [className, elevated, fullSize, roundedBorder, borders],\n  );\n\n  return (\n    <div {...otherProps} className={renditionClassNames} {...testMetadata}>\n      {children}\n    </div>\n  );\n};\n\nexport default TransparentRendition;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\n\n// Types\nimport { RenditionProps } from '../types';\n\n// Styles\nimport './AppHeaderRendition.scss';\nimport '../Renditions.scss';\n\nconst AppHeaderRendition: React.FC<RenditionProps> = ({\n  elevated = false,\n  fullSize = false,\n  borders = 'none',\n  roundedBorder = false,\n  children,\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const renditionClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-app-header-rendition',\n        Array.isArray(borders)\n          ? borders.map((border) => `sb-rendition_border-${border}`)\n          : `sb-rendition_border-${borders}`,\n        {\n          'sb-rendition_border-rounded': roundedBorder,\n          'sb-rendition_elevated': elevated,\n          'sb-rendition_full-size': fullSize,\n        },\n        className,\n      ),\n    [className, elevated, fullSize, roundedBorder, borders],\n  );\n\n  return (\n    <div {...otherProps} className={renditionClassNames} {...testMetadata}>\n      {children}\n    </div>\n  );\n};\n\nexport default AppHeaderRendition;\n","import { FC } from 'react';\n\n// Components\nimport { PanelLayout } from '../PanelLayout';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface StandardLayoutProps {\n  /** Custom class name for layout */\n  className?: string;\n  /** Test data IDs for layout */\n  testMetadata?: TestMetadata;\n  /** Areas */\n  areaMap?: {\n    header: string;\n    body: string;\n    footer: string;\n  };\n}\n\nconst StandardLayout: FC<StandardLayoutProps> = ({\n  children,\n  areaMap = {\n    header: 'header',\n    body: 'body',\n    footer: 'footer',\n  },\n  ...otherProps\n}) => {\n  return (\n    <PanelLayout\n      slim={{\n        columns: ['1fr'],\n        rows: ['auto', '1fr', 'auto'],\n        areas: [[areaMap.header], [areaMap.body], [areaMap.footer]],\n      }}\n      {...otherProps}\n    >\n      {children}\n    </PanelLayout>\n  );\n};\n\nexport default StandardLayout;\n","import { FC } from 'react';\n\n// Components\nimport { Panel } from '../PanelLayout';\n\n// Types\nimport { PanelTemplateProps } from 'types';\n\nconst BodyPanel: FC<PanelTemplateProps> = ({\n  children,\n  name,\n  ...otherProps\n}) => {\n  return (\n    <Panel name={name || 'body'} {...otherProps}>\n      {children}\n    </Panel>\n  );\n};\n\nexport default BodyPanel;\n","import { FC } from 'react';\n\n// Components\nimport { Panel } from '../PanelLayout';\n\n// Types\nimport { PanelTemplateProps } from 'types';\n\nconst HeaderPanel: FC<PanelTemplateProps> = ({\n  children,\n  name,\n  ...otherProps\n}) => {\n  return (\n    <Panel name={name || 'header'} {...otherProps}>\n      {children}\n    </Panel>\n  );\n};\n\nexport default HeaderPanel;\n","import { FC } from 'react';\n\n// Components\nimport { Panel } from '../PanelLayout';\n\n// Types\nimport { PanelTemplateProps } from 'types';\n\nconst FooterPanel: FC<PanelTemplateProps> = ({ children, ...otherProps }) => {\n  return (\n    <Panel name=\"footer\" {...otherProps}>\n      {children}\n    </Panel>\n  );\n};\n\nexport default FooterPanel;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport { BodySection, HeaderSection } from '../../Sections';\nimport { WhiteRendition, GrayRendition } from '../../Renditions';\nimport { BodyPanel, HeaderPanel, StandardLayout } from '../../StandardLayout';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Styles\nimport './BasicCanvas.scss';\n\nexport interface BasicCanvasProps {\n  /** header components */\n  header?: React.ReactNode;\n  /** Additional class */\n  className?: string;\n  // Test IDs for BasicCanvas\n  testMetadata?: {\n    standardSection?: TestMetadata;\n    headerRendition?: TestMetadata;\n    headerSection?: TestMetadata;\n    bodyRendition?: TestMetadata;\n    bodySection?: TestMetadata;\n  };\n}\n\nconst BasicCanvas: React.FC<BasicCanvasProps> = ({\n  header,\n  children,\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const baseClassNames = useMemo(\n    () => classNames('sb-cp-basic-canvas', className),\n    [className],\n  );\n\n  return (\n    <StandardLayout\n      {...otherProps}\n      className={baseClassNames}\n      {...testMetadata?.standardSection}\n    >\n      {header && (\n        <HeaderPanel isScrollable={false}>\n          <WhiteRendition {...testMetadata?.headerRendition} elevated>\n            <HeaderSection {...testMetadata?.headerSection}>\n              {header}\n            </HeaderSection>\n          </WhiteRendition>\n        </HeaderPanel>\n      )}\n      <BodyPanel>\n        <GrayRendition {...testMetadata?.bodyRendition} fullSize>\n          <BodySection {...testMetadata?.bodySection}>{children}</BodySection>\n        </GrayRendition>\n      </BodyPanel>\n    </StandardLayout>\n  );\n};\n\nexport default BasicCanvas;\n","import { useContext } from 'react';\n\n// Components\nimport SpellbookBasicCanvas from '../../../Canvases/BasicCanvas';\n\n// Context\nimport { PageGeneratorContext } from '../../../PageGenerator';\n\n// Types\nimport { CanvasTemplateProps } from '../../../PageGenerator/types';\n\n// Styles\nimport './BasicCanvas.scss';\n\nconst BasicCanvas: React.FC<CanvasTemplateProps> = ({ sectionNames }) => {\n  const context = useContext(PageGeneratorContext);\n  if (context === undefined) {\n    throw new Error('PageGeneratorContext is not defined');\n  }\n\n  return (\n    <SpellbookBasicCanvas\n      header={<>{context.utils.renderChildren(sectionNames?.['header'])}</>}\n      testMetadata={{\n        standardSection: {\n          'data-testid': 'PageGenerator_BasicCanvas',\n        },\n      }}\n    >\n      <>{context.utils.renderChildren(sectionNames?.['body'])}</>\n    </SpellbookBasicCanvas>\n  );\n};\n\nexport default BasicCanvas;\n","import { FC, useMemo } from 'react';\n\n// Components\nimport { PanelLayout } from '../PanelLayout';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface DualPanelLayoutProps {\n  /** Primary is set to have auto width by default */\n  inverse?: boolean;\n  /** Custom class name for layout */\n  className?: string;\n  /** Test data IDs for layout */\n  testMetadata?: TestMetadata;\n  /** AreaMap */\n  areaMap?: {\n    primary: string;\n    secondary: string;\n  };\n}\n\nconst DualPanelLayout: FC<DualPanelLayoutProps> = ({\n  inverse = false,\n  children,\n  areaMap = {\n    primary: 'primary',\n    secondary: 'secondary',\n  },\n  ...otherProps\n}) => {\n  const layout = useMemo(\n    () => ({\n      slim: {\n        columns: ['1fr'],\n        rows: ['1fr', 'auto'],\n        areas: [[areaMap.primary], [areaMap.secondary]],\n      },\n      small: {\n        columns: inverse ? ['1fr', 'auto'] : ['auto', '1fr'],\n        rows: ['1fr'],\n        areas: inverse\n          ? [[areaMap.primary, areaMap.secondary]]\n          : [[areaMap.secondary, areaMap.primary]],\n      },\n    }),\n    [inverse, areaMap],\n  );\n\n  return (\n    <PanelLayout {...layout} {...otherProps}>\n      {children}\n    </PanelLayout>\n  );\n};\n\nexport default DualPanelLayout;\n","import { FC } from 'react';\n\n// Components\nimport { Panel } from '../PanelLayout';\n\n// Types\nimport { PanelTemplateProps } from 'types';\n\nconst PrimaryPanel: FC<PanelTemplateProps> = ({\n  children,\n  testMetadata,\n  ...otherProps\n}) => {\n  return (\n    <Panel name=\"primary\" {...otherProps} {...testMetadata}>\n      {children}\n    </Panel>\n  );\n};\n\nexport default PrimaryPanel;\n","import { FC } from 'react';\n\n// Components\nimport { Panel } from '../PanelLayout';\n\n// Types\nimport { PanelTemplateProps } from 'types';\n\nconst SecondaryPanel: FC<PanelTemplateProps> = ({\n  children,\n  testMetadata,\n  ...otherProps\n}) => {\n  return (\n    <Panel name=\"secondary\" {...otherProps} {...testMetadata}>\n      {children}\n    </Panel>\n  );\n};\n\nexport default SecondaryPanel;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport { BodySection, FullSection, HeaderSection } from '../../Sections';\nimport { WhiteRendition, GrayRendition } from '../../Renditions';\nimport {\n  DualPanelLayout,\n  PrimaryPanel,\n  SecondaryPanel,\n} from '../../DualPanelLayout';\nimport { BodyPanel, HeaderPanel, StandardLayout } from '../../StandardLayout';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Styles\nimport './DualPanelCanvas.scss';\n\nexport interface DualPanelCanvasProps {\n  /** header components */\n  header?: React.ReactNode;\n  /** left-hand components */\n  secondaryPanel?: React.ReactNode;\n  /** Additional class */\n  className?: string;\n  // Test IDs for System\n  testMetadata?: {\n    standardSection?: TestMetadata;\n    headerRendition?: TestMetadata;\n    headerSection?: TestMetadata;\n    dualPanel?: TestMetadata;\n    rendition?: TestMetadata;\n    Section?: TestMetadata;\n  };\n}\n\nconst DualPanelCanvas: React.FC<DualPanelCanvasProps> = ({\n  header,\n  secondaryPanel,\n  children,\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const dualPanelClassNames = useMemo(\n    () => classNames('sb-cp-dual-panel-canvas', className),\n    [className],\n  );\n\n  return (\n    <StandardLayout {...testMetadata?.standardSection}>\n      {header && (\n        <HeaderPanel isScrollable={false}>\n          <WhiteRendition {...testMetadata?.headerRendition} elevated>\n            <HeaderSection {...testMetadata?.headerSection}>\n              {header}\n            </HeaderSection>\n          </WhiteRendition>\n        </HeaderPanel>\n      )}\n      <BodyPanel>\n        <DualPanelLayout\n          {...otherProps}\n          className={dualPanelClassNames}\n          {...testMetadata?.dualPanel}\n        >\n          <SecondaryPanel className=\"sb-cp-dual-panel-canvas_secondary\">\n            <GrayRendition\n              {...testMetadata?.rendition}\n              borders=\"right\"\n              fullSize\n            >\n              <BodySection\n                padding={['normal', 'loose', 'normal', 'loose']}\n                {...testMetadata?.Section}\n              >\n                {secondaryPanel}\n              </BodySection>\n            </GrayRendition>\n          </SecondaryPanel>\n          <PrimaryPanel className=\"sb-cp-dual-panel-canvas_primary\">\n            <WhiteRendition fullSize {...testMetadata?.rendition}>\n              <FullSection {...testMetadata?.Section}>{children}</FullSection>\n            </WhiteRendition>\n          </PrimaryPanel>\n        </DualPanelLayout>\n      </BodyPanel>\n    </StandardLayout>\n  );\n};\n\nexport default DualPanelCanvas;\n","import { useContext } from 'react';\n\n// Components\nimport SpellbookDualPanelCanvas from '../../../Canvases/DualPanelCanvas';\n\n// Context\nimport { PageGeneratorContext } from '../../../PageGenerator';\n\n// Types\nimport { CanvasTemplateProps } from '../../../PageGenerator/types';\n\n// Styles\nimport './DualPanelCanvas.scss';\n\nconst DualPanelCanvas: React.FC<CanvasTemplateProps> = ({ sectionNames }) => {\n  const context = useContext(PageGeneratorContext);\n  if (context === undefined) {\n    throw new Error('PageGeneratorContext is not defined');\n  }\n\n  const header = context.utils.renderChildren(sectionNames?.['header']);\n\n  return (\n    <SpellbookDualPanelCanvas\n      header={header.props?.children?.length ? <>{header}</> : null}\n      secondaryPanel={\n        <>{context.utils.renderChildren(sectionNames?.['secondary'])}</>\n      }\n      testMetadata={{\n        standardSection: {\n          'data-testid': 'PageGenerator_DualPanelCanvas',\n        },\n      }}\n    >\n      <>{context.utils.renderChildren(sectionNames?.['body'])}</>\n    </SpellbookDualPanelCanvas>\n  );\n};\n\nexport default DualPanelCanvas;\n","import { useContext } from 'react';\n\n// Components\nimport SpellbookBasicCanvas from '../../../Canvases/BasicCanvas';\n\n// Context\nimport { PageGeneratorContext } from '../..';\n\n// Types\nimport { CanvasTemplateProps } from '../../types';\n\n// Styles\nimport './BodyCanvas.scss';\n\nconst BodyCanvas: React.FC<CanvasTemplateProps> = ({ sectionNames }) => {\n  const context = useContext(PageGeneratorContext);\n  if (context === undefined) {\n    throw new Error('PageGeneratorContext is not defined');\n  }\n\n  return (\n    <SpellbookBasicCanvas\n      testMetadata={{\n        standardSection: {\n          'data-testid': 'PageGenerator_FormCanvas',\n        },\n      }}\n    >\n      <>{context.utils.renderChildren(sectionNames?.['body'])}</>\n    </SpellbookBasicCanvas>\n  );\n};\n\nexport default BodyCanvas;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport { BodySection, HeaderSection } from '../../Sections';\nimport { WhiteRendition } from '../../Renditions';\nimport { BodyPanel, HeaderPanel, StandardLayout } from '../../StandardLayout';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Styles\nimport './BasicFormCanvas.scss';\n\nexport interface BasicFormCanvasProps {\n  /** header components */\n  header?: React.ReactNode;\n  /** Additional class */\n  className?: string;\n  // Test IDs for BasicFormCanvas\n  testMetadata?: {\n    standardSection?: TestMetadata;\n    headerRendition?: TestMetadata;\n    headerSection?: TestMetadata;\n    bodyRendition?: TestMetadata;\n    bodySection?: TestMetadata;\n  };\n}\n\nconst BasicFormCanvas: React.FC<BasicFormCanvasProps> = ({\n  header,\n  children,\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const baseClassNames = useMemo(\n    () => classNames('sb-cp-basic-form-canvas', className),\n    [className],\n  );\n\n  return (\n    <StandardLayout\n      {...otherProps}\n      className={baseClassNames}\n      {...testMetadata?.standardSection}\n    >\n      {header && (\n        <HeaderPanel isScrollable={false}>\n          <WhiteRendition {...testMetadata?.headerRendition} elevated>\n            <HeaderSection {...testMetadata?.headerSection}>\n              {header}\n            </HeaderSection>\n          </WhiteRendition>\n        </HeaderPanel>\n      )}\n      <BodyPanel>\n        <WhiteRendition {...testMetadata?.bodyRendition} fullSize>\n          <BodySection {...testMetadata?.bodySection}>{children}</BodySection>\n        </WhiteRendition>\n      </BodyPanel>\n    </StandardLayout>\n  );\n};\n\nexport default BasicFormCanvas;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport { FullSection, HeaderSection } from '../../Sections';\nimport { WhiteRendition, TransparentRendition } from '../../Renditions';\nimport { BodyPanel, HeaderPanel, StandardLayout } from '../../StandardLayout';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Styles\nimport './BasicFullBodyCanvas.scss';\n\nexport interface BasicFullBodyCanvasProps {\n  /** header components */\n  header?: React.ReactNode;\n  /** Additional class */\n  className?: string;\n  // Test IDs for BasicFullBodyCanvas\n  testMetadata?: {\n    standardSection?: TestMetadata;\n    headerRendition?: TestMetadata;\n    headerSection?: TestMetadata;\n    bodyRendition?: TestMetadata;\n    bodySection?: TestMetadata;\n  };\n}\n\nconst BasicFullBodyCanvas: React.FC<BasicFullBodyCanvasProps> = ({\n  header,\n  children,\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const baseClassNames = useMemo(\n    () => classNames('sb-cp-basic-full-body-canvas', className),\n    [className],\n  );\n\n  return (\n    <StandardLayout\n      {...otherProps}\n      className={baseClassNames}\n      {...testMetadata?.standardSection}\n    >\n      {header && (\n        <HeaderPanel isScrollable={false}>\n          <WhiteRendition {...testMetadata?.headerRendition} elevated>\n            <HeaderSection {...testMetadata?.headerSection}>\n              {header}\n            </HeaderSection>\n          </WhiteRendition>\n        </HeaderPanel>\n      )}\n      <BodyPanel>\n        <TransparentRendition {...testMetadata?.bodyRendition} fullSize>\n          <FullSection {...testMetadata?.bodySection}>{children}</FullSection>\n        </TransparentRendition>\n      </BodyPanel>\n    </StandardLayout>\n  );\n};\n\nexport default BasicFullBodyCanvas;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport { BodySection, HeaderSection } from '../../Sections';\nimport { WhiteRendition } from '../../Renditions';\nimport { BodyPanel, HeaderPanel, StandardLayout } from '../../StandardLayout';\n\n// Types\nimport { BorderOptions, TestMetadata } from 'types';\n\n// Styles\nimport './ComponentCanvas.scss';\n\nexport interface ComponentCanvasProps {\n  /** header components */\n  header?: React.ReactNode;\n  /** header border - bottom or none */\n  headerBorder?: BorderOptions;\n  /** use full height */\n  fullSize?: boolean;\n  /** Additional class */\n  className?: string;\n  /** flush */\n  flush?: boolean;\n  // Test IDs for ComponentCanvas\n  testMetadata?: {\n    standardSection?: TestMetadata;\n    rendition?: TestMetadata;\n    headerSection?: TestMetadata;\n    bodySection?: TestMetadata;\n  };\n}\n\nconst ComponentCanvas: React.FC<ComponentCanvasProps> = ({\n  header,\n  headerBorder = 'bottom',\n  fullSize,\n  children,\n  className,\n  testMetadata,\n  flush = false,\n  ...otherProps\n}) => {\n  const baseClassNames = useMemo(\n    () => classNames('sb-cp-component-canvas', className),\n    [className],\n  );\n\n  return (\n    <WhiteRendition\n      roundedBorder\n      borders={['top', 'left', 'bottom', 'right']}\n      fullSize={fullSize}\n      {...testMetadata?.rendition}\n    >\n      <StandardLayout\n        {...otherProps}\n        className={baseClassNames}\n        {...testMetadata?.standardSection}\n      >\n        {header && (\n          <HeaderPanel isScrollable={false}>\n            <WhiteRendition borders={headerBorder}>\n              <HeaderSection\n                {...testMetadata?.headerSection}\n                padding={flush ? 'none' : 'normal'}\n              >\n                {header}\n              </HeaderSection>\n            </WhiteRendition>\n          </HeaderPanel>\n        )}\n        <BodyPanel>\n          <BodySection\n            {...testMetadata?.bodySection}\n            padding={flush ? 'none' : 'normal'}\n          >\n            {children}\n          </BodySection>\n        </BodyPanel>\n      </StandardLayout>\n    </WhiteRendition>\n  );\n};\n\nexport default ComponentCanvas;\n","import { useContext } from 'react';\n\n// Components\nimport { BasicFullBodyCanvas } from '../../../Canvases';\n\n// Context\nimport { PageGeneratorContext } from '../..';\n\n// Types\nimport { CanvasTemplateProps } from '../../types';\n\n// Styles\nimport './FormCanvas.scss';\n\nconst FormCanvas: React.FC<CanvasTemplateProps> = ({ sectionNames }) => {\n  const context = useContext(PageGeneratorContext);\n  if (context === undefined) {\n    throw new Error('PageGeneratorContext is not defined');\n  }\n\n  return (\n    <BasicFullBodyCanvas\n      testMetadata={{\n        standardSection: {\n          'data-testid': 'PageGenerator_FormCanvas',\n        },\n      }}\n    >\n      <>{context.utils.renderChildren(sectionNames?.['full'])}</>\n    </BasicFullBodyCanvas>\n  );\n};\n\nexport default FormCanvas;\n","import { LayoutProps } from '../types';\nimport { StandardLayout as SpellbookLayout } from '../../StandardLayout';\n\nconst StandardLayout: React.FC = ({\n  areas,\n  className,\n  children,\n}: LayoutProps) => {\n  return (\n    <SpellbookLayout\n      className={className}\n      areaMap={{\n        header: areas?.['header']?.name || 'header',\n        body: areas?.['body']?.name || 'body',\n        footer: areas?.['footer']?.name || 'footer',\n      }}\n      testMetadata={{\n        'data-testid': 'PageGenerator_StandardLayout',\n      }}\n    >\n      {children}\n    </SpellbookLayout>\n  );\n};\n\nexport default StandardLayout;\n","import { LayoutProps } from '../types';\nimport { DualPanelLayout as SpellbookDualLayout } from '../../DualPanelLayout';\n\nconst DualPanelLayout: React.FC = ({\n  areas,\n  className,\n  children,\n}: LayoutProps) => {\n  return (\n    <SpellbookDualLayout\n      className={className}\n      areaMap={{\n        secondary: areas?.['secondary']?.name || 'secondary',\n        primary: areas?.['primary']?.name || 'primary',\n      }}\n      testMetadata={{\n        'data-testid': 'PageGenerator_DualLayout',\n      }}\n    >\n      {children}\n    </SpellbookDualLayout>\n  );\n};\n\nexport default DualPanelLayout;\n","import { FC, useMemo } from 'react';\n\n// Components\nimport { PanelLayout } from '../PanelLayout';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface SidebarLayoutProps {\n  /** Primary is set to have auto width by default */\n  inverse?: boolean;\n  /** Custom class name for layout */\n  className?: string;\n  /** Test data IDs for layout */\n  testMetadata?: TestMetadata;\n  /** AreaMap */\n  areaMap?: {\n    primary: string;\n    secondary: string;\n  };\n}\n\nconst DualPanelLayout: FC<SidebarLayoutProps> = ({\n  inverse = false,\n  children,\n  areaMap = {\n    primary: 'primary',\n    secondary: 'secondary',\n  },\n  ...otherProps\n}) => {\n  const layout = useMemo(\n    () => ({\n      slim: {\n        columns: ['1fr'],\n        rows: ['1fr', 'auto'],\n        areas: [[areaMap.primary], [areaMap.secondary]],\n      },\n      small: {\n        columns: inverse ? ['auto', '33%'] : ['33%', 'auto'],\n        rows: ['1fr'],\n        areas: inverse\n          ? [[areaMap.primary, areaMap.secondary]]\n          : [[areaMap.secondary, areaMap.primary]],\n      },\n    }),\n    [inverse, areaMap],\n  );\n\n  return (\n    <PanelLayout {...layout} {...otherProps}>\n      {children}\n    </PanelLayout>\n  );\n};\n\nexport default DualPanelLayout;\n","import { LayoutProps } from '../types';\nimport { SidebarLayout as SpellbookSidebarLayout } from '../../SidebarLayout';\n\nconst SidebarLayout: React.FC = ({\n  areas,\n  className,\n  children,\n}: LayoutProps) => {\n  return (\n    <SpellbookSidebarLayout\n      className={className}\n      areaMap={{\n        secondary: areas?.['secondary']?.name || 'secondary',\n        primary: areas?.['primary']?.name || 'primary',\n      }}\n      testMetadata={{\n        'data-testid': 'PageGenerator_SidebarLayout',\n      }}\n    >\n      {children}\n    </SpellbookSidebarLayout>\n  );\n};\n\nexport default SidebarLayout;\n","import { Children, createContext, useMemo, useCallback } from 'react';\nimport Helmet from 'react-helmet';\n\n// Components\nimport Canvas from './Canvas';\n\n// Canvases\nimport BasicCanvas from './Canvases/BasicCanvas';\nimport DualPanelCanvas from './Canvases/DualPanelCanvas';\nimport BodyCanvas from './Canvases/BodyCanvas';\nimport FormCanvas from './Canvases/FormCanvas';\n\n// Layouts\nimport StandardLayout from './Layouts/StandardLayout';\nimport DualPanelLayout from './Layouts/DualLayout';\nimport SidebarLayout from './Layouts/SidebarLayout';\n\n// Renditions\nimport {\n  GrayRendition,\n  WhiteRendition,\n  PrimaryRendition,\n  TransparentRendition,\n  FooterRendition,\n  AppHeaderRendition,\n} from '../Renditions';\n\n// Utils\nimport { getChildren, parsePageSchema } from './utils';\n\n// Types\nimport {\n  CustomCanvasType,\n  CustomLayoutType,\n  CustomRenditionType,\n  PageChildren,\n  PageOptions,\n  PageSchema,\n  AreaObject,\n} from './types';\n\nexport const PageGeneratorContext = createContext<\n  | {\n      hash: string;\n      page: PageSchema;\n      options: PageOptions;\n      children: (React.ReactChild | React.ReactFragment | React.ReactPortal)[];\n      utils: {\n        renderChildren: (section: AreaObject) => JSX.Element;\n      };\n    }\n  | undefined\n>(undefined);\n\nconst parseOptions = (\n  page: PageSchema,\n  customRenditions?: CustomRenditionType,\n  customLayouts?: CustomLayoutType,\n  customCanvases?: CustomCanvasType,\n): PageOptions => {\n  return {\n    pageName: page.pageName || '',\n    layouts: {\n      standard: StandardLayout,\n      dual: DualPanelLayout,\n      sidebar: SidebarLayout,\n      ...customLayouts,\n    },\n    renditions: {\n      basic: TransparentRendition,\n      foreground: WhiteRendition,\n      background: GrayRendition,\n      primary: PrimaryRendition,\n      footer: FooterRendition,\n      header: AppHeaderRendition,\n      ...customRenditions,\n    },\n    canvases: {\n      basic: BasicCanvas,\n      dual: DualPanelCanvas,\n      body: BodyCanvas,\n      form: FormCanvas,\n      ...customCanvases,\n    },\n  };\n};\n\nexport interface PageGeneratorProps {\n  /* Page Schema */\n  page: string | PageSchema;\n  /* Custom Renditions */\n  customRenditions?: CustomRenditionType;\n  /* Custom Layouts */\n  customLayouts?: CustomLayoutType;\n  /* Custom Canvases */\n  customCanvases?: CustomCanvasType;\n  /* Panels to inject into content areas: Must include the \"name\" attribute as a prop */\n  children?: PageChildren;\n}\n\nconst PageGenerator = ({\n  page,\n  customRenditions,\n  customLayouts,\n  customCanvases,\n  children,\n}: PageGeneratorProps): JSX.Element => {\n  const schema = parsePageSchema(page);\n  const schemaHash = JSON.stringify(schema);\n  const options = useMemo(\n    () => parseOptions(schema, customRenditions, customLayouts, customCanvases),\n    // We want to use the string version of form for more accurate nested dependency checks\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [schemaHash, customRenditions, customLayouts, customCanvases],\n  );\n\n  const childrenArray = Children.toArray(children);\n\n  const renderChildren = useCallback(\n    (section: AreaObject) => {\n      if (section?.canvas) {\n        return <Canvas canvas={section?.canvas} />;\n      } else {\n        return <>{getChildren(childrenArray, section?.name)}</>;\n      }\n    },\n    [childrenArray],\n  );\n\n  return (\n    <PageGeneratorContext.Provider\n      value={{\n        hash: schemaHash,\n        page: schema,\n        options: options,\n        children: childrenArray,\n        utils: {\n          renderChildren: renderChildren,\n        },\n      }}\n    >\n      {options.pageName && (\n        <Helmet>\n          <title>{options.pageName}</title>\n        </Helmet>\n      )}\n      {schema.canvas && <Canvas canvas={schema.canvas} />}\n    </PageGeneratorContext.Provider>\n  );\n};\n\nexport default PageGenerator;\n","import { ReactChild } from 'react';\n\n/* This component is used to mark the top level children component with the \"name\" prop for use in page generator. \nAlthough you could use any element (say a div), typescript will complain if the element doesn't have that attribute to set. */\nconst ContentArea = ({\n  children,\n}: {\n  name: string;\n  children: ReactChild | ReactChild[];\n}): JSX.Element => {\n  return <>{children}</>;\n};\n\nexport default ContentArea;\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","className","size","testMetadata","variant","max","showLabel","otherProps","currentValue","useMemo","Math","round","classNames","role","undefined","loadText","imageUrl","animation","location","spinnerClassnames","styles","maskImage","WebkitMaskImage","backgroundImage","style","loader","type","text","defaultMessage","loading","error","empty","children","padding","margin","strokeWidth","strokeColor","cornerRadius","elevation","fill","height","containerRef","containerStateProps","containerClassNames","containerState","Array","isArray","length","ref","message","loaderSize","name","visibleOn","isScrollable","overflow","nameToken","direction","isCssGridEntryDefined","entry","slim","small","medium","large","wide","tokens","entries","filter","reduce","reflowpoint","spec","areaRows","areas","map","row","join","columns","rows","getTokensFromCssGridProp","validateSchema","canvas","keys","collectKeys","Set","schemaKeys","forEach","section","push","getContainerPadding","container","top","right","bottom","left","template","getChildren","child","props","context","useContext","PageGeneratorContext","Error","layout","Layout","options","layouts","Template","canvases","sectionNames","acc","area","rendition","Rendition","renditions","fullSize","elevated","utils","renderChildren","headerSectionClassNames","bodySectionClassNames","fullSectionClassNames","borders","roundedBorder","renditionClassNames","border","areaMap","header","body","footer","baseClassNames","standardSection","headerRendition","headerSection","bodyRendition","bodySection","inverse","primary","secondary","secondaryPanel","dualPanelClassNames","dualPanel","Section","createContext","page","customRenditions","customLayouts","customCanvases","schema","JSON","parse","e","parsePageSchema","schemaHash","stringify","pageName","standard","StandardLayout","dual","DualPanelLayout","sidebar","SidebarLayout","basic","TransparentRendition","foreground","WhiteRendition","background","GrayRendition","PrimaryRendition","FooterRendition","AppHeaderRendition","BasicCanvas","DualPanelCanvas","BodyCanvas","form","FormCanvas","parseOptions","childrenArray","Children","useCallback","Provider","hash"],"sourceRoot":""}