import { ElementType, ReactChild, ReactNode } from 'react';
import { SpacingOptions } from '../types';
export interface PageSchema {
    pageName?: string;
    canvas?: CanvasObject;
}
export interface CanvasObject {
    layout?: Layout;
    template?: string;
    areas: AreaObject[];
}
export interface LayoutObject {
    type: string;
    className?: string;
}
export interface AreaObject {
    name: string;
    area: string;
    canvas?: CanvasObject;
    rendition?: RenditionObject;
    container?: ContainerObject;
    overflow?: 'visible' | 'hidden' | 'scroll' | 'auto';
}
export interface ContainerObject {
    padding: SpacingOptions | ContainerPadding;
}
export interface ContainerPadding {
    top?: SpacingOptions;
    right?: SpacingOptions;
    bottom?: SpacingOptions;
    left?: SpacingOptions;
}
export interface RenditionObject {
    type: string;
    elevated?: boolean;
    fullSize?: boolean;
    className?: string;
}
export type Layout = string | LayoutObject;
export interface CustomRenditionType {
    [key: string]: ElementType;
}
export interface CustomLayoutType {
    [key: string]: ElementType;
}
export interface CustomCanvasType {
    [key: string]: ElementType;
}
export interface PageOptions {
    pageName: string;
    layouts: CustomLayoutType;
    renditions: CustomRenditionType;
    canvases: CustomCanvasType;
}
export type PageChildren = ReactNode | ReactNode[];
export interface LayoutProps {
    areas?: Record<string, AreaObject>;
    className?: string;
    children?: PageChildren;
}
export interface CanvasTemplateProps {
    sectionNames: {
        [x: string]: AreaObject;
    };
}
export interface PageComponentProps {
    name: string;
    children: ReactChild | ReactChild[];
}
