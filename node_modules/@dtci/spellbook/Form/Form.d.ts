import { ComponentProps, ReactNode } from 'react';
import { Mode } from 'react-hook-form';
import { AnyObjectSchema } from 'yup';
import { DeepPartial, SubmitHandler } from 'react-hook-form';
import { ContainerProps } from '../Container';
import { TestMetadata } from 'types';
import { TAnalyticsEventData } from '@dtci/dash/analytics';
export interface FormProps<I extends Record<string, unknown>> {
    /** Yup validation method for validation resolver */
    validationSchema?: AnyObjectSchema;
    /** This function will receive the form data if form validation is successful */
    onSubmit: SubmitHandler<I>;
    /** Default vaules for the compoents */
    defaultValues?: DeepPartial<I>;
    /** Component to register */
    children?: ReactNode;
    /** Container props - no children */
    containerProps?: Omit<ContainerProps, 'children'>;
    /** Props spread to form including test ids */
    formProps?: ComponentProps<'form'> & TestMetadata;
    /** Additional event information to pass to analytics tracking */
    analyticsEventData?: TAnalyticsEventData;
    /** Additional Add to change mode for validation */
    validationMode?: Exclude<Mode, 'onTouched' | 'all'>;
    /** Additional Add to check when revalidation occurs */
    reValidationMode?: Exclude<Mode, 'onTouched' | 'all'>;
}
declare const Form: <I extends Record<string, unknown>>({ validationSchema, defaultValues, validationMode, reValidationMode, onSubmit, children, containerProps, formProps, analyticsEventData, }: FormProps<I>) => JSX.Element;
export default Form;
