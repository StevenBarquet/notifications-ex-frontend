{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"react-select\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/external commonjs \"react-select/async\"","webpack://@dtci/spellbook/external commonjs \"react-select/creatable\"","webpack://@dtci/spellbook/external commonjs \"react-select/async-creatable\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/Spinner/Spinner.tsx","webpack://@dtci/spellbook/external commonjs \"@dtci/dash/analytics\"","webpack://@dtci/spellbook/./src/Select/Select.tsx","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/slicedToArray\"","webpack://@dtci/spellbook/./src/Button/Button.tsx","webpack://@dtci/spellbook/external commonjs \"@dtci/triton/hooks\"","webpack://@dtci/spellbook/./src/Select/SelectButton.tsx","webpack://@dtci/spellbook/./src/Image/Image.tsx","webpack://@dtci/spellbook/./src/_utils/config.ts","webpack://@dtci/spellbook/./src/Icon/Icon.tsx","webpack://@dtci/spellbook/external commonjs \"@tippyjs/react\"","webpack://@dtci/spellbook/./src/Popover/Popover.tsx","webpack://@dtci/spellbook/./src/Tooltip/Tooltip.tsx","webpack://@dtci/spellbook/external commonjs \"tippy.js\"","webpack://@dtci/spellbook/./src/Typography/Typography.tsx","webpack://@dtci/spellbook/external commonjs \"lodash/isEqual\"","webpack://@dtci/spellbook/./src/MenuList/MenuList.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react-select\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react-select/async\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react-select/creatable\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react-select/async-creatable\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Spinner.scss';\n\n// Types\nimport {\n  AnimationOptions,\n  LocationOptions,\n  SizeOptions,\n  TestMetadata,\n} from '../types';\n\nexport interface SpinnerProps {\n  /** Add a class to the spinner */\n  className?: string;\n  /** Loading text for screen readers */\n  loadText?: string;\n  /** Size: smaller, small, medium (default), large */\n  size?: SizeOptions;\n  /** Full URL to a custom image you would like to use */\n  imageUrl?: string;\n  /** Animation: spin (default), bounce, rock, wobble */\n  animation?: AnimationOptions;\n  /** Location: mask, background */\n  /** Mask can break some animations but allows you to change the color of the icon. Use background if Mask is causing problems. */\n  location?: LocationOptions;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Spinner: FC<SpinnerProps> = ({\n  className,\n  loadText = 'Loading...',\n  size = 'medium',\n  imageUrl,\n  animation = 'spin',\n  location = 'mask',\n  testMetadata,\n  ...otherProps\n}) => {\n  const spinnerClassnames = useMemo(\n    () =>\n      classNames(\n        `sb-spinner_${location}`,\n        `sb-spinner_animate_${animation}`,\n        `sb-spinner_${size}`,\n      ),\n    [size, animation, location],\n  );\n\n  let styles = {};\n  if (imageUrl) {\n    if (location === 'mask') {\n      styles = {\n        maskImage: `url(${imageUrl})`,\n        WebkitMaskImage: `url(${imageUrl})`,\n      };\n    } else {\n      styles = {\n        backgroundImage: `url(${imageUrl})`,\n      };\n    }\n  }\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames('sb-spinner', className)}\n      role=\"alert\"\n      aria-live=\"assertive\"\n      {...testMetadata}\n    >\n      <p className=\"sb-spinner-load-text\">{loadText}</p>\n      <div\n        className={spinnerClassnames}\n        style={styles}\n        data-testid=\"spinner-mask\"\n      />\n    </div>\n  );\n};\n\nexport default Spinner;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@dtci/dash/analytics\");","import {\n  ComponentType,\n  CSSProperties,\n  ReactNode,\n  useMemo,\n  useCallback,\n  useContext,\n} from 'react';\nimport classNames from 'classnames';\nimport ReactSelect, {\n  Props as ReactSelectProps,\n  OptionTypeBase,\n  MenuProps,\n  components as defaultComponents,\n  ValueContainerProps,\n  OptionsType,\n} from 'react-select';\nimport Async from 'react-select/async';\nimport CreatableSelect from 'react-select/creatable';\nimport AsyncCreatableSelect from 'react-select/async-creatable';\n\n// Components\nimport Spinner from '../Spinner';\n\n// Styles\nimport './Select.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Analytics\nimport { AnalyticsContext, handleAnalyticsEvent } from '@dtci/dash/analytics';\n\nexport type SelectProps<T extends OptionTypeBase> = ReactSelectProps<T> & {\n  testMetadata?: TestMetadata;\n};\n\nconst LoadingIndicator = (): JSX.Element => {\n  return <Spinner className=\"sb-select__loading-indicator\" size=\"small\" />;\n};\n\nconst Select = <\n  T extends OptionTypeBase = {\n    value: string;\n    label: string;\n    isDisabled?: boolean;\n  },\n>({\n  className,\n  components,\n  styles,\n  isFetching,\n  icon,\n  useMenuPortal = false,\n  iconContainerClassName,\n  isError = false,\n  testMetadata,\n  flush,\n  creatable,\n  async,\n  loadOptions,\n  analyticsEventData,\n  ...otherProps\n}: SelectProps<T> & {\n  icon?: ReactNode;\n  iconContainerClassName?: string;\n  useMenuPortal?: boolean;\n  isError?: boolean;\n  flush?: 'left' | 'right' | 'flush';\n  creatable?: boolean;\n  async?: boolean;\n  loadOptions?: (\n    inputValue: string,\n    callback: (options: OptionsType<T>) => void,\n  ) => void | Promise<T[]>;\n}): JSX.Element | null => {\n  const ValueContainer = useMemo<ComponentType<ValueContainerProps<T, false>>>(\n    () =>\n      icon\n        ? ({ children, ...props }) => (\n            <defaultComponents.ValueContainer {...props}>\n              {!!children && (\n                <div\n                  className={classNames(\n                    'sb-select__icon-container',\n                    iconContainerClassName,\n                  )}\n                >\n                  {icon}\n                </div>\n              )}\n              <div>{children}</div>\n            </defaultComponents.ValueContainer>\n          )\n        : defaultComponents.ValueContainer,\n    [icon, iconContainerClassName],\n  );\n\n  const props: SelectProps<T> = useMemo(() => {\n    return {\n      isSearchable: async || creatable || false,\n      tabSelectsValue: creatable || false,\n      menuPortalTarget:\n        useMenuPortal && typeof window !== 'undefined' ? document.body : null,\n      ...otherProps,\n      isLoading: isFetching,\n      instanceId: otherProps.instanceId || otherProps.id,\n      components: {\n        LoadingIndicator,\n        ValueContainer,\n        ...components,\n      },\n      styles: {\n        ...styles,\n        menu: (provided: CSSProperties, state: MenuProps<T, false>) => ({\n          ...provided,\n          position: otherProps.expands ? 'static' : 'absolute',\n          zIndex: 20,\n          ...(styles?.menu && styles.menu(provided, state)),\n        }),\n        menuPortal: (base: CSSProperties) => ({ ...base, zIndex: 20 }),\n      },\n      classNamePrefix: 'sb-select',\n      className: classNames(\n        'sb-select',\n        {\n          'sb-select_error': isError,\n          'sb-select__flush-right': flush === 'right',\n          'sb-select__flush-left': flush === 'left',\n          'sb-select__flush': flush === 'flush',\n        },\n        className,\n      ),\n    };\n  }, [\n    async,\n    creatable,\n    useMenuPortal,\n    otherProps,\n    isFetching,\n    ValueContainer,\n    components,\n    styles,\n    isError,\n    flush,\n    className,\n  ]);\n\n  const analyticsContext = useContext(AnalyticsContext);\n\n  const handleOnChange = useCallback(\n    (value, action): void => {\n      props?.onChange?.(value, action);\n      handleAnalyticsEvent({\n        analyticsContext,\n        analyticsEventData,\n        componentType: 'Select',\n        actionName: 'onChange',\n        label:\n          otherProps?.['aria-label'] ||\n          otherProps?.name ||\n          className ||\n          testMetadata?.['data-testid'] ||\n          '',\n        value: [value],\n      });\n    },\n    [\n      analyticsContext,\n      analyticsEventData,\n      className,\n      otherProps,\n      props,\n      testMetadata,\n    ],\n  );\n\n  if (creatable) {\n    if (async && loadOptions) {\n      return (\n        <AsyncCreatableSelect<T, false>\n          {...props}\n          {...testMetadata}\n          loadOptions={loadOptions}\n          onChange={handleOnChange}\n        />\n      );\n    } else {\n      return (\n        <CreatableSelect<T, false>\n          {...props}\n          {...testMetadata}\n          onChange={handleOnChange}\n        />\n      );\n    }\n  } else {\n    if (async && loadOptions) {\n      return (\n        <Async<T, false>\n          {...props}\n          {...testMetadata}\n          loadOptions={loadOptions}\n          onChange={handleOnChange}\n        />\n      );\n    } else {\n      return (\n        <ReactSelect<T, false>\n          {...props}\n          {...testMetadata}\n          onChange={handleOnChange}\n        />\n      );\n    }\n  }\n};\n\nexport default Select;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/slicedToArray\");","import {\n  ButtonHTMLAttributes,\n  DetailedHTMLProps,\n  FC,\n  HTMLProps,\n  MouseEvent,\n  MouseEventHandler,\n  forwardRef,\n  useCallback,\n  useMemo,\n  useContext,\n} from 'react';\nimport classNames from 'classnames';\n\n// Analytics\nimport {\n  AnalyticsContext,\n  TAnalyticsEventData,\n  handleAnalyticsEvent,\n} from '@dtci/dash/analytics';\n\n// Components\nimport Spinner from '../Spinner';\n\n// Styles\nimport './Button.scss';\n\n// Types\nimport { FontAwesomePackage, TestMetadata } from 'types';\n\nexport interface ButtonProps\n  extends DetailedHTMLProps<\n    ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  > {\n  /** Set the button style: promoted (default), standard, demoted, link */\n  styleType?: 'promoted' | 'standard' | 'demoted' | 'link';\n  /** Set the button color: primary (default), secondary, success, error, warning */\n  colorType?: 'primary' | 'secondary' | 'success' | 'error' | 'warning';\n  /** Set the icon position: before (default), after, stacked */\n  iconPlacement?: 'before' | 'after' | 'stacked';\n  /** Can change the size of the button: smaller, small, large */\n  sizeType?: 'smaller' | 'small' | 'large' | 'auto';\n  /** Name of Font Awesome icon to show or custom icon component */\n  iconType?: string | JSX.Element;\n  /** Package of Font Awesome icon */\n  iconPackage?: FontAwesomePackage;\n  /** Boolean to determine if button has an icon and no label */\n  iconOnly?: boolean;\n  /** Set label text for accessibility, should match button text **/\n  labelText?: string;\n  /** shakeOnDisabledHover */\n  shakeOnDisabledHover?: boolean;\n  /** Indicates if button should be disabled */\n  disabled?: boolean;\n  /** Indicates an async loading state */\n  isFetching?: boolean;\n  /** onClick event handler  */\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  // Test IDs for sections of Button\n  testMetadata?: TestMetadata;\n  /** Border Flush */\n  flush?: 'left' | 'right' | 'flush';\n  /** Additional event information to pass to analytics tracking */\n  analyticsEventData?: TAnalyticsEventData;\n}\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      colorType = 'primary',\n      styleType = 'promoted',\n      labelText,\n      iconType,\n      iconPackage = 'fas',\n      iconPlacement = 'before',\n      sizeType,\n      iconOnly,\n      children,\n      shakeOnDisabledHover,\n      disabled,\n      isFetching = false,\n      onClick,\n      testMetadata,\n      flush,\n      analyticsEventData,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const isStackedButton = iconPlacement === 'stacked';\n\n    const analyticsContext = useContext(AnalyticsContext);\n\n    const handleClick = useCallback(\n      (event: MouseEvent<HTMLButtonElement>) => {\n        if (isFetching) {\n          event.preventDefault();\n          event.stopPropagation();\n          return;\n        }\n        onClick?.(event);\n        handleAnalyticsEvent({\n          analyticsContext,\n          analyticsEventData,\n          componentType: 'Button',\n          actionName: 'click',\n          label:\n            otherProps?.['aria-label'] ||\n            labelText ||\n            children?.toString() ||\n            iconType?.toString() ||\n            '',\n        });\n      },\n      [\n        isFetching,\n        onClick,\n        analyticsContext,\n        otherProps,\n        labelText,\n        children,\n        iconType,\n        analyticsEventData,\n      ],\n    );\n\n    const buttonClassNames = useMemo(\n      () =>\n        classNames(\n          'sb-button',\n          {\n            ['sb-button_' + colorType]: colorType,\n            ['sb-button_' + styleType]: styleType,\n            ['sb-button_' + sizeType]: sizeType,\n            ['sb-button_icon-' + iconPlacement]: iconType && iconPlacement,\n            'sb-button_icon-only': iconOnly,\n            'sb-button_no-icon': !iconType,\n            'sb-button_fetching': isFetching,\n            'sb-button_disabled': isStackedButton && disabled, // only stacked needs to have a class for disabled\n            'sb-shake-on-disabled': shakeOnDisabledHover,\n            'sb-button_async': isFetching,\n            'sb-button__flush-right': flush === 'right',\n            'sb-button__flush': flush === 'flush',\n            'sb-button__flush-left': flush === 'left',\n          },\n          className,\n        ),\n      [\n        colorType,\n        styleType,\n        iconPlacement,\n        iconOnly,\n        shakeOnDisabledHover,\n        className,\n        disabled,\n        isStackedButton,\n        sizeType,\n        isFetching,\n        iconType,\n        flush,\n      ],\n    );\n\n    const stackedButtonWrapperClassNames = useMemo(\n      () =>\n        classNames('sb-stacked-wrapper', {\n          'sb-stacked-wrapper-disabled': disabled,\n        }),\n      [disabled],\n    );\n\n    const loader = (\n      <div className=\"sb-button_spinner-container\">\n        <Spinner size=\"small\" className=\"sb-button_spinner\" />\n      </div>\n    );\n\n    const icon = (\n      <span className=\"sb-button_icon-container\">\n        {typeof iconType === 'string' ? (\n          <>\n            {isFetching && loader}\n            <i\n              className={`${iconPackage} ${iconType} sb-button_icon`}\n              data-testid={\n                testMetadata?.['data-testid'] ? 'button-icon' : undefined\n              }\n            />\n          </>\n        ) : (\n          <>\n            {isFetching && loader}\n            <span className=\"sb-button_icon\">{iconType}</span>\n          </>\n        )}\n      </span>\n    );\n\n    return (\n      <>\n        {!isStackedButton && (\n          <button\n            {...otherProps}\n            ref={ref}\n            className={buttonClassNames}\n            aria-label={labelText}\n            title={labelText}\n            disabled={disabled}\n            onClick={handleClick}\n            {...testMetadata}\n          >\n            {iconType &&\n              (iconOnly || !iconPlacement || iconPlacement === 'before') &&\n              icon}\n\n            {!iconOnly && <span className=\"sb-button-text\">{children}</span>}\n            {isFetching && !iconType && loader}\n            {iconType && !iconOnly && iconPlacement === 'after' && icon}\n          </button>\n        )}\n\n        {isStackedButton && (\n          <button\n            {...otherProps}\n            disabled={disabled}\n            aria-label={labelText}\n            ref={ref}\n            title={labelText}\n            className={stackedButtonWrapperClassNames}\n            onClick={handleClick}\n          >\n            <span className={buttonClassNames}>{icon}</span>\n            <div className=\"sb-stacked-label\">{children}</div>\n          </button>\n        )}\n      </>\n    );\n  },\n);\n\nButton.displayName = 'Button';\n\nexport default Button as FC<HTMLProps<HTMLButtonElement> & ButtonProps>;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@dtci/triton/hooks\");","import {\n  CSSProperties,\n  FC,\n  ReactNode,\n  createRef,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport ReactSelect, {\n  Props as ReactSelectProps,\n  OptionTypeBase,\n  ValueType,\n  ActionMeta,\n} from 'react-select';\n\n// Components\nimport Button from '../Button';\n\n// Hooks\nimport { useClickEscape, useClickOutside } from '@dtci/triton/hooks';\n\n// Styles\nimport './Select.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\ntype SelectProps<T extends OptionTypeBase> = ReactSelectProps<T> & {\n  testMetadata?: {\n    selectButtonDiv?: TestMetadata;\n    selectButton?: TestMetadata;\n    selectDropdown?: TestMetadata;\n  };\n};\n\ninterface ControlProps {\n  children?: ReactNode;\n}\n\nconst Control: FC<ControlProps> = (): JSX.Element => <div />;\n\ninterface DropDownProps {\n  children: ReactNode;\n  isOpen: boolean;\n  target: ReactNode;\n  expands?: boolean;\n  testMetadata?: TestMetadata;\n}\n\nconst Dropdown: FC<DropDownProps> = ({\n  children,\n  isOpen,\n  target,\n  testMetadata,\n}): JSX.Element => (\n  <div {...testMetadata}>\n    {target}\n    {isOpen ? <div>{children}</div> : null}\n  </div>\n);\n\nconst SelectButton = <\n  T extends OptionTypeBase = {\n    value: string;\n    label: string;\n    isDisabled?: boolean;\n  },\n>({\n  className,\n  styles,\n  onChange,\n  iconType,\n  testMetadata = {\n    selectButtonDiv: { 'data-testid': 'divSelectButton' },\n    selectButton: { 'data-testid': 'selectButton' },\n    selectDropdown: { 'data-testid': 'selectDropdown' },\n  },\n  ...otherProps\n}: SelectProps<T>): JSX.Element => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [value, setValue] = useState<ValueType<T, false>>(otherProps.value);\n\n  useEffect(() => {\n    setValue(otherProps.value);\n  }, [otherProps.value]);\n\n  const toggleOpen = useCallback(() => {\n    setIsOpen(!isOpen);\n  }, [setIsOpen, isOpen]);\n\n  const onSelectChange = useCallback(\n    (selection: ValueType<T, false>, action: ActionMeta<T>) => {\n      setValue(selection);\n      if (onChange) onChange(selection, action);\n      toggleOpen();\n    },\n    [onChange, toggleOpen],\n  );\n\n  const props: SelectProps<T> = {\n    ...otherProps,\n    value: value,\n    isSearchable: false,\n    components: { Control: Control },\n    styles: {\n      ...styles,\n      menu: (provided: CSSProperties) => ({\n        ...provided,\n        position: 'absolute',\n        zIndex: 9,\n        ...styles?.menu,\n      }),\n    },\n    menuIsOpen: true,\n    classNamePrefix: 'sb-select',\n    className: classNames('sb-select-button', className),\n    onChange: onSelectChange,\n  };\n\n  const dropDownRef = createRef<HTMLDivElement>();\n\n  useClickOutside(\n    () => {\n      if (isOpen) {\n        toggleOpen();\n      }\n    },\n    dropDownRef,\n    [toggleOpen, dropDownRef],\n  );\n\n  useClickEscape(() => {\n    if (isOpen) {\n      toggleOpen();\n    }\n  }, [toggleOpen]);\n\n  return (\n    <div ref={dropDownRef} {...testMetadata?.selectButtonDiv}>\n      <Dropdown\n        isOpen={isOpen}\n        expands={otherProps.expands}\n        testMetadata={testMetadata.selectDropdown}\n        target={\n          <Button\n            iconPlacement=\"before\"\n            iconType={iconType}\n            onClick={toggleOpen}\n            className=\"sb-select-button__button\"\n            styleType=\"promoted\"\n            sizeType=\"small\"\n            {...testMetadata?.selectButton}\n          >\n            {value ? value.label : <>&nbsp;</>}\n          </Button>\n        }\n      >\n        <ReactSelect<T, false> {...props} />\n      </Dropdown>\n    </div>\n  );\n};\n\nexport default SelectButton;\n","import { ComponentProps, forwardRef } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Image.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\ntype Props = ComponentProps<'img'>;\nexport type ImageProps = ComponentProps<typeof Image> & {\n  testMetadata?: TestMetadata;\n};\n\nconst Image = forwardRef<HTMLImageElement, Props>(function InnerImage(\n  { className, alt = '', ...otherProps },\n  ref,\n) {\n  return (\n    <img\n      alt={alt}\n      className={classNames('sb-image', className)}\n      ref={ref}\n      {...otherProps}\n    />\n  );\n});\n\nexport default Image;\n","export const ASSET_URL = 'https://dtci-spellbook.s3-us-west-2.amazonaws.com';\n\nexport const IMAGE_URL = `${ASSET_URL}/img`;\n\nexport const ICON_URL = `${IMAGE_URL}/icons`;\n\nexport const STORIES_URL =\n  'https://gitlab.disney.com/dtci-bp-software-solutions/ui/spellbook/-/blob/develop/src';\n","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Image from '../Image';\n\n// Styles\nimport './Icon.scss';\n\n// Types\nimport { FontAwesomePackage, TestMetadata } from 'types';\n\n// Utils\nimport { ICON_URL } from '../_utils/config';\n\nexport interface IconProps {\n  /**  Whether the component is from font-awesome (fa) or hosted on AWS (aws)*/\n  iconType: 'fa' | 'aws';\n  /** Size override for the icon: smaller (12x12), small (16x16), medium (20x20), large (32x32), larger (48x48) */\n  size?: 'smaller' | 'small' | 'medium' | 'large' | 'larger' | 'auto';\n  /**  The name of the font awesome icon OR an AWS hosted icon */\n  iconName: string;\n  /** Package used for font awesome icons */\n  faPackage?: FontAwesomePackage;\n  /** Class name that goes on the icon */\n  className?: string;\n  /** Label text to display */\n  altText?: string;\n  /** Label text for hover */\n  title?: string;\n  /** Sets test id */\n  testMetadata?: {\n    iconAWSImage?: TestMetadata;\n    iconFASpan?: TestMetadata;\n  };\n}\n\nconst Icon: FC<IconProps> = ({\n  size,\n  iconType,\n  faPackage = 'fab',\n  iconName,\n  className,\n  altText,\n  title,\n  testMetadata = {\n    iconAWSImage: { 'data-testid': 'aws-icon' },\n    iconFASpan: { 'data-testid': 'fa-icon' },\n  },\n}) => {\n  const iconClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-icon',\n        {\n          'sb-icon__size-auto': size === 'auto',\n          'sb-icon__size-smaller': size === 'smaller',\n          'sb-icon__size-small': size === 'small',\n          'sb-icon__size-medium': size === 'medium',\n          'sb-icon__size-large': size === 'large',\n          'sb-icon__size-larger': size === 'larger',\n        },\n        className,\n      ),\n    [size, className],\n  );\n\n  if (iconType === 'aws') {\n    return (\n      <Image\n        className={iconClassNames}\n        alt={altText}\n        title={title}\n        {...testMetadata?.iconAWSImage}\n        src={`${ICON_URL}/${iconName}.svg`}\n      />\n    );\n  } else {\n    return (\n      <>\n        <span\n          {...testMetadata?.iconFASpan}\n          className={classNames([\n            `${faPackage} ${iconName} ${iconClassNames}`,\n            faPackage,\n            iconName,\n          ])}\n          aria-label={altText}\n          title={title}\n        />\n      </>\n    );\n  }\n};\n\nexport default Icon;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tippyjs/react\");","import { FC, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport Tippy, { TippyProps } from '@tippyjs/react';\n\n// Styles\nimport './Popover.scss';\nimport 'tippy.js/dist/tippy.css';\nimport 'tippy.js/themes/light.css';\nimport 'tippy.js/themes/light-border.css';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface PopoverProps {\n  /** Wrapped element that will toggle the popover */\n  children: ReactNode;\n  /** Class name */\n  className?: string;\n  /** Content Class name */\n  contentClassName?: string;\n  /** The actual content of the popover */\n  popoverContent: TippyProps['content'];\n  /** Props to be passed to the instanced Tippy component */\n  tippyProps?: TippyProps;\n  /** Prop to control hide/show behaviour */\n  visible?: boolean;\n  /** Test IDs for component sections */\n  testMetadata?: {\n    popover?: TestMetadata;\n    popoverContent?: TestMetadata;\n  };\n}\n\nconst defaulTippyProps: TippyProps = {\n  arrow: false,\n};\n\nconst Popover: FC<PopoverProps> = ({\n  className,\n  contentClassName,\n  children,\n  popoverContent,\n  tippyProps,\n  testMetadata,\n  visible,\n}) => {\n  return (\n    <Tippy\n      {...defaulTippyProps}\n      {...tippyProps}\n      className={classNames('sb-popover', className)}\n      visible={visible}\n      content={popoverContent}\n      {...testMetadata?.popover}\n    >\n      <div\n        className={classNames('sb-popover__content', contentClassName)}\n        {...testMetadata?.popoverContent}\n      >\n        {children}\n      </div>\n    </Tippy>\n  );\n};\n\nexport default Popover;\n","import { FC, ReactElement, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport { TippyProps } from '@tippyjs/react';\n\n// Components\nimport Popover from '../Popover/';\n\n// Styles\nimport './Tooltip.scss';\nimport 'tippy.js/dist/tippy.css';\nimport 'tippy.js/themes/light.css';\nimport 'tippy.js/themes/light-border.css';\nimport 'tippy.js/animations/scale.css';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface TooltipProps {\n  children: ReactNode;\n  tippyProps?: TippyProps;\n  className?: string;\n  contentClassName?: string;\n  tooltipContent: ReactElement | string;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst defaultTippyProps: TippyProps = {\n  maxWidth: 'none',\n  interactive: true,\n  arrow: true,\n};\n\nconst Tooltip: FC<TooltipProps> = ({\n  children,\n  className,\n  contentClassName,\n  tooltipContent,\n  tippyProps,\n  testMetadata,\n}) => {\n  return (\n    <Popover\n      className={classNames('sb-tooltip', className)}\n      popoverContent={tooltipContent}\n      tippyProps={{ ...defaultTippyProps, ...tippyProps }}\n      {...testMetadata}\n      {...{ contentClassName }}\n    >\n      {children}\n    </Popover>\n  );\n};\n\nexport default Tooltip;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"tippy.js\");","import { FC, HTMLAttributes, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Tooltip from '../Tooltip';\n\n// Styles\nimport './Typography.scss';\n\n// Types\nimport { TestMetadata, TypographyVariants } from 'types';\n\nconst variantsMapping = {\n  T100: 'h1',\n  T90: 'h2',\n  T80: 'h3',\n  T70: 'h4',\n  T60: 'h5',\n  T50: 'h6',\n  T40: 'p',\n  T30: 'p',\n  T20: 'p',\n  T15: 'p',\n  T10: 'p',\n  T05: 'p',\n} as const;\n\nexport interface TypographyProps extends HTMLAttributes<HTMLElement> {\n  /** Applies the typography style */\n  variant: TypographyVariants;\n  /** Add vertical spacing below the typography element **/\n  bottomGutter?: boolean;\n  clickable?: boolean;\n  bold?: boolean;\n  italic?: boolean;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n  /** Flag to control whether the variants should change size based on screen size */\n  responsive?: boolean;\n  /** Trim text to container and add ellipsis */\n  truncate?: boolean;\n  /** Wrap text */\n  wrap?: boolean;\n  //** Title in tag */\n  name?: string;\n}\n\nconst Typography: FC<TypographyProps> = ({\n  variant,\n  className,\n  bottomGutter = false,\n  clickable = false,\n  bold = false,\n  italic = false,\n  children,\n  testMetadata,\n  responsive = false,\n  truncate = false,\n  wrap = false,\n  name,\n  ...props\n}) => {\n  const CustomTag = variantsMapping[variant];\n\n  const typographyClassNames = useMemo(\n    () =>\n      classNames(\n        `sb-typography sb-typography_${variant}`,\n        {\n          'sb-typography_with-bottom-gutter': bottomGutter,\n          'sb-typography_clickable': clickable,\n          'sb-typography_bold': bold,\n          'sb-typography_italic': italic,\n          'sb-typography_responsive': responsive,\n          'sb-typography_truncate': truncate,\n          'sb-typography_wrap': wrap,\n        },\n        className,\n      ),\n    [\n      variant,\n      bottomGutter,\n      clickable,\n      bold,\n      italic,\n      responsive,\n      truncate,\n      className,\n      wrap,\n    ],\n  );\n\n  const text = (\n    <CustomTag\n      title={name}\n      className={typographyClassNames}\n      {...props}\n      {...testMetadata}\n    >\n      {children}\n    </CustomTag>\n  );\n\n  return truncate ? (\n    <Tooltip tooltipContent={<>{children}</>}>{text}</Tooltip>\n  ) : (\n    text\n  );\n};\n\nexport default Typography;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash/isEqual\");","import { FC } from 'react';\nimport {\n  components as optionComponents,\n  OptionProps,\n  OptionTypeBase,\n} from 'react-select';\nimport classNames from 'classnames';\n\n// Components\nimport Select from '../Select';\nimport Icon from '../Icon';\nimport Typography from '../Typography';\n\n// Styles\nimport './MenuList.scss';\n\n// Types\nimport { SelectOption, TestMetadata } from '../types';\nimport isEqual from 'lodash/isEqual';\n\nexport interface MenuListProps {\n  // ID of select\n  id?: string;\n  // Adds elevated styles\n  elevated?: boolean;\n  // Whether to indicate an item is selected, for example, an item wouldn't be selected if choosing a report to run\n  showSelected?: boolean;\n  // Options that populate the menu list\n  options: SelectOption[];\n  // Selected option\n  selectedOption?: SelectOption;\n  // Option change event\n  onChange: (value: SelectOption) => void;\n  /** Classname for the MenuList component */\n  className?: string;\n  // Test IDs for component sections\n  testMetadata?: {\n    wrapper?: TestMetadata;\n  };\n}\n\nconst CustomOption = <T extends OptionTypeBase>(\n  props: OptionProps<T, false>,\n  showSelected: boolean,\n  selectedOption: SelectOption | undefined,\n): JSX.Element => {\n  return (\n    <optionComponents.Option {...props}>\n      <div className=\"sb-menu-list__option\">\n        {showSelected && (\n          <Icon\n            altText=\"Selected\"\n            faPackage=\"fa-light\"\n            iconName=\"fa-check\"\n            iconType=\"fa\"\n            size=\"smaller\"\n            title=\"Selected\"\n            className={classNames(\n              'sb-menu-list__check',\n              !isEqual(selectedOption, props.data) &&\n                'sb-menu-list__check-unselected',\n            )}\n          />\n        )}\n        <Typography\n          variant=\"T15\"\n          className={classNames(\n            showSelected &&\n              isEqual(selectedOption, props.data) &&\n              'sb-menu-list__label-selected',\n          )}\n        >\n          {props.label}\n        </Typography>\n      </div>\n    </optionComponents.Option>\n  );\n};\n\nconst MenuList: FC<MenuListProps> = ({\n  id,\n  elevated = false,\n  showSelected = true,\n  options,\n  selectedOption,\n  onChange,\n  className,\n  testMetadata,\n}) => {\n  const classes = classNames(className, 'sb-menu-list', {\n    'sb-menu-list__flat': !elevated,\n  });\n  return (\n    <div className={classes} {...testMetadata?.wrapper}>\n      <Select\n        id={id}\n        instanceId=\"menu-list-select\"\n        data-testid=\"menu-list-select\"\n        menuIsOpen\n        testMetadata={testMetadata?.wrapper}\n        options={options}\n        value={showSelected ? selectedOption : null}\n        onChange={(option) => onChange(option as SelectOption)}\n        components={{\n          Option: (props) => CustomOption(props, showSelected, selectedOption),\n        }}\n      />\n    </div>\n  );\n};\n\nexport default MenuList;\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","className","loadText","size","imageUrl","animation","location","testMetadata","otherProps","spinnerClassnames","useMemo","classNames","styles","maskImage","WebkitMaskImage","backgroundImage","role","style","LoadingIndicator","components","isFetching","icon","useMenuPortal","iconContainerClassName","isError","flush","creatable","async","loadOptions","analyticsEventData","ValueContainer","children","props","defaultComponents","isSearchable","tabSelectsValue","menuPortalTarget","window","document","body","isLoading","instanceId","id","menu","provided","state","position","expands","zIndex","menuPortal","base","classNamePrefix","analyticsContext","useContext","AnalyticsContext","handleOnChange","useCallback","action","onChange","handleAnalyticsEvent","componentType","actionName","label","name","Button","forwardRef","ref","colorType","styleType","labelText","iconType","iconPackage","iconPlacement","sizeType","iconOnly","shakeOnDisabledHover","disabled","onClick","isStackedButton","handleClick","event","preventDefault","stopPropagation","toString","buttonClassNames","stackedButtonWrapperClassNames","loader","undefined","title","displayName","Image","alt","IMAGE_URL","ICON_URL","faPackage","iconName","altText","iconAWSImage","iconFASpan","iconClassNames","src","defaulTippyProps","arrow","contentClassName","popoverContent","tippyProps","visible","content","popover","defaultTippyProps","maxWidth","interactive","tooltipContent","variantsMapping","T100","T90","T80","T70","T60","T50","T40","T30","T20","T15","T10","T05","variant","bottomGutter","clickable","bold","italic","responsive","truncate","wrap","CustomTag","typographyClassNames","text","elevated","showSelected","options","selectedOption","classes","wrapper","menuIsOpen","option","Option","isEqual","data","CustomOption"],"sourceRoot":""}