import { FC } from 'react';
/**
 * This component is designed to progressively display content based on a set truncation point.
 * It will truncate the content at the specified line and provide a View More/View Less action
 * to toggle the content.
 * @param text The text for formatted fragment to display.
 * @param truncateAtLine The line to start the truncation.
 * @param size The size of the text.
 * @param classNames Additional CSS classes to apply to text content.
 * @param onViewMoreChanged Callback to subscribe to when view more switches between expanded and collapsed states.
 * @param expandedByDefault Whether the text should be expanded by default.
 * @returns A ViewMore component.
 *
 * With the text field, we can pass in a string or a React Fragment. If we pass in a string, it will be displayed as is.
 * If we pass in a React Fragment, we can pass in custom formatting to the text.
 * Note: You can pass in a React Fragment but this should be only formatted text inside a fragment.
 */
export interface ViewMoreProps {
    text: React.ReactFragment | string;
    /** Line to start the truncation */
    truncateAtLine?: number;
    /** Text size */
    size?: 'small' | 'regular' | 'large';
    /** Additional CSS classes to apply to text content */
    classNames?: string;
    /** Callback to subscribe to when view more switches between expanded and collapsed states */
    onViewMoreChanged?: (expanded: boolean, paragraphElement: HTMLParagraphElement) => void;
    expandedByDefault?: boolean;
}
import './ViewMore.scss';
declare const ViewMore: FC<ViewMoreProps>;
export default ViewMore;
