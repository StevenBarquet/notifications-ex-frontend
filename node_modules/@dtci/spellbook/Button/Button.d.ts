import { ButtonHTMLAttributes, DetailedHTMLProps, FC, HTMLProps, MouseEventHandler } from 'react';
import { TAnalyticsEventData } from '@dtci/dash/analytics';
import './Button.scss';
import { FontAwesomePackage, TestMetadata } from 'types';
export interface ButtonProps extends DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> {
    /** Set the button style: promoted (default), standard, demoted, link */
    styleType?: 'promoted' | 'standard' | 'demoted' | 'link';
    /** Set the button color: primary (default), secondary, success, error, warning */
    colorType?: 'primary' | 'secondary' | 'success' | 'error' | 'warning';
    /** Set the icon position: before (default), after, stacked */
    iconPlacement?: 'before' | 'after' | 'stacked';
    /** Can change the size of the button: smaller, small, large */
    sizeType?: 'smaller' | 'small' | 'large' | 'auto';
    /** Name of Font Awesome icon to show or custom icon component */
    iconType?: string | JSX.Element;
    /** Package of Font Awesome icon */
    iconPackage?: FontAwesomePackage;
    /** Boolean to determine if button has an icon and no label */
    iconOnly?: boolean;
    /** Set label text for accessibility, should match button text **/
    labelText?: string;
    /** shakeOnDisabledHover */
    shakeOnDisabledHover?: boolean;
    /** Indicates if button should be disabled */
    disabled?: boolean;
    /** Indicates an async loading state */
    isFetching?: boolean;
    /** onClick event handler  */
    onClick?: MouseEventHandler<HTMLButtonElement>;
    testMetadata?: TestMetadata;
    /** Border Flush */
    flush?: 'left' | 'right' | 'flush';
    /** Additional event information to pass to analytics tracking */
    analyticsEventData?: TAnalyticsEventData;
}
declare const _default: FC<HTMLProps<HTMLButtonElement> & ButtonProps>;
export default _default;
