import { FC, MutableRefObject } from 'react';
import { AgGridReactProps } from 'ag-grid-react';
import { TestMetadata } from '../types';
import { GridApi, ColDef, IServerSideDatasource, ColumnApi } from 'ag-grid-community';
import './DataGrid.theme.scss';
import './DataGrid.scss';
export interface DataGridProps {
    /** Column Definitions */
    columnDefs: ColDef[];
    /** Default Col Definitions */
    defaultColumnDef?: ColDef;
    agGrid?: AgGridReactProps;
    className?: string;
    gridClassName?: string;
    theme?: string;
    /** Data Grid API ref */
    dataGridApiRef?: MutableRefObject<GridApi | null>;
    /** Data Grid API ref */
    dataGridColumnApiRef?: MutableRefObject<ColumnApi | null>;
    /** Table Borders */
    bordered?: 'horizontal' | 'vertical' | 'rows' | 'all' | 'none';
    /** Striped Rows */
    striped?: boolean;
    /**
     * Space in-between rows.
     */
    rowSpace?: boolean;
    /**
     * Whether to use ag-grids server row model.
     */
    dataMode?: 'client' | 'server';
    /**
     * Server row model.
     */
    serverDatasource?: IServerSideDatasource;
    /**
     * Set filtering to on by default (uses agTextColumnFilter unless changed on a per column basis).
     */
    filterable?: boolean;
    /** set the selected rows list */
    onSelectedRowsChanged?: (selectedRows: unknown[]) => void;
    /**
     * Set sorting to on by default (uses a text comparator by default unless changed on a per column basis).
     */
    sortable?: boolean;
    /**
     * Rows are selectable with checkboxes
     */
    selectable?: boolean;
    /**
     * Defines if the row selection is multiple or single.
     */
    selectMode?: 'multiple' | 'single';
    /**
     * Fields are editable
     */
    editable?: boolean;
    /**
     * Cells can be pasted into
     */
    pasteable?: boolean;
    /**
     * Allow columns can be re-arranged via drag & drop (defaults to false)
     */
    moveableColumns?: boolean;
    /**
     * Size of rows
     */
    size?: 'default' | 'large';
    /**
     * Autoheight using DomLayout property - allows grid to auto-size it's height to fit rows
     */
    autoHeight?: boolean;
    /**
     * Test metadata
     */
    testMetadata?: {
        container?: TestMetadata;
    };
    /**
     * Text to display if no results are found
     */
    noResultsMessage?: string;
    /**
     * total row count (server-side)
     */
    totalCount?: number;
    /**
     * is data fetching (server-side)
     */
    isFetching?: boolean;
}
declare const DataGrid: FC<DataGridProps>;
export default DataGrid;
