import { ComponentProps, ReactNode } from 'react';
import { FieldErrors, Path, UseFormReturn } from 'react-hook-form';
import { TestMetadata } from 'types';
import './FormField.scss';
export interface ControlProps {
    /** Class name for component */
    className?: string;
    /** Boolean to display error state of component */
    isError?: boolean;
}
export interface FormFieldProps<I extends Record<string, unknown>> {
    fieldName: Path<I>;
    /** Text of visible input label */
    labelText?: ReactNode;
    /** Tooltip icon and hover text */
    tooltip?: string[];
    /** Boolean to determine if control is required */
    required?: boolean;
    /** Helper text, if any */
    helper?: ReactNode;
    /** Actual control component to be displayed */
    control: (formMethods: UseFormReturn<I>, props: ControlProps) => ReactNode;
    /** className for top level component */
    className?: string;
    /** Control success message, if any */
    success?: ReactNode;
    /** Passing props to the label */
    labelProps?: ComponentProps<'label'> & TestMetadata;
    labelFor?: string;
    /** Fix the feedback section height so it doesn't jump as error or success feedback is displayed */
    fixedHeightFeedback?: boolean;
    requiredText?: string;
    customGetErrorMessage?: (errors: FieldErrors<I>, values: I) => ReactNode;
    customIsErrorValidation?: (errors: FieldErrors<I>, values: I) => boolean;
    readOnly?: boolean;
    truncate?: 'truncate' | 'wrap';
}
declare const FormField: <I extends Record<string, unknown>>({ fieldName, labelText, tooltip, required, helper, control, className, success, labelProps, labelFor, customGetErrorMessage, customIsErrorValidation, readOnly, ...otherProps }: FormFieldProps<I>) => JSX.Element;
export default FormField;
