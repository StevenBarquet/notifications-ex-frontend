import { ReactNode } from 'react';
import { Path, RegisterOptions } from 'react-hook-form';
import { OptionTypeBase, Props as ReactSelectProps } from 'react-select';
import { FormFieldProps } from '../FormField';
import { TestMetadata } from '../types';
export interface Option {
    value: string;
    label: string;
    isDisabled?: boolean;
}
export type MultiSelectProps<T extends OptionTypeBase> = ReactSelectProps<T, true>;
export interface FormMultiSelectFieldProps<I extends Record<string, unknown>> {
    /** Name for field (Unique in the form) */
    fieldName: Path<I>;
    /** Display name for field */
    labelText?: string;
    /** Tooltip icon and hover text */
    tooltip?: string[];
    /** Options to have in the Select */
    options?: Option[];
    /** Props to spread down to the select */
    selectProps?: MultiSelectProps<Option>;
    /** Mark field required (*) */
    required?: boolean;
    /** Placeholder value */
    placeholder?: ReactNode;
    /** Initial value selected */
    initialValue?: Option[];
    /** Rules to pass down to control */
    rules?: RegisterOptions;
    /** Sets helper */
    helper?: string;
    /** Class name */
    className?: string;
    /** Is retrieving data */
    isFetching?: boolean;
    /** Enables the select all option */
    showSelectAllOption?: boolean;
    /** Sets test id */
    testMetadata?: {
        wrapper?: TestMetadata;
        input?: TestMetadata;
    };
    defaultValue?: unknown;
    labelFor?: string;
    /** items can be added to selected options */
    creatable?: boolean;
    /** options can be loaded asynchronously */
    async?: boolean;
}
declare const FormMultiSelectField: <I extends Record<string, unknown>>({ fieldName, labelText, tooltip, options, selectProps, required, placeholder, initialValue, rules, testMetadata, helper, className, isFetching, defaultValue, labelFor, showSelectAllOption, creatable, async, readOnly, ...otherProps }: FormMultiSelectFieldProps<I> & Partial<FormFieldProps<I>>) => JSX.Element;
export default FormMultiSelectField;
