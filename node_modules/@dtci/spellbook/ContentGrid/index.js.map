{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/slicedToArray\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/Skeleton/Skeleton.tsx","webpack://@dtci/spellbook/./src/ContentGrid/ContentGridSkeleton.tsx","webpack://@dtci/spellbook/./src/ContentGrid/ContentGrid.tsx","webpack://@dtci/spellbook/./src/ContentGrid/ContentGridItem.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/slicedToArray\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import { FC, ReactNode, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Skeleton.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface SkeletonProps {\n  /** Skeleton width */\n  width?: string | number;\n  /** Class name */\n  className?: string;\n  /* isLoading flag to render children if false and Skeleton if true\n   * by default is true\n   */\n  isLoading?: boolean;\n  /** children to render when loading is done */\n  children?: ReactNode;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Skeleton: FC<SkeletonProps> = ({\n  width = '100%',\n  className,\n  isLoading = true,\n  children,\n  testMetadata,\n  ...otherProps\n}) => {\n  const skeletonClassNames = useMemo(\n    () => classNames('sb-skeleton', className),\n    [className],\n  );\n\n  return (\n    <>\n      {isLoading ? (\n        <span\n          {...otherProps}\n          style={{ width }}\n          className={skeletonClassNames}\n          {...testMetadata}\n        >\n          &zwnj;\n        </span>\n      ) : (\n        children\n      )}\n    </>\n  );\n};\n\nexport default Skeleton;\n","import { FC, useState, useMemo, useCallback, useEffect } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Skeleton from '../Skeleton';\n\n// Styles\nimport './ContentGrid.scss';\nimport './ContentGridSkeleton.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface ContentGridSkeletonProps {\n  size: 'smaller' | 'small' | 'medium' | 'large' | 'larger';\n  width: number;\n  itemCount?: number;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst ContentGridSkeleton: FC<ContentGridSkeletonProps> = ({\n  size,\n  width,\n  itemCount,\n  testMetadata = { 'data-testid': 'ContentGridSkeleton_Skeleton' },\n}) => {\n  const [skeletonsArray, setSkeletonsArray] = useState([0]);\n\n  const skeletonsWidth = useMemo(() => {\n    switch (size) {\n      case 'smaller':\n        return 100;\n      case 'small':\n        return 180;\n      case 'medium':\n        return 290;\n      case 'large':\n        return 350;\n      case 'larger':\n        return 550;\n    }\n  }, [size]);\n\n  const actualWidth = useCallback(\n    (number) => {\n      return number * skeletonsWidth + (number - 1) * 16;\n    },\n    [skeletonsWidth],\n  );\n\n  useEffect(() => {\n    for (let index = 1; actualWidth(index) <= width; index++) {\n      if (actualWidth(index + 1) > width) {\n        setSkeletonsArray(\n          Array.from({ length: itemCount ?? index * 2 }, (v, i) => i),\n        );\n      }\n    }\n  }, [width, actualWidth, setSkeletonsArray, itemCount]);\n\n  return (\n    <>\n      {skeletonsArray?.map((i, index) => (\n        <Skeleton\n          key={`keyy${index}`}\n          className={classNames(\n            'sb-content-grid',\n            'sb-content-grid-item-skeleton',\n            `sb-content-grid_${size}`,\n          )}\n          {...testMetadata}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default ContentGridSkeleton;\n","import { useState, useMemo, useCallback, FC, ReactNode } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport ContentGridSkeleton from './ContentGridSkeleton';\n\n// Styles\nimport './ContentGrid.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface ContentGridProps {\n  /** Class name for Content Grid */\n  className?: string;\n  /** Size of the items */\n  size?: 'smaller' | 'small' | 'medium' | 'large' | 'larger';\n  itemCount?: number;\n  isFetching?: boolean;\n  fetchingSkeleton?: ReactNode;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst ContentGrid: FC<ContentGridProps> = ({\n  children,\n  className,\n  isFetching,\n  fetchingSkeleton,\n  size = 'medium',\n  itemCount,\n  testMetadata,\n  ...otherProps\n}) => {\n  const [width, setWidth] = useState(0);\n  const contentGridClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-content-grid',\n        size && `sb-content-grid_${size}`,\n        className,\n      ),\n    [size, className],\n  );\n\n  const container = useCallback((node) => {\n    if (node !== null) {\n      setWidth(node.getBoundingClientRect().width);\n    }\n  }, []);\n\n  return (\n    <div\n      ref={container}\n      {...otherProps}\n      className={contentGridClassNames}\n      {...testMetadata}\n    >\n      {isFetching ? (\n        fetchingSkeleton ? (\n          fetchingSkeleton\n        ) : (\n          <ContentGridSkeleton\n            width={width}\n            size={size}\n            itemCount={itemCount}\n          />\n        )\n      ) : (\n        children\n      )}\n    </div>\n  );\n};\n\nexport default ContentGrid;\n","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './ContentGridItem.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface ContentGridItemProps {\n  /** Class name for Content List Item*/\n  className?: string;\n  /** Determines if the grid item is an interactive object*/\n  isInteractive?: boolean;\n  /** Determines if the item in a active state */\n  isActive?: boolean;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst ContentGridItem: FC<ContentGridItemProps> = ({\n  children,\n  className,\n  isInteractive = false,\n  isActive = false,\n  testMetadata,\n  ...otherProps\n}) => {\n  const contentGridItemClassNames = useMemo(\n    () =>\n      classNames('sb-content-grid-item', className, {\n        'sb-content-grid-item_active': isActive,\n        'sb-content-grid-item__interactive': isInteractive,\n      }),\n    [className, isActive, isInteractive],\n  );\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames(contentGridItemClassNames)}\n      {...testMetadata}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default ContentGridItem;\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","width","className","isLoading","children","testMetadata","otherProps","skeletonClassNames","useMemo","classNames","style","size","itemCount","useState","skeletonsArray","setSkeletonsArray","skeletonsWidth","actualWidth","useCallback","number","useEffect","index","Array","from","length","v","map","isFetching","fetchingSkeleton","setWidth","contentGridClassNames","container","node","getBoundingClientRect","ref","isInteractive","isActive","contentGridItemClassNames"],"sourceRoot":""}