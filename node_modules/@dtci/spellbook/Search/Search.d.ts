import { ComponentProps, FC, KeyboardEvent, SyntheticEvent } from 'react';
import Input from '../Input';
import './Search.scss';
import { TestMetadata } from 'types';
export interface SearchProps {
    /** Text for aria-label and placeholder */
    labelText?: string;
    /** Class name for search container */
    className?: string;
    /** Determine if search field should blend against dark nav styling */
    inNavDark?: boolean;
    /** Determine if search field should blend against light nav styling */
    inNavLight?: boolean;
    /** Determines if search field has an icon */
    hasIcon?: boolean;
    /** Icon class */
    iconClass?: string;
    /** Additional input props for Input, based on the inputComponent */
    inputProps?: ComponentProps<typeof Input>;
    /** value of search */
    value: string;
    /** show or hide a cancel button */
    showCancelBtn?: boolean;
    /** show an expandable search bar */
    expandable?: boolean;
    /** onChange to change search */
    onChange: (value: string) => void;
    /** onClear if parent component would like to do anything else after the clear */
    onClear?: () => void;
    /** onCancel if parent component would like to do anything else after canceling */
    onCancel?: () => void;
    /** function to be called when input is focused */
    onFocus?: (e: SyntheticEvent) => void;
    onKeyPress?: (e: KeyboardEvent<HTMLInputElement>) => void;
    /** option to default focus the input on load */
    isFocusOnLoad?: boolean;
    /** Width of the Input */
    width?: 'small' | 'medium' | 'large' | 'auto';
    testMetadata?: {
        search?: TestMetadata;
        searchButton?: TestMetadata;
        searchInput?: TestMetadata;
        searchIcon?: TestMetadata;
        clearButton?: TestMetadata;
    };
}
declare const Search: FC<SearchProps>;
export default Search;
