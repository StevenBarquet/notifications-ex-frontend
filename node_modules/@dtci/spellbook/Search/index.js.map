{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/slicedToArray\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"@dtci/dash/analytics\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/Spinner/Spinner.tsx","webpack://@dtci/spellbook/./src/Button/Button.tsx","webpack://@dtci/spellbook/./src/Input/Input.tsx","webpack://@dtci/spellbook/./src/Search/Search.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/slicedToArray\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@dtci/dash/analytics\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Spinner.scss';\n\n// Types\nimport {\n  AnimationOptions,\n  LocationOptions,\n  SizeOptions,\n  TestMetadata,\n} from '../types';\n\nexport interface SpinnerProps {\n  /** Add a class to the spinner */\n  className?: string;\n  /** Loading text for screen readers */\n  loadText?: string;\n  /** Size: smaller, small, medium (default), large */\n  size?: SizeOptions;\n  /** Full URL to a custom image you would like to use */\n  imageUrl?: string;\n  /** Animation: spin (default), bounce, rock, wobble */\n  animation?: AnimationOptions;\n  /** Location: mask, background */\n  /** Mask can break some animations but allows you to change the color of the icon. Use background if Mask is causing problems. */\n  location?: LocationOptions;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Spinner: FC<SpinnerProps> = ({\n  className,\n  loadText = 'Loading...',\n  size = 'medium',\n  imageUrl,\n  animation = 'spin',\n  location = 'mask',\n  testMetadata,\n  ...otherProps\n}) => {\n  const spinnerClassnames = useMemo(\n    () =>\n      classNames(\n        `sb-spinner_${location}`,\n        `sb-spinner_animate_${animation}`,\n        `sb-spinner_${size}`,\n      ),\n    [size, animation, location],\n  );\n\n  let styles = {};\n  if (imageUrl) {\n    if (location === 'mask') {\n      styles = {\n        maskImage: `url(${imageUrl})`,\n        WebkitMaskImage: `url(${imageUrl})`,\n      };\n    } else {\n      styles = {\n        backgroundImage: `url(${imageUrl})`,\n      };\n    }\n  }\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames('sb-spinner', className)}\n      role=\"alert\"\n      aria-live=\"assertive\"\n      {...testMetadata}\n    >\n      <p className=\"sb-spinner-load-text\">{loadText}</p>\n      <div\n        className={spinnerClassnames}\n        style={styles}\n        data-testid=\"spinner-mask\"\n      />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import {\n  ButtonHTMLAttributes,\n  DetailedHTMLProps,\n  FC,\n  HTMLProps,\n  MouseEvent,\n  MouseEventHandler,\n  forwardRef,\n  useCallback,\n  useMemo,\n  useContext,\n} from 'react';\nimport classNames from 'classnames';\n\n// Analytics\nimport {\n  AnalyticsContext,\n  TAnalyticsEventData,\n  handleAnalyticsEvent,\n} from '@dtci/dash/analytics';\n\n// Components\nimport Spinner from '../Spinner';\n\n// Styles\nimport './Button.scss';\n\n// Types\nimport { FontAwesomePackage, TestMetadata } from 'types';\n\nexport interface ButtonProps\n  extends DetailedHTMLProps<\n    ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  > {\n  /** Set the button style: promoted (default), standard, demoted, link */\n  styleType?: 'promoted' | 'standard' | 'demoted' | 'link';\n  /** Set the button color: primary (default), secondary, success, error, warning */\n  colorType?: 'primary' | 'secondary' | 'success' | 'error' | 'warning';\n  /** Set the icon position: before (default), after, stacked */\n  iconPlacement?: 'before' | 'after' | 'stacked';\n  /** Can change the size of the button: smaller, small, large */\n  sizeType?: 'smaller' | 'small' | 'large' | 'auto';\n  /** Name of Font Awesome icon to show or custom icon component */\n  iconType?: string | JSX.Element;\n  /** Package of Font Awesome icon */\n  iconPackage?: FontAwesomePackage;\n  /** Boolean to determine if button has an icon and no label */\n  iconOnly?: boolean;\n  /** Set label text for accessibility, should match button text **/\n  labelText?: string;\n  /** shakeOnDisabledHover */\n  shakeOnDisabledHover?: boolean;\n  /** Indicates if button should be disabled */\n  disabled?: boolean;\n  /** Indicates an async loading state */\n  isFetching?: boolean;\n  /** onClick event handler  */\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  // Test IDs for sections of Button\n  testMetadata?: TestMetadata;\n  /** Border Flush */\n  flush?: 'left' | 'right' | 'flush';\n  /** Additional event information to pass to analytics tracking */\n  analyticsEventData?: TAnalyticsEventData;\n}\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      colorType = 'primary',\n      styleType = 'promoted',\n      labelText,\n      iconType,\n      iconPackage = 'fas',\n      iconPlacement = 'before',\n      sizeType,\n      iconOnly,\n      children,\n      shakeOnDisabledHover,\n      disabled,\n      isFetching = false,\n      onClick,\n      testMetadata,\n      flush,\n      analyticsEventData,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const isStackedButton = iconPlacement === 'stacked';\n\n    const analyticsContext = useContext(AnalyticsContext);\n\n    const handleClick = useCallback(\n      (event: MouseEvent<HTMLButtonElement>) => {\n        if (isFetching) {\n          event.preventDefault();\n          event.stopPropagation();\n          return;\n        }\n        onClick?.(event);\n        handleAnalyticsEvent({\n          analyticsContext,\n          analyticsEventData,\n          componentType: 'Button',\n          actionName: 'click',\n          label:\n            otherProps?.['aria-label'] ||\n            labelText ||\n            children?.toString() ||\n            iconType?.toString() ||\n            '',\n        });\n      },\n      [\n        isFetching,\n        onClick,\n        analyticsContext,\n        otherProps,\n        labelText,\n        children,\n        iconType,\n        analyticsEventData,\n      ],\n    );\n\n    const buttonClassNames = useMemo(\n      () =>\n        classNames(\n          'sb-button',\n          {\n            ['sb-button_' + colorType]: colorType,\n            ['sb-button_' + styleType]: styleType,\n            ['sb-button_' + sizeType]: sizeType,\n            ['sb-button_icon-' + iconPlacement]: iconType && iconPlacement,\n            'sb-button_icon-only': iconOnly,\n            'sb-button_no-icon': !iconType,\n            'sb-button_fetching': isFetching,\n            'sb-button_disabled': isStackedButton && disabled, // only stacked needs to have a class for disabled\n            'sb-shake-on-disabled': shakeOnDisabledHover,\n            'sb-button_async': isFetching,\n            'sb-button__flush-right': flush === 'right',\n            'sb-button__flush': flush === 'flush',\n            'sb-button__flush-left': flush === 'left',\n          },\n          className,\n        ),\n      [\n        colorType,\n        styleType,\n        iconPlacement,\n        iconOnly,\n        shakeOnDisabledHover,\n        className,\n        disabled,\n        isStackedButton,\n        sizeType,\n        isFetching,\n        iconType,\n        flush,\n      ],\n    );\n\n    const stackedButtonWrapperClassNames = useMemo(\n      () =>\n        classNames('sb-stacked-wrapper', {\n          'sb-stacked-wrapper-disabled': disabled,\n        }),\n      [disabled],\n    );\n\n    const loader = (\n      <div className=\"sb-button_spinner-container\">\n        <Spinner size=\"small\" className=\"sb-button_spinner\" />\n      </div>\n    );\n\n    const icon = (\n      <span className=\"sb-button_icon-container\">\n        {typeof iconType === 'string' ? (\n          <>\n            {isFetching && loader}\n            <i\n              className={`${iconPackage} ${iconType} sb-button_icon`}\n              data-testid={\n                testMetadata?.['data-testid'] ? 'button-icon' : undefined\n              }\n            />\n          </>\n        ) : (\n          <>\n            {isFetching && loader}\n            <span className=\"sb-button_icon\">{iconType}</span>\n          </>\n        )}\n      </span>\n    );\n\n    return (\n      <>\n        {!isStackedButton && (\n          <button\n            {...otherProps}\n            ref={ref}\n            className={buttonClassNames}\n            aria-label={labelText}\n            title={labelText}\n            disabled={disabled}\n            onClick={handleClick}\n            {...testMetadata}\n          >\n            {iconType &&\n              (iconOnly || !iconPlacement || iconPlacement === 'before') &&\n              icon}\n\n            {!iconOnly && <span className=\"sb-button-text\">{children}</span>}\n            {isFetching && !iconType && loader}\n            {iconType && !iconOnly && iconPlacement === 'after' && icon}\n          </button>\n        )}\n\n        {isStackedButton && (\n          <button\n            {...otherProps}\n            disabled={disabled}\n            aria-label={labelText}\n            ref={ref}\n            title={labelText}\n            className={stackedButtonWrapperClassNames}\n            onClick={handleClick}\n          >\n            <span className={buttonClassNames}>{icon}</span>\n            <div className=\"sb-stacked-label\">{children}</div>\n          </button>\n        )}\n      </>\n    );\n  },\n);\n\nButton.displayName = 'Button';\n\nexport default Button as FC<HTMLProps<HTMLButtonElement> & ButtonProps>;\n","import {\n  ClassAttributes,\n  DetailedHTMLProps,\n  FC,\n  InputHTMLAttributes,\n  useContext,\n  useCallback,\n  useMemo,\n} from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Input.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Analytics\nimport {\n  AnalyticsContext,\n  handleAnalyticsEvent,\n  TAnalyticsEventData,\n} from '@dtci/dash/analytics';\n\nexport interface InputProps\n  extends DetailedHTMLProps<\n    InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  > {\n  /** value of the input field */\n  value?: number | string;\n  /** Boolean to determine if field is required */\n  required?: boolean;\n  /** If label is not visible, use aria-label for screen readers */\n  labelText?: string;\n  /** ref form inner input **/\n  inputRef?: ClassAttributes<HTMLInputElement>['ref'];\n  /** Width of the Input */\n  width?: 'small' | 'medium' | 'large' | 'auto';\n  // For use with nested components, ie. inputProps\n  'data-testid'?: string;\n  testMetadata?: TestMetadata;\n  /** Error State */\n  isError?: boolean;\n  /** Disabled State */\n  isDisabled?: boolean;\n  /** Border Flush */\n  flush?: 'left' | 'right' | 'flush';\n  /** Indicate if input should have a border */\n  bordered?: boolean;\n  /** Additional event information to pass to analytics tracking */\n  analyticsEventData?: TAnalyticsEventData;\n}\n/** Input components are useful for editing text in forms */\nconst Input: FC<InputProps> = ({\n  className,\n  labelText,\n  inputRef,\n  type = 'text',\n  required,\n  width = 'small',\n  testMetadata,\n  isError = false,\n  flush,\n  bordered = true,\n  isDisabled,\n  analyticsEventData,\n  ...otherProps\n}) => {\n  const inputClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-input',\n        {\n          'sb-input_error': isError,\n          'sb-input__is-required': required,\n          'sb-input__is-disabled': isDisabled,\n          'sb-input__size-small': width === 'small',\n          'sb-input__size-medium': width === 'medium',\n          'sb-input__size-large': width === 'large',\n          'sb-input__size-auto': width === 'auto',\n          'sb-input__flush-right': flush === 'right',\n          'sb-input__flush': flush === 'flush',\n          'sb-input__flush-left': flush === 'left',\n          'sb-input__borderless': !bordered,\n        },\n        className,\n      ),\n    [className, required, width, isError, flush, bordered, isDisabled],\n  );\n\n  const analyticsContext = useContext(AnalyticsContext);\n  const { onFocus, onBlur, onKeyDown } = otherProps;\n\n  const handleOnFocus = useCallback(\n    (e: React.FocusEvent<HTMLInputElement>): void => {\n      onFocus?.(e);\n      handleAnalyticsEvent({\n        analyticsContext,\n        analyticsEventData,\n        componentType: 'Input',\n        actionName: 'focus',\n        label:\n          otherProps?.['aria-label'] ||\n          otherProps?.name ||\n          labelText ||\n          className ||\n          testMetadata?.['data-testid'] ||\n          '',\n        value: [{ text: e.target.value }],\n      });\n    },\n    [\n      analyticsContext,\n      analyticsEventData,\n      className,\n      labelText,\n      onFocus,\n      otherProps,\n      testMetadata,\n    ],\n  );\n\n  const handleOnBlur = useCallback(\n    (e: React.FocusEvent<HTMLInputElement>): void => {\n      onBlur?.(e);\n      handleAnalyticsEvent({\n        analyticsContext,\n        analyticsEventData,\n        componentType: 'Input',\n        actionName: 'blur',\n        label:\n          otherProps?.['aria-label'] ||\n          otherProps?.name ||\n          labelText ||\n          className ||\n          testMetadata?.['data-testid'] ||\n          '',\n        value: [{ text: e.target.value }],\n      });\n    },\n    [\n      analyticsContext,\n      analyticsEventData,\n      className,\n      labelText,\n      onBlur,\n      otherProps,\n      testMetadata,\n    ],\n  );\n\n  const handleOnKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>): void => {\n      onKeyDown?.(e);\n\n      if (e.key !== 'Enter') return;\n\n      handleAnalyticsEvent({\n        analyticsContext,\n        analyticsEventData,\n        componentType: 'Input',\n        actionName: 'enter',\n        label:\n          otherProps?.['aria-label'] ||\n          otherProps?.name ||\n          labelText ||\n          className ||\n          testMetadata?.['data-testid'] ||\n          '',\n        value: [{ text: e.currentTarget.value }],\n      });\n    },\n    [\n      analyticsContext,\n      analyticsEventData,\n      className,\n      labelText,\n      otherProps,\n      testMetadata,\n      onKeyDown,\n    ],\n  );\n\n  return (\n    <input\n      {...otherProps}\n      onFocus={handleOnFocus}\n      onBlur={handleOnBlur}\n      onKeyDown={handleOnKeyDown}\n      className={inputClassNames}\n      required={required}\n      aria-required={required}\n      aria-label={labelText}\n      ref={inputRef}\n      type={type}\n      {...testMetadata}\n    />\n  );\n};\n\nexport default Input;\n","import {\n  ChangeEvent,\n  ComponentProps,\n  FC,\n  KeyboardEvent,\n  SyntheticEvent,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Button from '../Button';\nimport Input from '../Input';\n\n// Styles\nimport './Search.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface SearchProps {\n  /** Text for aria-label and placeholder */\n  labelText?: string;\n  /** Class name for search container */\n  className?: string;\n  /** Determine if search field should blend against dark nav styling */\n  inNavDark?: boolean;\n  /** Determine if search field should blend against light nav styling */\n  inNavLight?: boolean;\n  /** Determines if search field has an icon */\n  hasIcon?: boolean;\n  /** Icon class */\n  iconClass?: string;\n  /** Additional input props for Input, based on the inputComponent */\n  inputProps?: ComponentProps<typeof Input>;\n  /** value of search */\n  value: string;\n  /** show or hide a cancel button */\n  showCancelBtn?: boolean;\n  /** show an expandable search bar */\n  expandable?: boolean;\n  /** onChange to change search */\n  onChange: (value: string) => void;\n  /** onClear if parent component would like to do anything else after the clear */\n  onClear?: () => void;\n  /** onCancel if parent component would like to do anything else after canceling */\n  onCancel?: () => void;\n  /** function to be called when input is focused */\n  onFocus?: (e: SyntheticEvent) => void;\n  onKeyPress?: (e: KeyboardEvent<HTMLInputElement>) => void;\n  /** option to default focus the input on load */\n  isFocusOnLoad?: boolean;\n  /** Width of the Input */\n  width?: 'small' | 'medium' | 'large' | 'auto';\n  // Test IDs for component sections\n  testMetadata?: {\n    search?: TestMetadata;\n    searchButton?: TestMetadata;\n    searchInput?: TestMetadata;\n    searchIcon?: TestMetadata;\n    clearButton?: TestMetadata;\n  };\n}\n\nconst Search: FC<SearchProps> = ({\n  labelText = 'Search',\n  hasIcon = true,\n  iconClass = 'fa-search',\n  inNavDark,\n  inNavLight,\n  value,\n  showCancelBtn = true,\n  expandable = false,\n  onChange,\n  // noop\n  onClear = () => {\n    // noop\n  },\n  onCancel,\n  onKeyPress,\n  onFocus = () => {\n    // noop\n  },\n  className,\n  inputProps = {},\n  isFocusOnLoad = false,\n  width,\n  testMetadata = {\n    search: { 'data-testid': 'search' },\n    searchInput: { 'data-testid': 'searchInput' },\n    searchButton: { 'data-testid': 'searchButton' },\n    searchIcon: { 'data-testid': 'searchIcon' },\n    clearButton: { 'data-testid': 'clearButton' },\n  },\n  ...otherProps\n}) => {\n  const searchClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-search',\n        {\n          'sb-search_in-nav': inNavDark || inNavLight,\n          'sb-search_in-nav_dark': inNavDark,\n          'sb-search_in-nav_light': inNavLight,\n          'sb-search_with_icon': hasIcon,\n        },\n        className,\n      ),\n    [hasIcon, inNavDark, inNavLight, className],\n  );\n\n  const [expandableSearch, setExpandableSearch] = useState(expandable);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (isFocusOnLoad && inputRef.current) {\n      inputRef.current?.focus();\n    }\n  }, [inputRef, isFocusOnLoad]);\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    onChange(e.currentTarget.value);\n  };\n\n  const handleClear = (e: SyntheticEvent): void => {\n    if (inputRef && inputRef.current) {\n      inputRef.current.focus();\n    }\n    // clear input value\n    onChange('');\n    onClear();\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleCancel = (): void => {\n    if (onCancel) {\n      onCancel();\n    }\n    // clear input value\n    onChange('');\n    onClear();\n  };\n\n  const handleExpandeSearch = (): void => {\n    setExpandableSearch((prev) => !prev);\n  };\n\n  const inputClassName = useMemo(\n    () => classNames('sb-search__field__input', inputProps.className),\n    [inputProps.className],\n  );\n\n  return (\n    <div {...otherProps} className={searchClassNames} {...testMetadata?.search}>\n      {expandableSearch ? (\n        <Button\n          type=\"button\"\n          iconOnly\n          sizeType=\"small\"\n          styleType=\"promoted\"\n          iconType={iconClass}\n          onClick={handleExpandeSearch}\n          className=\"sb-search__button\"\n          {...testMetadata?.searchButton}\n        />\n      ) : (\n        <>\n          <div className=\"sb-search__input-container\">\n            <Input\n              labelText={labelText}\n              placeholder={labelText}\n              onChange={handleChange}\n              onKeyPress={onKeyPress}\n              inputRef={inputRef}\n              value={value}\n              onFocus={onFocus}\n              className={inputClassName}\n              autoFocus={expandable}\n              onBlur={() => expandable && handleExpandeSearch()}\n              width={width}\n              {...testMetadata?.searchInput}\n              {...inputProps}\n            />\n\n            {hasIcon && (\n              <i\n                className={`fas ${iconClass} sb-search__icon`}\n                {...testMetadata?.searchIcon}\n              />\n            )}\n\n            {value.length > 0 && (\n              <Button\n                type=\"button\"\n                iconOnly\n                styleType=\"demoted\"\n                iconType=\"fa-times-circle\"\n                labelText=\"Clear\"\n                className={classNames('sb-search__clear', {\n                  'sb-search__clear--shrink': showCancelBtn,\n                })}\n                onMouseDown={handleClear}\n                onClick={handleClear}\n                {...testMetadata?.clearButton}\n              />\n            )}\n          </div>\n\n          {showCancelBtn && value.length > 0 && (\n            <Button\n              type=\"button\"\n              styleType=\"demoted\"\n              sizeType=\"small\"\n              className=\"sb-search__cancel\"\n              onClick={handleCancel}\n            >\n              Cancel\n            </Button>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Search;\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","className","loadText","size","imageUrl","animation","location","testMetadata","otherProps","spinnerClassnames","useMemo","classNames","styles","maskImage","WebkitMaskImage","backgroundImage","role","style","Button","forwardRef","ref","colorType","styleType","labelText","iconType","iconPackage","iconPlacement","sizeType","iconOnly","children","shakeOnDisabledHover","disabled","isFetching","onClick","flush","analyticsEventData","isStackedButton","analyticsContext","useContext","AnalyticsContext","handleClick","useCallback","event","preventDefault","stopPropagation","handleAnalyticsEvent","componentType","actionName","label","toString","buttonClassNames","stackedButtonWrapperClassNames","loader","icon","undefined","title","displayName","inputRef","type","required","width","isError","bordered","isDisabled","inputClassNames","onFocus","onBlur","onKeyDown","handleOnFocus","e","name","text","target","handleOnBlur","handleOnKeyDown","currentTarget","hasIcon","iconClass","inNavDark","inNavLight","showCancelBtn","expandable","onChange","onClear","onCancel","onKeyPress","inputProps","isFocusOnLoad","search","searchInput","searchButton","searchIcon","clearButton","searchClassNames","useState","expandableSearch","setExpandableSearch","useRef","useEffect","current","focus","handleClear","handleExpandeSearch","prev","inputClassName","placeholder","autoFocus","length","onMouseDown"],"sourceRoot":""}