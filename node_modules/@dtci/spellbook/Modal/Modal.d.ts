import { FC, ReactNode, SyntheticEvent } from 'react';
import './Modal.scss';
import { TestMetadata } from 'types';
import { TAnalyticsEventData } from '@dtci/dash/analytics';
export interface ModalProps {
    className?: string;
    /** ID to identify modal */
    modalId?: string;
    /** Set text for modal header or ARIA label or ReactNode for entire header */
    headerText: string | ReactNode;
    /** Boolean to determine if header text should be visible */
    hideHeader?: boolean;
    /** Hide close button */
    hideClose?: boolean;
    /** Type of page overlay: blackout, whiteout */
    bodyOverlay?: 'blackout' | 'whiteout';
    /** Button label for primary action */
    primaryButton?: string;
    /** onChange event for primary action */
    primaryButtonAction?: (e: SyntheticEvent) => void;
    /** Button label for secondary action */
    secondaryButton?: string;
    /** onChange event for secondary action */
    secondaryButtonAction?: (e: SyntheticEvent) => void;
    /** Callback fired when the component requests to be closed */
    onClose?: () => void;
    /** Determine whether to use small buttons */
    smallButtons?: boolean;
    /** Determine where you want to horizontally align the modal: left, center, right */
    horizontalAlign?: 'left' | 'center' | 'right';
    /** Determine where you want to vertically align the modal: top, center, bottom */
    verticalAlign?: 'top' | 'center' | 'bottom';
    /** Determine where you want the header content to be horizontally aligned: space-between, center */
    headerAlign?: 'space-between' | 'center';
    /** Determine where you want your footer content to be horizontally aligned: left, center, right */
    footerAlign?: 'left' | 'center' | 'right' | 'space-between';
    /** Add custom classes to modal's wrapper. */
    modalClass?: string;
    /** Closes modal when you click outside */
    closeOnClickOutside?: boolean;
    /** Determines if you want the modal to close when escape is pressed */
    closeOnEscape?: boolean;
    /** Props to pass to the secondary button */
    secondaryButtonProps?: Record<string, unknown>;
    /** Props to pass to the primary button */
    primaryButtonProps?: Record<string, unknown>;
    /** Dialog custom class name */
    dialogClassName?: string;
    /** Dialog Body custom class name */
    dialogBodyClassName?: string;
    /** Custom footer component */
    footer?: ReactNode;
    /** Additional event information to pass to analytics tracking */
    analyticsEventData?: TAnalyticsEventData;
    testMetadata?: {
        modal?: TestMetadata;
        closeButton?: TestMetadata;
    };
}
declare const Modal: FC<ModalProps>;
export default Modal;
