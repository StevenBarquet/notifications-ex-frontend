import { KeyboardEvent, ReactNode, ReactElement } from 'react';
import { InputProps } from '../Input';
import { SearchProps } from '../Search';
import './AutoComplete.scss';
import { TestMetadata } from 'types';
export interface AutoCompleteProps<T> {
    /** Specify the input component to enter data, can be input, search or a custom component */
    inputComponent?: 'input' | 'search' | ReactNode;
    insetComponent?: ReactNode;
    /**  Class name */
    className?: string;
    /** Input Value */
    value: string;
    /** Event to fire when input changes */
    onChange: (query: string) => void;
    /** Additional input props for Input, based on the Input Component */
    inputProps?: Partial<InputProps>;
    /** Additional input props for Search, based on the Search Component */
    searchProps?: Partial<SearchProps>;
    /** The data to fill autocomplete options with */
    data: T[] | null;
    /** Minimum characters required before results are shown */
    minChars?: number;
    /** Renders a loader */
    isLoading?: boolean;
    /**  Will add hover states to results */
    isInteractive?: boolean;
    /** will show view results item */
    isShowingViewResults?: boolean;
    /**  Will add hover states to results */
    onOpenResults?: (value: string) => void;
    /** Render options with a custom react element */
    renderDataFunc: (data: T, index?: number) => JSX.Element;
    /** Filter data using this function, by default no filter */
    filterDataFunc?: (data: T) => boolean;
    /** Event fired when a key is pressed */
    onKeyPress?: (event: KeyboardEvent<HTMLInputElement>) => void;
    testMetadata?: {
        autoComplete?: TestMetadata;
        searchIcon?: TestMetadata;
    };
}
type AutoComplete = <T>(p: AutoCompleteProps<T>) => ReactElement<AutoCompleteProps<T>>;
declare const AutoComplete: AutoComplete;
export default AutoComplete;
