{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/slicedToArray\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"@dtci/triton/hooks\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/ToggleSwitch/ToggleSwitch.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/slicedToArray\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@dtci/triton/hooks\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import {\n  ButtonHTMLAttributes,\n  Children,\n  cloneElement,\n  CSSProperties,\n  DetailedHTMLProps,\n  isValidElement,\n  PropsWithChildren,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { useOnScreen } from '@dtci/triton/hooks';\n\n// Styles\nimport './ToggleSwitch.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface ToggleSwitchProps<T> {\n  /* Starting location of the switch (by value) */\n  initialValue?: T;\n  /* Custom class name(s) for component container */\n  className?: string;\n  /* Function to call on switch change that accepts the new value */\n  handleSwitchChange: (value: T) => void;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst ToggleSwitch = <T extends unknown>({\n  initialValue,\n  className,\n  children: childrenProp,\n  handleSwitchChange,\n  testMetadata = { 'data-testid': 'toggleSwitch' },\n  ...otherProps\n}: PropsWithChildren<ToggleSwitchProps<T>>): JSX.Element => {\n  // Current value of the toggle\n  const [value, setValue] = useState(initialValue);\n  // Container Ref for the switches\n  const switchListRef = useRef<HTMLDivElement>(null);\n  // Map values to child indecies\n  const valueToIndex = useMemo(() => new Map(), []);\n  // Highlight should only render when visible or it won't calculate the right position and size\n  const isOnScreen = useOnScreen(switchListRef);\n\n  // Get dimensions of switch component for styling\n  const getSwitchDimensions = useCallback(() => {\n    const switchsNode = switchListRef.current;\n\n    // Container dimensions\n\n    // Selected switch dimensions\n    let currentSwitchMeta;\n\n    if (switchsNode) {\n      const children = switchsNode.children;\n\n      if (children.length > 0) {\n        const currentSwitch =\n          (value !== undefined && children[valueToIndex.get(value)]) ||\n          children[0];\n        currentSwitchMeta = currentSwitch.getBoundingClientRect();\n      }\n    }\n\n    return {\n      switchsMeta: switchsNode?.getBoundingClientRect(),\n      currentSwitch: currentSwitchMeta,\n    };\n  }, [valueToIndex, value]);\n\n  const getSelectedStyle = (): CSSProperties => {\n    const { switchsMeta, currentSwitch } = getSwitchDimensions();\n    const startValue =\n      currentSwitch && switchsMeta ? currentSwitch.left - switchsMeta.left : 0;\n\n    return {\n      left: startValue,\n      width: currentSwitch?.width ?? 0,\n    };\n  };\n\n  const updateSwitchState = useCallback(\n    (value) => {\n      setValue(value);\n      handleSwitchChange(value);\n    },\n    [handleSwitchChange],\n  );\n\n  useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n\n  // Setup children with custom toggle switch logic (like event handlers)\n  const children = Children.map(childrenProp, (child, index) => {\n    if (!isValidElement(child)) {\n      console.error(\n        'Spellbook: ToggleSwitch - Invalid element provided',\n        child,\n      );\n      return null;\n    }\n\n    const childValue =\n      child.props.value === undefined ? index : child.props.value;\n    valueToIndex.set(childValue, index);\n    const selected = (!value && index === 0) || childValue === value;\n\n    return cloneElement(\n      child as React.ReactElement<\n        DetailedHTMLProps<\n          ButtonHTMLAttributes<HTMLInputElement>,\n          HTMLInputElement\n        >\n      >,\n      {\n        className: classNames(\n          child.props.className,\n          'sb-toggle-switch-element',\n          {\n            'sb-toggle-switch-selected': selected,\n          },\n        ),\n        onClick: updateSwitchState.bind(null, childValue),\n      },\n    );\n  });\n\n  const toggleSwitchClasses = useMemo(\n    () => classNames('sb-toggle-switch', className),\n    [className],\n  );\n\n  const selectedStyle = getSelectedStyle();\n\n  return (\n    <div {...otherProps} className={toggleSwitchClasses}>\n      <div\n        className=\"sb-toggle-switch-elements\"\n        ref={switchListRef}\n        {...testMetadata}\n      >\n        {children}\n      </div>\n      {isOnScreen && (\n        <span\n          className=\"sb-toggle-switch-highlight\"\n          style={{\n            ...selectedStyle,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ToggleSwitch;\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","initialValue","className","childrenProp","children","handleSwitchChange","testMetadata","otherProps","useState","setValue","switchListRef","useRef","valueToIndex","useMemo","Map","isOnScreen","useOnScreen","getSwitchDimensions","useCallback","currentSwitchMeta","switchsNode","current","length","undefined","getBoundingClientRect","switchsMeta","currentSwitch","updateSwitchState","useEffect","Children","child","index","isValidElement","console","error","childValue","props","set","selected","cloneElement","classNames","onClick","bind","toggleSwitchClasses","selectedStyle","left","width","ref","style"],"sourceRoot":""}