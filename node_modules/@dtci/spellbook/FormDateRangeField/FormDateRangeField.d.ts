/// <reference types="react" />
import { Path, RegisterOptions } from 'react-hook-form';
import { FormFieldProps } from '../FormField';
import './FormDateRangeField.scss';
import { DateInputProps } from 'DateInput';
import { TestMetadata } from 'types';
export type FormDateRangeValue = {
    startDate?: Date;
    endDate?: Date;
};
export interface FormDateRangeFieldProps<I extends Record<string, unknown>> {
    /** Class name */
    className?: string;
    /** Disable field (greyed out) */
    disabled?: boolean;
    /** Name for field (Unique in the form) */
    fieldName: Path<I>;
    /** Sets helper */
    helper?: string;
    labelFor?: string;
    /** Display name for field */
    labelText?: string;
    /** Tooltip icon and hover text */
    tooltip?: string[];
    /** Mark field required (*) */
    required?: boolean;
    /** Sets test id */
    testMetadata?: {
        wrapper?: TestMetadata;
        dateRangeInput?: {
            startDate?: Record<string, TestMetadata>;
            endDate?: Record<string, TestMetadata>;
        };
    };
    /** Rules passed down to control */
    rules?: RegisterOptions;
    /** Format of the date */
    dateFormat?: string;
    defaultValue?: FormDateRangeValue;
    orientation?: 'stacked' | 'inline';
    inputDateProps?: DateInputProps;
    startDateProps?: DateInputProps;
    endDateProps?: DateInputProps;
    startDatelabelText?: string;
    startDateContainerClassName?: string;
    endDatelabelText?: string;
    endDateContainerClassName?: string;
}
declare const FormDateRangeField: <I extends Record<string, unknown>>({ className, disabled, fieldName, helper, labelFor, labelText, tooltip, required, testMetadata, rules, dateFormat, defaultValue, inputDateProps, orientation, startDatelabelText, startDateContainerClassName, endDatelabelText, endDateContainerClassName, startDateProps, endDateProps, readOnly, ...otherProps }: FormDateRangeFieldProps<I> & Partial<FormFieldProps<I>>) => JSX.Element;
export default FormDateRangeField;
