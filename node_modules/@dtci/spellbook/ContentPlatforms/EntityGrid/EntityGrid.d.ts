import { FC, SyntheticEvent } from 'react';
import { DataProps, MasterDetailProps, StandardTableCommonProps } from '../StandardTable';
import { ButtonProps } from '../../Button';
import { DataUtilityWrapperConfig, Option, TestMetadata } from '../../types';
import { FilterChangedEvent, GridApi, GridReadyEvent } from 'ag-grid-community';
import './EntityGrid.scss';
export type CustomGridAction = ButtonProps & {
    onClick: (e: SyntheticEvent, gridApi?: GridApi) => void;
};
export interface EntityGridProps {
    onGridReady?: (params: GridReadyEvent) => void;
    onFilterChanged?: (event: FilterChangedEvent) => void;
    title?: string;
    entityName?: string;
    utility: Pick<DataUtilityWrapperConfig, 'dataDefinition'>;
    customActions?: CustomGridAction[];
    table: Pick<StandardTableCommonProps, 'options' | 'selectable' | 'dataGridApiRef' | 'dataGridColumnApiRef' | 'onGridReady' | 'onFirstDataRendered' | 'moveableColumns'> & DataProps & MasterDetailProps;
    /** Class name for bar */
    className?: string;
    portal?: HTMLElement | null;
    exportable?: boolean;
    exportOptions?: Option[];
    onExport?: (type: string, gridApi?: GridApi) => void;
    isLoading?: boolean;
    isExporting?: boolean;
    isFetching?: boolean;
    noResultsMessage?: string;
    moreActions?: Option[];
    bulkActions?: Option[];
    onMoreActionSelected?: (selected: Option) => void;
    onBulkActionSelected?: (action: Option, selected: Record<string, unknown>[], gridApi?: GridApi) => void;
    ids?: {
        bulk?: string;
        sort?: string;
        display?: string;
        export?: string;
    };
    testMetadata?: {
        wrapper?: TestMetadata;
        table?: TestMetadata;
    };
}
declare const EntityGrid: FC<EntityGridProps>;
export default EntityGrid;
