import { ColDef, ICellRendererParams } from 'ag-grid-community';
import { SyntheticEvent } from 'react';
import { BadgeProps } from 'Badge';
import { Option, TestMetadata } from '../../types';
export type CommonColumnProps = Pick<ColDef, 'field' | 'colId' | 'valueGetter' | 'valueFormatter' | 'hide' | 'filter' | 'filterParams' | 'headerName' | 'headerClass' | 'cellClass' | 'cellRenderer' | 'cellRendererParams' | 'sortable' | 'sort' | 'comparator' | 'width' | 'minWidth' | 'maxWidth' | 'flex' | 'editable' | 'rowGroup' | 'rowGroupIndex' | 'cellEditor' | 'cellEditorParams' | 'valueParser'>;
export type Column = ColumnTypes & FilterTypes & {
    definition?: CommonColumnProps;
} & MasterDetailColumnDef;
export type ColumnTypes = StandardColumn | PrimaryColumn | TypeColumn | PillboxListColumn | LinkColumn | CustomColumn;
export type FilterTypes = StandardFilter | ListFilter;
export interface StandardColumn extends MasterColumnCellRenderedParam {
    type?: 'text' | 'id' | 'expandable';
    secondaryField?: never;
    badgeProps?: never;
}
export type MasterDetailColumnDef = {
    masterColumn?: boolean;
};
export interface MasterColumnCellRenderedParam {
    isMasterColumn?: boolean;
    onMasterDetailCellMouseOver?: (rowData: ICellRendererParams['data']) => void;
}
export interface PrimaryColumn extends MasterColumnCellRenderedParam {
    type: 'primary';
    secondaryField?: string | ((rowData: ICellRendererParams['data']) => string);
}
export interface TypeColumn extends MasterColumnCellRenderedParam {
    type: 'type';
    badgeProps?: (rowData?: ICellRendererParams['data']) => BadgeProps;
}
export interface PillboxListColumn extends MasterColumnCellRenderedParam {
    type: 'pillbox-list';
    groupItems?: boolean;
    badgeProps?: (rowData?: ICellRendererParams['data']) => BadgeProps;
    countBadgeProps?: (rowData?: ICellRendererParams['data']) => BadgeProps;
    appendTo?: Element | 'parent' | ((ref: Element) => Element) | undefined;
}
export interface LinkColumn extends MasterColumnCellRenderedParam {
    type: 'link';
    onClick?: (rowData: ICellRendererParams['data']) => void;
    linkTitle?: string;
}
export interface CustomColumn extends MasterColumnCellRenderedParam {
    type: 'custom';
}
export interface StandardFilter {
    filter?: 'text' | 'date' | false;
    filters?: never;
    objKey?: never;
}
export interface ListFilter {
    filter: 'list';
    filters: Option[];
    objKey?: string;
}
export type CellRendererFunc<T = void> = (params: ICellRendererParams & T) => JSX.Element | null;
export interface GridOption {
    title: string;
    icon: string;
    action: (rowData: ICellRendererParams['data'], e?: SyntheticEvent) => void;
    testMetadata?: TestMetadata;
    isEnabled?: (rowData: ICellRendererParams['data']) => boolean;
}
export type GridMoreOption = Pick<GridOption, 'title' | 'action' | 'testMetadata' | 'isEnabled'>;
export interface OptionPopover {
    label: string;
    value: string;
}
export interface GridModel<T> {
    state: T;
}
export interface DateFilterValue {
    startDate?: Date;
    endDate?: Date;
}
