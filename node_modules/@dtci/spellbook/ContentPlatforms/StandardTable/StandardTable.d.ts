import { MutableRefObject } from 'react';
import { ColumnApi, FilterChangedEvent, FirstDataRenderedEvent, GridApi, GridReadyEvent, ICellRendererParams, IServerSideGetRowsParams, RowEditingStartedEvent, RowEditingStoppedEvent, RowValueChangedEvent, SelectionChangedEvent } from 'ag-grid-community';
import { Column, GridMoreOption, GridOption } from './types';
import { AgGridReactProps } from 'ag-grid-react';
import { TestMetadata } from '../../types';
import './StandardTable.scss';
export type StandardTableProps = StandardTableCommonProps & DataProps & MasterDetailProps;
export interface StandardTableCommonProps {
    /**
     *  Column Definitions
     */
    columns: Column[];
    /**
     *  Grid ready event
     */
    onGridReady?: (params: GridReadyEvent) => void;
    /**
     * First Data Rendered
     */
    onFirstDataRendered?: (params: FirstDataRenderedEvent) => void;
    /**
     * On Select Change
     */
    onSelectionChanged?: (event: SelectionChangedEvent) => void;
    /**
     * Filter has been modified and applied.
     */
    onFilterChanged?: (event: FilterChangedEvent) => void;
    /**
     * Class name
     */
    className?: string;
    /**
     * Grid class name
     */
    gridClassName?: string;
    /**
     * Enable sorting on columns by default
     */
    sortable?: boolean;
    /**
     * Enable filtering on columns by default
     */
    filterable?: boolean;
    /**
     * Add checkbox select column
     */
    selectable?: boolean;
    /**
     * Defines if the row selection is multiple or single.
     */
    selectMode?: 'multiple' | 'single';
    /**
     * Enable editing on columns by default
     */
    editable?: boolean;
    /**
     * Enable paste functionality
     */
    pasteable?: boolean;
    /**
     * Autoheight using DomLayout property - allows grid to auto-size it's height to fit rows
     */
    autoHeight?: boolean;
    /**
     * Enables moveable columns
     */
    moveableColumns?: boolean;
    /**
     * Add options column
     */
    options?: {
        pinned?: boolean;
        options: GridOption[];
        moreOptions?: GridMoreOption[];
    };
    /**
     * Data Grid API ref
     */
    dataGridApiRef?: MutableRefObject<GridApi | null>;
    /**
     * Data Grid Column API ref
     */
    dataGridColumnApiRef?: MutableRefObject<ColumnApi | null>;
    /**
     * Test metadata
     */
    testMetadata?: {
        container?: TestMetadata;
        moreOptions?: TestMetadata;
    };
    /**
     * Portal element to be used by this component.
     */
    portal?: HTMLElement | null;
    noResultsMessage?: string;
    isFetching?: boolean;
    /** Triggers when row is submitted on edit mode */
    onRowValueChanged?: (event: RowValueChangedEvent) => void;
    /** Triggers when row enters edit mode */
    onRowEditingStopped?: (event: RowEditingStoppedEvent) => void;
    /** Triggers when row exists edit mode */
    onRowEditingStarted?: (event: RowEditingStartedEvent) => void;
    /** Should edit mode be cell (no value) or row (fullRow) */
    editType?: 'fullRow';
    /** Allows you to process cells from the clipboard. Handy if for example you have number fields, and want to block non-numbers from getting into the grid. */
    processCellFromClipboard?: AgGridReactProps['processCellFromClipboard'];
    /** Allows complete control of the paste operation, including cancelling the operation  or replacing the data with other data. */
    processDataFromClipboard?: AgGridReactProps['processDataFromClipboard'];
}
export type DataProps = {
    /**
     * Sets the StandardTable mode to be client or server side.
     */
    mode?: 'client';
    /**
     * When mode is `client` set this prop to define the data StandardTable will be populated with.
     */
    rowData: AgGridReactProps['rowData'];
    /**
     * When mode is `server` this function will be called every time StandardTable request more data.
     */
    loadData?: never;
    /**
     * When mode is `server` this will determine how many records will be rendered by page.
     */
    pageSize?: never;
    /**
     * When mode is `server` this will determine how many total records will be rendered.
     */
    totalCount?: never;
} | {
    mode: 'server';
    rowData?: never;
    loadData: (params: IServerSideGetRowsParams) => void;
    pageSize?: number;
    totalCount?: number;
};
export type MasterDetailProps = {
    /**
     * Enables Master/Detail mode. Set a column as `masterColumn` in column configuration to be able to expand details.
     */
    masterDetail: true;
    /**
     * When `masterDetail` is enabled use it prop to provide a custom detailCellRenderer to use when a master row is expanded.
     */
    detailCellRenderer: AgGridReactProps['detailCellRenderer'];
    /**
     * When `masterDetail` is enabled, we can optionally use this prop to control the height of a detail row. Default to `auto`.
     * - > Use `auto` to calculate the height automatically. This option will turn off virtualization, do not use it if you have many rows (eg 100+).
     * - > Pass a `number` to define a fixed height in pixels.
     * - > Pass a `function` to calculate the row height dynamically (only runs on detail rows). Function should return a positive number of pixels, or return null/undefined to use the default row height.
     */
    masterDetailRowHeight?: 'auto' | AgGridReactProps['detailRowHeight'] | AgGridReactProps['getRowHeight'];
    /**
     *  Mouse entered cell on master column (useful for pre-fetching details)
     */
    onMasterDetailCellMouseOver?: (rowData: ICellRendererParams['data']) => void;
    /**
     * Chooses whether something is a master row or not
     */
    isRowMaster?: AgGridReactProps['isRowMaster'];
} | {
    masterDetail?: false;
    detailCellRenderer?: never;
    onMasterDetailCellMouseOver?: never;
    masterDetailRowHeight?: never;
    isRowMaster?: never;
};
declare const StandardTable: React.FC<StandardTableProps>;
export default StandardTable;
