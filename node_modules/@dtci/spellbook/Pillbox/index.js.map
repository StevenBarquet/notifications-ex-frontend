{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/Image/Image.tsx","webpack://@dtci/spellbook/./src/_utils/config.ts","webpack://@dtci/spellbook/./src/Icon/Icon.tsx","webpack://@dtci/spellbook/./src/Badge/Badge.tsx","webpack://@dtci/spellbook/external commonjs \"@dtci/dash/analytics\"","webpack://@dtci/spellbook/./src/Spinner/Spinner.tsx","webpack://@dtci/spellbook/./src/Button/Button.tsx","webpack://@dtci/spellbook/./src/Pillbox/Pillbox.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import { ComponentProps, forwardRef } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Image.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\ntype Props = ComponentProps<'img'>;\nexport type ImageProps = ComponentProps<typeof Image> & {\n  testMetadata?: TestMetadata;\n};\n\nconst Image = forwardRef<HTMLImageElement, Props>(function InnerImage(\n  { className, alt = '', ...otherProps },\n  ref,\n) {\n  return (\n    <img\n      alt={alt}\n      className={classNames('sb-image', className)}\n      ref={ref}\n      {...otherProps}\n    />\n  );\n});\n\nexport default Image;\n","export const ASSET_URL = 'https://dtci-spellbook.s3-us-west-2.amazonaws.com';\n\nexport const IMAGE_URL = `${ASSET_URL}/img`;\n\nexport const ICON_URL = `${IMAGE_URL}/icons`;\n\nexport const STORIES_URL =\n  'https://gitlab.disney.com/dtci-bp-software-solutions/ui/spellbook/-/blob/develop/src';\n","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Image from '../Image';\n\n// Styles\nimport './Icon.scss';\n\n// Types\nimport { FontAwesomePackage, TestMetadata } from 'types';\n\n// Utils\nimport { ICON_URL } from '../_utils/config';\n\nexport interface IconProps {\n  /**  Whether the component is from font-awesome (fa) or hosted on AWS (aws)*/\n  iconType: 'fa' | 'aws';\n  /** Size override for the icon: smaller (12x12), small (16x16), medium (20x20), large (32x32), larger (48x48) */\n  size?: 'smaller' | 'small' | 'medium' | 'large' | 'larger' | 'auto';\n  /**  The name of the font awesome icon OR an AWS hosted icon */\n  iconName: string;\n  /** Package used for font awesome icons */\n  faPackage?: FontAwesomePackage;\n  /** Class name that goes on the icon */\n  className?: string;\n  /** Label text to display */\n  altText?: string;\n  /** Label text for hover */\n  title?: string;\n  /** Sets test id */\n  testMetadata?: {\n    iconAWSImage?: TestMetadata;\n    iconFASpan?: TestMetadata;\n  };\n}\n\nconst Icon: FC<IconProps> = ({\n  size,\n  iconType,\n  faPackage = 'fab',\n  iconName,\n  className,\n  altText,\n  title,\n  testMetadata = {\n    iconAWSImage: { 'data-testid': 'aws-icon' },\n    iconFASpan: { 'data-testid': 'fa-icon' },\n  },\n}) => {\n  const iconClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-icon',\n        {\n          'sb-icon__size-auto': size === 'auto',\n          'sb-icon__size-smaller': size === 'smaller',\n          'sb-icon__size-small': size === 'small',\n          'sb-icon__size-medium': size === 'medium',\n          'sb-icon__size-large': size === 'large',\n          'sb-icon__size-larger': size === 'larger',\n        },\n        className,\n      ),\n    [size, className],\n  );\n\n  if (iconType === 'aws') {\n    return (\n      <Image\n        className={iconClassNames}\n        alt={altText}\n        title={title}\n        {...testMetadata?.iconAWSImage}\n        src={`${ICON_URL}/${iconName}.svg`}\n      />\n    );\n  } else {\n    return (\n      <>\n        <span\n          {...testMetadata?.iconFASpan}\n          className={classNames([\n            `${faPackage} ${iconName} ${iconClassNames}`,\n            faPackage,\n            iconName,\n          ])}\n          aria-label={altText}\n          title={title}\n        />\n      </>\n    );\n  }\n};\n\nexport default Icon;\n","import { CSSProperties, FC, SyntheticEvent, useMemo } from 'react';\nimport classNames from 'classnames';\nimport Icon from '../Icon';\n\n// Styles\nimport './Badge.scss';\n\n// Types\nimport { BadgeTypes, TestMetadata } from 'types';\n\nexport interface BadgeProps {\n  /** Class name */\n  className?: string;\n  /** Style */\n  style?: CSSProperties;\n  /** Shape type: dot, circle, pill */\n  shape?: 'dot' | 'circle' | 'pill' | 'status';\n  /** Size: small (height: 24px), medium (height: 32px), large (height: 40px) */\n  size?: 'smaller' | 'small' | 'medium' | 'large';\n  /** Color: primary, secondary, base, error, success, warning*/\n  color?: BadgeTypes;\n  /** Sets a light background with dark text  */\n  light?: boolean;\n  /** Role */\n  badgeRole?: string;\n  /** Determine if dismissable */\n  showClose?: boolean;\n  /** Close button function */\n  onClose?: (e: SyntheticEvent) => void;\n  // Test IDs for sections of Badge\n  testMetadata?: TestMetadata;\n  /** Width: large is 16ch with ellipsis*/\n  width?: 'large' | 'auto';\n  /** Current status  */\n  title?: string;\n  /** Icon */\n  iconOnly?: boolean;\n}\n\nconst Badge: FC<BadgeProps> = ({\n  className,\n  style,\n  shape,\n  size,\n  color,\n  light,\n  badgeRole,\n  children,\n  showClose,\n  testMetadata,\n  width,\n  title,\n  iconOnly,\n  ...otherProps\n}) => {\n  const badgeClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-badge',\n        {\n          'sb-badge_dot': !iconOnly && shape === 'dot',\n          'sb-badge_circle': shape === 'circle' || iconOnly,\n          'sb-badge_status': !iconOnly && shape === 'status',\n          'sb-badge_pill': (!shape && !iconOnly) || shape === 'pill',\n          'sb-badge_smaller': size === 'smaller',\n          'sb-badge_small': !size || size === 'small',\n          'sb-badge_medium': size === 'medium',\n          'sb-badge_large': size === 'large',\n          'sb-badge_primary': color === 'primary',\n          'sb-badge_secondary': color === 'secondary',\n          'sb-badge_base': color === 'base',\n          'sb-badge_error': color === 'error',\n          'sb-badge_success': color === 'success',\n          'sb-badge_warning': color === 'warning',\n          'sb-badge_active': color === 'active',\n          'sb-badge_light': light,\n          'sb-badge_closable': showClose,\n          'sb-badge_width-auto': width === 'auto',\n          'sb-badge_width-large': width === 'large',\n          'sb-badge_icon': iconOnly,\n        },\n        className,\n      ),\n    [className, color, light, shape, showClose, size, width, iconOnly],\n  );\n\n  return (\n    <div\n      {...otherProps}\n      className={badgeClassNames}\n      style={style}\n      role={badgeRole}\n      title={title}\n      {...testMetadata}\n    >\n      {shape === 'status' && (\n        <Icon\n          className=\"sb-badge_status-icon\"\n          iconType=\"fa\"\n          faPackage=\"fas\"\n          iconName=\"fa-circle\"\n          size=\"smaller\"\n        />\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default Badge;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@dtci/dash/analytics\");","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Spinner.scss';\n\n// Types\nimport {\n  AnimationOptions,\n  LocationOptions,\n  SizeOptions,\n  TestMetadata,\n} from '../types';\n\nexport interface SpinnerProps {\n  /** Add a class to the spinner */\n  className?: string;\n  /** Loading text for screen readers */\n  loadText?: string;\n  /** Size: smaller, small, medium (default), large */\n  size?: SizeOptions;\n  /** Full URL to a custom image you would like to use */\n  imageUrl?: string;\n  /** Animation: spin (default), bounce, rock, wobble */\n  animation?: AnimationOptions;\n  /** Location: mask, background */\n  /** Mask can break some animations but allows you to change the color of the icon. Use background if Mask is causing problems. */\n  location?: LocationOptions;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Spinner: FC<SpinnerProps> = ({\n  className,\n  loadText = 'Loading...',\n  size = 'medium',\n  imageUrl,\n  animation = 'spin',\n  location = 'mask',\n  testMetadata,\n  ...otherProps\n}) => {\n  const spinnerClassnames = useMemo(\n    () =>\n      classNames(\n        `sb-spinner_${location}`,\n        `sb-spinner_animate_${animation}`,\n        `sb-spinner_${size}`,\n      ),\n    [size, animation, location],\n  );\n\n  let styles = {};\n  if (imageUrl) {\n    if (location === 'mask') {\n      styles = {\n        maskImage: `url(${imageUrl})`,\n        WebkitMaskImage: `url(${imageUrl})`,\n      };\n    } else {\n      styles = {\n        backgroundImage: `url(${imageUrl})`,\n      };\n    }\n  }\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames('sb-spinner', className)}\n      role=\"alert\"\n      aria-live=\"assertive\"\n      {...testMetadata}\n    >\n      <p className=\"sb-spinner-load-text\">{loadText}</p>\n      <div\n        className={spinnerClassnames}\n        style={styles}\n        data-testid=\"spinner-mask\"\n      />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import {\n  ButtonHTMLAttributes,\n  DetailedHTMLProps,\n  FC,\n  HTMLProps,\n  MouseEvent,\n  MouseEventHandler,\n  forwardRef,\n  useCallback,\n  useMemo,\n  useContext,\n} from 'react';\nimport classNames from 'classnames';\n\n// Analytics\nimport {\n  AnalyticsContext,\n  TAnalyticsEventData,\n  handleAnalyticsEvent,\n} from '@dtci/dash/analytics';\n\n// Components\nimport Spinner from '../Spinner';\n\n// Styles\nimport './Button.scss';\n\n// Types\nimport { FontAwesomePackage, TestMetadata } from 'types';\n\nexport interface ButtonProps\n  extends DetailedHTMLProps<\n    ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  > {\n  /** Set the button style: promoted (default), standard, demoted, link */\n  styleType?: 'promoted' | 'standard' | 'demoted' | 'link';\n  /** Set the button color: primary (default), secondary, success, error, warning */\n  colorType?: 'primary' | 'secondary' | 'success' | 'error' | 'warning';\n  /** Set the icon position: before (default), after, stacked */\n  iconPlacement?: 'before' | 'after' | 'stacked';\n  /** Can change the size of the button: smaller, small, large */\n  sizeType?: 'smaller' | 'small' | 'large' | 'auto';\n  /** Name of Font Awesome icon to show or custom icon component */\n  iconType?: string | JSX.Element;\n  /** Package of Font Awesome icon */\n  iconPackage?: FontAwesomePackage;\n  /** Boolean to determine if button has an icon and no label */\n  iconOnly?: boolean;\n  /** Set label text for accessibility, should match button text **/\n  labelText?: string;\n  /** shakeOnDisabledHover */\n  shakeOnDisabledHover?: boolean;\n  /** Indicates if button should be disabled */\n  disabled?: boolean;\n  /** Indicates an async loading state */\n  isFetching?: boolean;\n  /** onClick event handler  */\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  // Test IDs for sections of Button\n  testMetadata?: TestMetadata;\n  /** Border Flush */\n  flush?: 'left' | 'right' | 'flush';\n  /** Additional event information to pass to analytics tracking */\n  analyticsEventData?: TAnalyticsEventData;\n}\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      colorType = 'primary',\n      styleType = 'promoted',\n      labelText,\n      iconType,\n      iconPackage = 'fas',\n      iconPlacement = 'before',\n      sizeType,\n      iconOnly,\n      children,\n      shakeOnDisabledHover,\n      disabled,\n      isFetching = false,\n      onClick,\n      testMetadata,\n      flush,\n      analyticsEventData,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const isStackedButton = iconPlacement === 'stacked';\n\n    const analyticsContext = useContext(AnalyticsContext);\n\n    const handleClick = useCallback(\n      (event: MouseEvent<HTMLButtonElement>) => {\n        if (isFetching) {\n          event.preventDefault();\n          event.stopPropagation();\n          return;\n        }\n        onClick?.(event);\n        handleAnalyticsEvent({\n          analyticsContext,\n          analyticsEventData,\n          componentType: 'Button',\n          actionName: 'click',\n          label:\n            otherProps?.['aria-label'] ||\n            labelText ||\n            children?.toString() ||\n            iconType?.toString() ||\n            '',\n        });\n      },\n      [\n        isFetching,\n        onClick,\n        analyticsContext,\n        otherProps,\n        labelText,\n        children,\n        iconType,\n        analyticsEventData,\n      ],\n    );\n\n    const buttonClassNames = useMemo(\n      () =>\n        classNames(\n          'sb-button',\n          {\n            ['sb-button_' + colorType]: colorType,\n            ['sb-button_' + styleType]: styleType,\n            ['sb-button_' + sizeType]: sizeType,\n            ['sb-button_icon-' + iconPlacement]: iconType && iconPlacement,\n            'sb-button_icon-only': iconOnly,\n            'sb-button_no-icon': !iconType,\n            'sb-button_fetching': isFetching,\n            'sb-button_disabled': isStackedButton && disabled, // only stacked needs to have a class for disabled\n            'sb-shake-on-disabled': shakeOnDisabledHover,\n            'sb-button_async': isFetching,\n            'sb-button__flush-right': flush === 'right',\n            'sb-button__flush': flush === 'flush',\n            'sb-button__flush-left': flush === 'left',\n          },\n          className,\n        ),\n      [\n        colorType,\n        styleType,\n        iconPlacement,\n        iconOnly,\n        shakeOnDisabledHover,\n        className,\n        disabled,\n        isStackedButton,\n        sizeType,\n        isFetching,\n        iconType,\n        flush,\n      ],\n    );\n\n    const stackedButtonWrapperClassNames = useMemo(\n      () =>\n        classNames('sb-stacked-wrapper', {\n          'sb-stacked-wrapper-disabled': disabled,\n        }),\n      [disabled],\n    );\n\n    const loader = (\n      <div className=\"sb-button_spinner-container\">\n        <Spinner size=\"small\" className=\"sb-button_spinner\" />\n      </div>\n    );\n\n    const icon = (\n      <span className=\"sb-button_icon-container\">\n        {typeof iconType === 'string' ? (\n          <>\n            {isFetching && loader}\n            <i\n              className={`${iconPackage} ${iconType} sb-button_icon`}\n              data-testid={\n                testMetadata?.['data-testid'] ? 'button-icon' : undefined\n              }\n            />\n          </>\n        ) : (\n          <>\n            {isFetching && loader}\n            <span className=\"sb-button_icon\">{iconType}</span>\n          </>\n        )}\n      </span>\n    );\n\n    return (\n      <>\n        {!isStackedButton && (\n          <button\n            {...otherProps}\n            ref={ref}\n            className={buttonClassNames}\n            aria-label={labelText}\n            title={labelText}\n            disabled={disabled}\n            onClick={handleClick}\n            {...testMetadata}\n          >\n            {iconType &&\n              (iconOnly || !iconPlacement || iconPlacement === 'before') &&\n              icon}\n\n            {!iconOnly && <span className=\"sb-button-text\">{children}</span>}\n            {isFetching && !iconType && loader}\n            {iconType && !iconOnly && iconPlacement === 'after' && icon}\n          </button>\n        )}\n\n        {isStackedButton && (\n          <button\n            {...otherProps}\n            disabled={disabled}\n            aria-label={labelText}\n            ref={ref}\n            title={labelText}\n            className={stackedButtonWrapperClassNames}\n            onClick={handleClick}\n          >\n            <span className={buttonClassNames}>{icon}</span>\n            <div className=\"sb-stacked-label\">{children}</div>\n          </button>\n        )}\n      </>\n    );\n  },\n);\n\nButton.displayName = 'Button';\n\nexport default Button as FC<HTMLProps<HTMLButtonElement> & ButtonProps>;\n","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Badge, { BadgeProps } from '../Badge';\nimport Button from '../Button';\n\n// Styles\nimport './Pillbox.scss';\n\nexport type PillboxProps = BadgeProps;\n\nconst Pillbox: FC<PillboxProps> = ({\n  children,\n  className,\n  showClose = true,\n  shape = 'pill',\n  size = 'small',\n  testMetadata,\n  width = 'auto',\n  onClose,\n  ...otherProps\n}) => {\n  const pillboxClassNames = useMemo(\n    () => classNames(showClose ? 'sb-pillbox__badge' : '', className),\n    [showClose, className],\n  );\n  return (\n    <Badge\n      {...otherProps}\n      shape={shape}\n      size={size}\n      width={width}\n      className={pillboxClassNames}\n      {...testMetadata}\n    >\n      {children}\n      {showClose && (\n        <Button\n          iconOnly\n          iconType=\"fa-times\"\n          labelText=\"Remove\"\n          styleType=\"demoted\"\n          sizeType=\"small\"\n          className=\"sb-pillbox__remove\"\n          onClick={onClose}\n        />\n      )}\n    </Badge>\n  );\n};\n\nexport default Pillbox;\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","Image","forwardRef","ref","className","alt","otherProps","classNames","IMAGE_URL","ICON_URL","size","iconType","faPackage","iconName","altText","title","testMetadata","iconAWSImage","iconFASpan","iconClassNames","useMemo","src","style","shape","color","light","badgeRole","children","showClose","width","iconOnly","badgeClassNames","role","loadText","imageUrl","animation","location","spinnerClassnames","styles","maskImage","WebkitMaskImage","backgroundImage","Button","colorType","styleType","labelText","iconPackage","iconPlacement","sizeType","shakeOnDisabledHover","disabled","isFetching","onClick","flush","analyticsEventData","isStackedButton","analyticsContext","useContext","AnalyticsContext","handleClick","useCallback","event","preventDefault","stopPropagation","handleAnalyticsEvent","componentType","actionName","label","toString","buttonClassNames","stackedButtonWrapperClassNames","loader","icon","undefined","displayName","onClose","pillboxClassNames"],"sourceRoot":""}