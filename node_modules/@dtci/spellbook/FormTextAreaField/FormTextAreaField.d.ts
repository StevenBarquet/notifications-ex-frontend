/// <reference types="react" />
import { RegisterOptions, Path } from 'react-hook-form';
import { FormFieldProps } from '../FormField';
import { TextAreaProps } from '../TextArea';
import { TestMetadata } from 'types';
import './FormTextAreaField.scss';
export interface FormTextAreaFieldProps<I extends Record<string, unknown>> {
    /** Name for field (Unique in the form) */
    fieldName: Path<I>;
    /** Display name for field */
    labelText?: string;
    /** Tooltip icon and hover text */
    tooltip?: string[];
    /** Mark field required (*) */
    required?: boolean;
    /** Disable field (greyed out) */
    disabled?: boolean;
    /** Display name for field */
    helper?: string;
    /** Class name */
    className?: string;
    /** Min length of characters required */
    minLength?: number;
    /** Max length of characters required */
    maxLength?: number;
    /** Additional textarea props for TextArea, based on the TextArea Component */
    textAreaProps?: Partial<TextAreaProps>;
    /** Sets test id */
    testMetadata?: {
        wrapper?: TestMetadata;
        textarea?: TestMetadata;
    };
    /** Default value from form */
    defaultValue?: string;
    /** Width of the Text Area */
    width?: 'small' | 'medium' | 'large' | 'auto';
    /** Rules to pass down to control */
    rules?: RegisterOptions;
}
declare const FormTextAreaField: <I extends Record<string, unknown>>({ fieldName, labelText, tooltip, required, testMetadata, defaultValue, rules, helper, maxLength, minLength, textAreaProps, readOnly, truncate, ...otherProps }: FormTextAreaFieldProps<I> & Partial<FormFieldProps<I>>) => JSX.Element;
export default FormTextAreaField;
