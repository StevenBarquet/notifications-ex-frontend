/// <reference types="react" />
import { FormFieldProps } from '../FormField';
import { TestMetadata, TypographyVariants } from 'types';
import { Path } from 'react-hook-form';
export interface FormReadOnlyFieldProps<I extends Record<string, unknown>> {
    /** Name for field (Unique in the form) */
    fieldName: Path<I>;
    /** Display name for field */
    labelText?: string;
    /** Tooltip icon and hover text */
    tooltip?: string[];
    /** Display name for field */
    helper?: string;
    /** Class name */
    className?: string;
    /** Variant option for typography component */
    variant?: TypographyVariants;
    /** Default value to use */
    defaultValue?: string;
    /** Sets test id */
    testMetadata?: {
        wrapper?: TestMetadata;
        input?: TestMetadata;
    };
    /** Control text overflow behavior, truncate to add ellipsis and complete text on hover, wrap to wrap text  */
    truncate?: 'truncate' | 'wrap';
}
declare const FormReadOnlyField: <I extends Record<string, unknown>>({ fieldName, labelText, tooltip, required, helper, variant, testMetadata, defaultValue, truncate, ...otherProps }: FormReadOnlyFieldProps<I> & Partial<FormFieldProps<I>>) => JSX.Element;
export default FormReadOnlyField;
