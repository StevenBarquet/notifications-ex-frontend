import * as Yup from 'yup';
import { BaseFieldType, CheckboxFieldOption, Field, FormOptions, FormSchema, ParseSchemaState, SchemaState, ValidatorOptions } from '../types';
export declare const createField: <I extends Record<string, unknown>, N = BaseFieldType>(field: Field<I, N>, validators: ValidatorOptions<I, N>) => Yup.AnySchema;
export declare const parseOptions: <I extends Record<string, unknown>, N = BaseFieldType>(parentField: Field<I, N> | undefined, fieldOptions: ReadonlyArray<CheckboxFieldOption> | undefined, options: FormOptions<I, N>) => ParseSchemaState<I, N>;
export declare const parseFields: <I extends Record<string, unknown>, N = BaseFieldType>(fields: Field<I, N>[] | undefined, options: FormOptions<I, N>, parseDefaults: boolean, parent?: Field<I, N> | undefined) => ParseSchemaState<I, N>;
export declare const useSchemaState: <I extends Record<string, unknown>, N = BaseFieldType>(form: FormSchema<I, N>, options: FormOptions<I, N>) => SchemaState<I, N>;
export default useSchemaState;
