/// <reference types="react" />
import { Mode, SubmitErrorHandler } from 'react-hook-form';
import { ContainerProps } from '../Container';
import './FormGenerator.scss';
import { CustomActionType, CustomComponents, CustomFieldType, FormSchema, GridMode, LoadDataFunc, Validator, Locked, CustomPortalType, FormGeneratorSubmit, BaseFieldType, CustomFieldDefaultValueType, ToolbarActionType, AsyncTransportFunc } from './types';
import { TestMetadata } from 'types';
import { TAnalyticsEventData } from '@dtci/dash/analytics';
export declare const FormGeneratorContext: import("react").Context<Record<string, any>>;
export interface FormGeneratorProps<I extends Record<string, unknown>, N = BaseFieldType> {
    /** ID of the form element (should be unique) */
    formId: string;
    /** Form Schema (JSON or JS Object) */
    form: FormSchema<I, N>;
    /** Handle submit */
    onSubmit: FormGeneratorSubmit<I>;
    /** Handle error */
    onError?: SubmitErrorHandler<I>;
    /** Handle cancel */
    onCancel?: (reset: () => void) => void;
    /** onCancel callback reset form values  */
    resetOnCancel?: boolean;
    /** Custom Validators */
    validators?: Validator<I, N>;
    /** Custom Fields */
    fieldTypes?: CustomFieldType;
    /** Custom Field Default Values */
    fieldTypeDefaultValues?: CustomFieldDefaultValueType;
    /** Custom Actions */
    actions?: CustomActionType;
    /** Override Internal Components */
    customComponents?: CustomComponents;
    /** Container props */
    containerProps?: Omit<ContainerProps, 'children'>;
    /** Functions for loading field data asynchronously */
    loadData?: Record<keyof I, LoadDataFunc<I> | Record<keyof I, LoadDataFunc<I>>>;
    transport?: Record<keyof I, AsyncTransportFunc<I> | Record<keyof I, AsyncTransportFunc<I>>>;
    /** How the grid should behave */
    gridMode?: GridMode;
    /** Test data */
    testMetadata?: {
        form?: TestMetadata;
        header?: TestMetadata;
        pagination?: TestMetadata;
        grid?: TestMetadata;
        footer?: TestMetadata;
        toolbar?: TestMetadata;
        titlebar?: TestMetadata;
    };
    validationMode?: Mode;
    revalidationMode?: Exclude<Mode, 'onTouched' | 'all'>;
    handleUnsaved?: (isDirty: boolean) => void;
    locked?: Locked;
    portals?: CustomPortalType;
    isSubmittable?: boolean;
    /** Handle saving draft */
    onSaveDraft?: FormGeneratorSubmit<I>;
    /** Custom Toolbar Actions */
    customToolbarActions?: ToolbarActionType;
    /** Additional event information to pass to analytics tracking */
    analyticsEventData?: TAnalyticsEventData;
}
declare const FormGenerator: <I extends Record<string, unknown>, N = BaseFieldType>({ formId, form, onSubmit, onError, onCancel, resetOnCancel, validators, fieldTypes, fieldTypeDefaultValues, actions, customComponents, customToolbarActions, containerProps, testMetadata, loadData, validationMode, revalidationMode, gridMode, handleUnsaved, locked, portals, isSubmittable, onSaveDraft, transport, analyticsEventData, }: FormGeneratorProps<I, N>) => JSX.Element;
export default FormGenerator;
