import { GridAreaProps } from 'Grid';
import { BaseFieldType, Breakpoint, CalculatedSize, ConditionalAction, ConditionalLogic, CustomFieldDefaultValueType, DefaultValueType, EditableAction, Field, FormGeneratorSize, FormOptions, GridMode, Operator, PaginationSchema, RuleDateConfig, SubmitContext, ToolbarPlacement, ToolbarSchema, FormFieldValue, FormSchema, EnabledAction } from './types';
import { SelectOption } from 'types';
import { DeepPartial } from 'react-hook-form';
export declare const setVisibility: (action: ConditionalAction, logic: ConditionalLogic, matches: number, numRules: number) => boolean;
export declare const setEditable: (action: EditableAction, logic: ConditionalLogic, matches: number, numRules: number) => boolean;
export declare const setEnabled: (action: EnabledAction, logic: ConditionalLogic, matches: number, numRules: number) => boolean;
export declare const processRule: (operator: Operator, value: unknown, fieldValue: unknown, compareValue?: string | number | SelectOption | SelectOption[], date?: RuleDateConfig) => boolean;
export declare const fieldEditable: <I extends Record<string, unknown>, N = BaseFieldType>(field: Field<I, N>, formValues: I, index?: number) => boolean;
export declare const fieldEnabled: <I extends Record<string, unknown>, N = BaseFieldType>(field: Field<I, N>, formValues: I, index?: number) => boolean;
export declare const fieldVisible: <I extends Record<string, unknown>, N = BaseFieldType>(field: Field<I, N>, options: FormOptions<I, N>, formValues: I, breakpoint: Breakpoint | '', index?: number) => boolean;
export declare const processBreakpointRules: <I extends Record<string, unknown>, N = BaseFieldType>(field: Field<I, N>, currentPage: string | boolean, breakpoint: string, options: FormOptions<I, N>) => boolean;
export declare const processFieldRules: <I extends Record<string, unknown>, N = BaseFieldType>(field: Field<I, N>, formValues: I, index?: number) => boolean;
export declare const generateField: <I extends Record<string, unknown>, N = BaseFieldType>(field: Field<I, N>, options: FormOptions<I, N>) => boolean;
export declare const showField: <I extends Record<string, unknown>, N = BaseFieldType>(field: Field<I, N>, currentPage: string | boolean, options: FormOptions<I, N>, formValues: I, gridMode: GridMode, screenSize?: FormGeneratorSize, index?: number) => boolean;
export declare const getFieldSize: (slim: number, small: number, medium: number, large: number) => CalculatedSize;
export declare const calculateFieldSizes: <I extends Record<string, unknown>, N = BaseFieldType>(field: Field<I, N>, options: FormOptions<I, N>, gridMode: GridMode, screenSize?: FormGeneratorSize) => GridAreaProps;
export declare const getFieldDefault: <I extends Record<string, unknown>, N = BaseFieldType>(field: Field<I, N>, customValues?: CustomFieldDefaultValueType) => DefaultValueType;
export declare const getBreakpoint: (screenSize: FormGeneratorSize, useContainer?: boolean) => Breakpoint;
export declare const getFieldContext: <I extends Record<string, unknown>, N = BaseFieldType>(formValues: I, refMap: Record<string, Field<I, N>>) => Pick<SubmitContext<I>, "visibleFields" | "enabledFields">;
export declare const toolbarPlacement: (breakpoint: string, toolbarPlacement: ToolbarSchema['location']) => ToolbarPlacement;
export declare const pagesVisible: (breakpoint: Breakpoint, gridMode: GridMode, screenSize: FormGeneratorSize, pagination?: PaginationSchema) => boolean;
export declare const fieldRequired: <I extends Record<string, unknown>, N = BaseFieldType>(field: Field<I, N>, values: DeepPartial<I>) => boolean;
export declare const isDependantFieldValueEqual: (field?: FormFieldValue, value?: FormFieldValue) => boolean;
export declare const isDependantFieldValueNull: (field?: FormFieldValue) => boolean;
export declare const parseFormSchema: <I extends Record<string, unknown>, N = BaseFieldType>(form: string | FormSchema<I, N>) => FormSchema<I, N>;
