{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/slicedToArray\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/Linear/Linear.tsx","webpack://@dtci/spellbook/./src/Spinner/Spinner.tsx","webpack://@dtci/spellbook/./src/Loader/Loader.tsx","webpack://@dtci/spellbook/./src/Container/Container.tsx","webpack://@dtci/spellbook/./src/Menu/Menu.tsx","webpack://@dtci/spellbook/./src/Menu/MenuItem.tsx","webpack://@dtci/spellbook/./src/ExpandableMenu/ExpandableMenu.tsx","webpack://@dtci/spellbook/./src/ExpandableSection/ExpandableSection.tsx","webpack://@dtci/spellbook/./src/ExpandableMenu/ExpandableMenuSection.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/slicedToArray\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Linear.scss';\n\n// Types\nimport { SizeOptions } from '../types';\nimport { TestMetadata } from 'types';\n\nexport interface LinearProps {\n  /** Add a class to the spinner */\n  className?: string;\n  /** Size: small, medium, large */\n  size?: SizeOptions;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n  /** variant */\n  variant?: 'determinate' | 'indeterminate';\n  /** max value for determinate variant */\n  max?: number;\n  /** current value for determinate variant */\n  value?: number;\n  /** to show or hide label */\n  showLabel?: boolean;\n}\n\nconst Linear: FC<LinearProps> = ({\n  className,\n  size,\n  testMetadata,\n  variant = 'indeterminate',\n  value = 0,\n  max = 100,\n  showLabel = false,\n  ...otherProps\n}) => {\n  const currentValue = useMemo(() => {\n    if (value >= 0 && max > 0) {\n      if (value > max) return 100;\n      return Math.round((value / max) * 100);\n    }\n    return 0;\n  }, [max, value]);\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames('sb-linear-container', className, {\n        'sb-linear-small': size === 'small',\n        'sb-linear-large': size === 'large',\n      })}\n      role=\"alert\"\n      aria-live=\"assertive\"\n      {...testMetadata}\n    >\n      <div\n        className={`sb-${variant}`}\n        data-testid={\n          testMetadata?.['data-testid'] ? 'linear-variant' : undefined\n        }\n      />\n      {variant === 'determinate' && (\n        <>\n          <div\n            className={classNames(\n              'sb-determinate-bar',\n              `sb-${variant}-bar_${currentValue}`,\n            )}\n          />\n          {showLabel && (\n            <div className=\"sb-determinate-label\">{`${currentValue}%`}</div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Linear;\n","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Spinner.scss';\n\n// Types\nimport {\n  AnimationOptions,\n  LocationOptions,\n  SizeOptions,\n  TestMetadata,\n} from '../types';\n\nexport interface SpinnerProps {\n  /** Add a class to the spinner */\n  className?: string;\n  /** Loading text for screen readers */\n  loadText?: string;\n  /** Size: smaller, small, medium (default), large */\n  size?: SizeOptions;\n  /** Full URL to a custom image you would like to use */\n  imageUrl?: string;\n  /** Animation: spin (default), bounce, rock, wobble */\n  animation?: AnimationOptions;\n  /** Location: mask, background */\n  /** Mask can break some animations but allows you to change the color of the icon. Use background if Mask is causing problems. */\n  location?: LocationOptions;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Spinner: FC<SpinnerProps> = ({\n  className,\n  loadText = 'Loading...',\n  size = 'medium',\n  imageUrl,\n  animation = 'spin',\n  location = 'mask',\n  testMetadata,\n  ...otherProps\n}) => {\n  const spinnerClassnames = useMemo(\n    () =>\n      classNames(\n        `sb-spinner_${location}`,\n        `sb-spinner_animate_${animation}`,\n        `sb-spinner_${size}`,\n      ),\n    [size, animation, location],\n  );\n\n  let styles = {};\n  if (imageUrl) {\n    if (location === 'mask') {\n      styles = {\n        maskImage: `url(${imageUrl})`,\n        WebkitMaskImage: `url(${imageUrl})`,\n      };\n    } else {\n      styles = {\n        backgroundImage: `url(${imageUrl})`,\n      };\n    }\n  }\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames('sb-spinner', className)}\n      role=\"alert\"\n      aria-live=\"assertive\"\n      {...testMetadata}\n    >\n      <p className=\"sb-spinner-load-text\">{loadText}</p>\n      <div\n        className={spinnerClassnames}\n        style={styles}\n        data-testid=\"spinner-mask\"\n      />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import { FC, ReactElement } from 'react';\n\n// Components\nimport Linear from '../Linear';\nimport Spinner from '../Spinner';\n\n// Styles\nimport './Loader.scss';\n\n// Types\nimport { SizeOptions, TestMetadata } from '../types';\n\ntype LoaderType = 'spinner' | 'linear';\n\nexport interface LoaderProps {\n  /** Text to display above the loader */\n  text?: string;\n  /** Size of the loader */\n  size: SizeOptions;\n  /** Custom class name for the component */\n  className?: string;\n  /** Type of loader (Spinner default) */\n  type?: LoaderType;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst loader = (type: LoaderType, size: SizeOptions): ReactElement => {\n  switch (type) {\n    case 'linear':\n      return <Linear size={size} />;\n    case 'spinner':\n    default:\n      return <Spinner size={size} loadText=\"\" />;\n  }\n};\n\nconst Loader: FC<LoaderProps> = ({\n  className,\n  text,\n  type = 'spinner',\n  size,\n  testMetadata,\n  ...otherProps\n}) => (\n  <div\n    {...otherProps}\n    role=\"progressbar\"\n    className={className}\n    {...testMetadata}\n  >\n    {text && <div className=\"sb-loader-text\">{text}</div>}\n    {loader(type, size)}\n  </div>\n);\n\nexport default Loader;\n","import { ComponentProps, FC, ReactNode, Ref, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Loader, { LoaderProps } from '../Loader';\n\n// Styles\nimport './Container.scss';\n\n// Types\nimport {\n  ElevationHeight,\n  PrismFill,\n  SizeOptions,\n  SpacingOptions,\n  WidthOptions,\n  MarginOptions,\n  TestMetadata,\n  ContainerStateType,\n} from '../types';\n\nexport interface ContainerProps extends ComponentProps<'div'> {\n  /** Elements to Wrap */\n  children: ReactNode;\n  /** Class name */\n  className?: string;\n  /** Controls the fill of the container: transparent, white (default), gray, theme */\n  fill?: 'transparent' | 'error-light' | PrismFill;\n  /** Controls the padding: none, normal (default), tight, loose. Either set one value to set all positions or four (T-R-B-L) */\n  padding?: SpacingOptions | SpacingOptions[];\n  /** Controls the margin: none, normal (default), tight, loose, centered. Either set one value to set all positions or four (T-R-B-L) */\n  margin?: MarginOptions | SpacingOptions[];\n  /** Controls the width of the stroke on the container: none (default), standard, thin, thick */\n  strokeWidth?: WidthOptions;\n  /** Controls the color of the stroke, prism system colors with black by default */\n  strokeColor?: PrismFill;\n  /** Drives corner radius and geometric shape: none, small (default), medium, large  */\n  cornerRadius?: 'none' | SizeOptions;\n  /** Creates visual hierarchy by using shadow and Z-depth: none, low, mid (default), high  */\n  elevation?: ElevationHeight;\n  /** Event to fire when the card is clicked */\n  onClick?: () => void;\n  /** Ref for container div */\n  containerRef?: Ref<HTMLDivElement>;\n  /** Height of the container */\n  height?: 'auto' | 'full';\n  /** Test IDs for sections of Container */\n  testMetadata?: TestMetadata;\n  /** Container state props */\n  containerStateProps?: ContainerStateProps;\n}\n\nexport interface ContainerStateProps {\n  /** The current state of the container */\n  containerState?: ContainerStateType;\n  /** An optional override message to display */\n  message?: string;\n  /** Loader size to be used for loading state */\n  loaderSize?: LoaderProps['size'];\n}\n\nconst defaultMessage: {\n  [key in ContainerStateType]: string;\n} = {\n  loading: 'Loading...',\n  error: 'Something went wrong when fetching data',\n  empty: 'No results',\n};\n\nconst Container: FC<ContainerProps> = ({\n  children,\n  className,\n  padding = 'none',\n  margin = 'none',\n  strokeWidth = 'none',\n  strokeColor = 'black',\n  cornerRadius = 'none',\n  elevation = 'none',\n  fill = 'transparent',\n  height = 'auto',\n  containerRef,\n  testMetadata,\n  containerStateProps,\n  ...otherProps\n}) => {\n  const containerClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-container',\n        ['sb-container_size-' + height],\n        ['sb-container_corner-radius-' + cornerRadius],\n        ['sb-container_elevation-' + elevation],\n        ['sb-container_fill-' + fill],\n        ['sb-container_stroke-width-' + strokeWidth],\n        ['sb-container_stroke-color-' + strokeColor],\n        {\n          /** Only add state class when its set */\n          'sb-container_state':\n            containerStateProps &&\n            containerStateProps?.containerState !== undefined,\n          ['sb-container_state-' + containerStateProps?.containerState]:\n            containerStateProps &&\n            containerStateProps?.containerState !== undefined,\n\n          /** If padding is not array - just set the class, ie sb-container_padding-loose */\n          ['sb-container_padding-' + padding]: !Array.isArray(padding),\n\n          /** Else go through top-right-bottom-left and set, ie sb-container_padding-top-loose */\n          ['sb-container_padding-top-' + padding[0]]:\n            Array.isArray(padding) && padding.length > 0,\n          ['sb-container_padding-right-' + padding[1]]:\n            Array.isArray(padding) && padding.length > 1,\n          ['sb-container_padding-bottom-' + padding[2]]:\n            Array.isArray(padding) && padding.length > 2,\n          ['sb-container_padding-left-' + padding[3]]:\n            Array.isArray(padding) && padding.length > 3,\n\n          /** If margin is not array - just set the class, ie sb-container_margin-loose */\n          ['sb-container_margin-' + margin]: !Array.isArray(margin),\n\n          /** Else go through top-right-bottom-left and set, ie sb-container_margin-top-loose */\n          ['sb-container_margin-top-' + margin[0]]:\n            Array.isArray(margin) && margin.length > 0,\n          ['sb-container_margin-right-' + margin[1]]:\n            Array.isArray(margin) && margin.length > 1,\n          ['sb-container_margin-bottom-' + margin[2]]:\n            Array.isArray(margin) && margin.length > 2,\n          ['sb-container_margin-left-' + margin[3]]:\n            Array.isArray(margin) && margin.length > 3,\n        },\n        className,\n      ),\n    [\n      strokeWidth,\n      strokeColor,\n      cornerRadius,\n      elevation,\n      fill,\n      className,\n      padding,\n      margin,\n      height,\n      containerStateProps,\n    ],\n  );\n\n  return (\n    <div\n      {...otherProps}\n      className={containerClassNames}\n      ref={containerRef}\n      {...testMetadata}\n    >\n      {containerStateProps?.containerState && (\n        <div>\n          {containerStateProps.message ??\n            defaultMessage[containerStateProps.containerState]}\n          {containerStateProps.containerState === 'loading' && (\n            <Loader size={containerStateProps?.loaderSize || 'large'} />\n          )}\n        </div>\n      )}\n\n      {!containerStateProps?.containerState && children}\n    </div>\n  );\n};\n\nexport default Container;\n","import { FC, ReactNode, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Menu.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface MenuProps {\n  /** Elements to Wrap */\n  children: ReactNode;\n  /** Class name */\n  className?: string;\n  /** Determines if orientation of menu is horizontal */\n  horizontal?: boolean;\n  /** Determines if orientation of menu is vertical */\n  vertical?: boolean;\n  /** Determines if menu is nested within another menu */\n  nested?: boolean;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Menu: FC<MenuProps> = ({\n  className,\n  horizontal,\n  nested,\n  vertical,\n  testMetadata,\n  children,\n  ...otherProps\n}) => {\n  const menuClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-menu',\n        {\n          'sb-menu_horizontal': horizontal,\n          'sb-menu_vertical': vertical,\n          'sb-menu__sub-menu': nested,\n        },\n        className,\n      ),\n    [className, horizontal, nested, vertical],\n  );\n\n  return (\n    <ul {...otherProps} className={menuClassNames} {...testMetadata}>\n      {children}\n    </ul>\n  );\n};\n\nexport default Menu;\n","import { forwardRef, MouseEvent, ReactNode, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Menu.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface MenuItemProps {\n  /** Elements to Wrap */\n  children?: ReactNode;\n  /** Class name */\n  className?: string;\n  /** Determines if the menu item in an active state */\n  isActive?: boolean;\n  /** Event to fire when the menu item is clicked */\n  onClick?: (e: MouseEvent<HTMLLIElement>) => void;\n  /** Determines if an expandable menu item in an open state */\n  isOpen?: boolean;\n  /** Determines if an expandable menu item has a toggle icon */\n  hasToggle?: boolean;\n  /** Text label for toggle menu item */\n  toggleLabel?: string | ReactNode;\n  /** Text label for menu item */\n  label?: string | ReactNode;\n  /** JSX to be inserted into .sb-menu__menu-item__toggle-target instead of label */\n  toggleLabelDetail?: ReactNode;\n  /** Font Awesome icon to indicate a closed sub-menu (default: fa-chevron-down) */\n  closedIcon?: string;\n  // Test IDs for component sections\n  testMetadata?: {\n    menuItem?: TestMetadata;\n    menuItemLabel?: TestMetadata;\n  };\n}\n\nconst MenuItem = forwardRef<HTMLLIElement, MenuItemProps>(\n  (\n    {\n      className,\n      isActive,\n      isOpen,\n      hasToggle,\n      closedIcon = 'fa-chevron-down',\n      onClick,\n      toggleLabelDetail,\n      toggleLabel,\n      label,\n      testMetadata = {\n        menuItem: { 'data-testid': 'menuItem' },\n        menuItemLabel: { 'data-testid': 'menuItemLabel' },\n      },\n      children,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const menuItemClassNames = useMemo(\n      () =>\n        classNames('sb-menu__menu-item', className, {\n          'sb-menu__menu-item_active': isActive,\n          'sb-menu__menu-item_open': isOpen,\n          'sb-menu__menu-item_has-toggle': hasToggle,\n        }),\n      [className, isActive, isOpen, hasToggle],\n    );\n\n    return (\n      <li\n        {...otherProps}\n        ref={ref}\n        className={menuItemClassNames}\n        onClick={onClick}\n        {...testMetadata?.menuItem}\n      >\n        {hasToggle && (\n          <div className=\"sb-menu__menu-item__toggle-target\" tabIndex={0}>\n            {toggleLabelDetail}\n            <span {...testMetadata?.menuItemLabel}>{toggleLabel}</span>\n            <i className={`fas ${closedIcon}`} />\n          </div>\n        )}\n        {label && (\n          <div\n            className=\"sb-menu__menu-item__label\"\n            {...testMetadata?.menuItemLabel}\n          >\n            {label}\n          </div>\n        )}\n        {children}\n      </li>\n    );\n  },\n);\n\nMenuItem.displayName = 'MenuItem';\n\nexport default MenuItem;\n","import { createContext, FC, ReactNode, useEffect, useState } from 'react';\n\n// Components\nimport Container, { ContainerProps } from '../Container';\nimport { Menu } from '../Menu';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface ExpandableMenuProps {\n  /** Expecting these to be ExpandableMenuSection */\n  children?: ReactNode;\n  /** Custom class name */\n  className?: string;\n  /** Should the menu be expanded or not */\n  isExpanded?: boolean;\n  /** Test ids for menu */\n  testMetadata?: TestMetadata;\n  /** Container props - no children */\n  containerProps?: Omit<ContainerProps, 'children'>;\n}\n\ninterface ExpandableMenuContextProps {\n  /** Is Menu in expanded state or not */\n  isExpanded: boolean;\n}\n\nexport const ExpandableMenuContext = createContext<ExpandableMenuContextProps>({\n  isExpanded: true,\n});\n\nconst ExpandableMenu: FC<ExpandableMenuProps> = ({\n  children,\n  className,\n  isExpanded = true,\n  testMetadata,\n  containerProps,\n  ...otherProps\n}) => {\n  const [expanded, setExpanded] = useState<boolean>(isExpanded);\n\n  useEffect(() => setExpanded(isExpanded), [isExpanded]);\n\n  return (\n    <ExpandableMenuContext.Provider value={{ isExpanded: expanded }}>\n      <Container {...containerProps}>\n        <Menu vertical className={className} {...testMetadata} {...otherProps}>\n          {children}\n        </Menu>\n      </Container>\n    </ExpandableMenuContext.Provider>\n  );\n};\n\nexport default ExpandableMenu;\n","import { FC, ReactNode, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Container, { ContainerProps } from '../Container';\n\n// Styles\nimport './ExpandableSection.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface ExpandableSectionProps {\n  /** Elements in the expanded section */\n  children?: ReactNode;\n  /** Is section expanded or not */\n  isExpanded?: boolean;\n  /** This section will always be visible */\n  mainSection: ReactNode;\n  /** Class name */\n  className?: string;\n  /** Override props for container (minus children) */\n  containerProps?: Omit<ContainerProps, 'children'>;\n  /** Sets test id */\n  testMetadata?: {\n    wrapper?: TestMetadata;\n    mainSection?: TestMetadata;\n    expandedSection?: TestMetadata;\n  };\n}\n\nconst ExpandableSection: FC<ExpandableSectionProps> = ({\n  children,\n  className,\n  isExpanded = true,\n  mainSection,\n  containerProps = {\n    padding: 'normal',\n  },\n  testMetadata,\n  ...otherProps\n}) => {\n  const expandSectionClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-expandable-section',\n        `sb-expandable-section__${isExpanded ? 'expanded' : 'collapsed'}`,\n        className,\n      ),\n    [className, isExpanded],\n  );\n\n  return (\n    <Container\n      {...otherProps}\n      {...testMetadata?.wrapper}\n      {...containerProps}\n      className={expandSectionClassNames}\n    >\n      <div\n        className=\"sb-expandable-section__visible\"\n        {...testMetadata?.mainSection}\n      >\n        {mainSection}\n      </div>\n      {isExpanded && (\n        <div\n          className=\"sb-expandable-section__children\"\n          {...testMetadata?.expandedSection}\n        >\n          {children}\n        </div>\n      )}\n    </Container>\n  );\n};\n\nexport default ExpandableSection;\n","import { FC, SyntheticEvent, useContext, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport ExpandableSection, {\n  ExpandableSectionProps,\n} from '../ExpandableSection';\nimport { MenuItem } from '../Menu';\n\n// Context\nimport { ExpandableMenuContext } from './ExpandableMenu';\n\n// Styles\nimport './ExpandableMenuSection.scss';\n\nexport type ExpandableMenuSectionProps = Omit<\n  ExpandableSectionProps,\n  'isExpanded'\n> & {\n  onClick: (e: SyntheticEvent<HTMLLIElement>) => void;\n  isActive?: boolean;\n};\n\nconst ExpandableMenuSection: FC<ExpandableMenuSectionProps> = ({\n  children,\n  className,\n  mainSection,\n  onClick,\n  containerProps,\n  testMetadata,\n  isActive,\n  ...otherProps\n}) => {\n  const { isExpanded } = useContext(ExpandableMenuContext);\n\n  const menuItemClasses = useMemo(\n    () =>\n      classNames(\n        'sb-expandable-menu-section',\n        {\n          'sb-expandable-menu-section__active': isActive,\n          'sb-expandable-menu-section__expanded': isExpanded,\n          'sb-expandable-menu-section__collapsed': !isExpanded,\n        },\n        className,\n      ),\n    [isActive, isExpanded, className],\n  );\n\n  return (\n    <MenuItem className={menuItemClasses} onClick={onClick} {...otherProps}>\n      <ExpandableSection\n        isExpanded={isExpanded}\n        mainSection={mainSection}\n        containerProps={containerProps}\n        testMetadata={testMetadata}\n        className=\"sb-expandable-menu-section__expandable-section\"\n      >\n        {children}\n      </ExpandableSection>\n    </MenuItem>\n  );\n};\n\nexport default ExpandableMenuSection;\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","className","size","testMetadata","variant","max","showLabel","otherProps","currentValue","useMemo","Math","round","classNames","role","undefined","loadText","imageUrl","animation","location","spinnerClassnames","styles","maskImage","WebkitMaskImage","backgroundImage","style","loader","type","text","defaultMessage","loading","error","empty","children","padding","margin","strokeWidth","strokeColor","cornerRadius","elevation","fill","height","containerRef","containerStateProps","containerClassNames","containerState","Array","isArray","length","ref","message","loaderSize","horizontal","nested","vertical","menuClassNames","MenuItem","forwardRef","isActive","isOpen","hasToggle","closedIcon","onClick","toggleLabelDetail","toggleLabel","label","menuItem","menuItemLabel","menuItemClassNames","tabIndex","displayName","ExpandableMenuContext","createContext","isExpanded","containerProps","useState","expanded","setExpanded","useEffect","Provider","mainSection","expandSectionClassNames","wrapper","expandedSection","useContext","menuItemClasses"],"sourceRoot":""}