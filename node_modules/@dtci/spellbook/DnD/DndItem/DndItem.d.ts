import React from 'react';
import type { DraggableSyntheticListeners } from '@dnd-kit/core';
import type { Transform } from '@dnd-kit/utilities';
import './DndItem.scss';
export interface Props {
    /**a boolean that indicates whether the item is currently being dragged over other items */
    dragOverlay?: boolean;
    /**a string that specifies the background color of the item */
    color?: string;
    /**a boolean that indicates whether the item is disabled */
    disabled?: boolean;
    /**a boolean that indicates whether the item is currently being dragged */
    dragging?: boolean;
    /**a boolean that indicates whether the item has a handle */
    handle?: boolean;
    /**an object that contains props to be passed down to the handle component */
    handleProps?: any;
    /**a number that specifies the height of the item */
    height?: number;
    /**a number that specifies the index of the item in the list */
    index?: number;
    /**a boolean that indicates whether the item should fade in when it is added to the list */
    fadeIn?: boolean;
    /**an object that contains information about the transform of the item during drag and drop */
    transform?: Transform | null;
    /**an object that contains event listeners for the item during drag and drop */
    listeners?: DraggableSyntheticListeners;
    /**a boolean that indicates whether the list is currently being sorted */
    sorting?: boolean;
    /**an object that contains CSS styles for the item */
    style?: React.CSSProperties;
    /**a string that specifies the CSS transition for the item */
    transition?: string | null;
    /** an object that contains CSS styles for the wrapper element of the item */
    wrapperStyle?: React.CSSProperties;
    /**the content of the item */
    value: React.ReactNode;
    /**a function that is called when the item is removed from the list */
    onRemove?(): void;
    /**a function that returns a custom render of the item */
    renderItem?(args: {
        dragOverlay: boolean;
        dragging: boolean;
        sorting: boolean;
        index: number | undefined;
        fadeIn: boolean;
        listeners: DraggableSyntheticListeners;
        ref: React.Ref<HTMLElement>;
        style: React.CSSProperties | undefined;
        transform: Props['transform'];
        transition: Props['transition'];
        value: Props['value'];
    }): React.ReactElement;
}
export declare const DndItem: React.MemoExoticComponent<React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLDivElement>>>;
