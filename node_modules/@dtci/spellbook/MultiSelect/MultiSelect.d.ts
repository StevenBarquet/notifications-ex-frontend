import { ReactNode } from 'react';
import { Props as ReactSelectProps, OptionsType, OptionTypeBase } from 'react-select';
import './MultiSelect.scss';
import { TestMetadata } from 'types';
export type MultiSelectProps<T extends OptionTypeBase> = ReactSelectProps<T, true> & {
    testMetadata?: TestMetadata;
};
declare const MultiSelect: <T extends OptionTypeBase = {
    value: string;
    label: string;
    isDisabled?: boolean | undefined;
}>({ onChange, className, isFetching, icon, testMetadata, iconContainerClassName, useMenuPortal, isError, customClear, components, flush, creatable, onCreateOption, async, loadOptions, analyticsEventData, showCheckboxes, ...otherProps }: ReactSelectProps<T, true> & {
    testMetadata?: TestMetadata | undefined;
} & {
    customClear?: boolean | undefined;
    icon?: ReactNode;
    iconContainerClassName?: string | undefined;
    useMenuPortal?: boolean | undefined;
    isError?: boolean | undefined;
    flush?: "left" | "right" | "flush" | undefined;
    creatable?: boolean | undefined;
    showCheckboxes?: boolean | undefined;
    onCreateOption?: ((inputValue: string) => void) | undefined;
    async?: boolean | undefined;
    loadOptions?: ((inputValue: string, callback: (options: OptionsType<T>) => void) => void | Promise<T[]>) | undefined;
}) => JSX.Element | null;
export default MultiSelect;
