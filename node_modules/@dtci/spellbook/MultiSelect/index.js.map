{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/slicedToArray\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"react-select\"","webpack://@dtci/spellbook/external commonjs \"react-select/async\"","webpack://@dtci/spellbook/external commonjs \"react-select/creatable\"","webpack://@dtci/spellbook/external commonjs \"react-select/async-creatable\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/Spinner/Spinner.tsx","webpack://@dtci/spellbook/./src/Link/Link.tsx","webpack://@dtci/spellbook/external commonjs \"@dtci/dash/analytics\"","webpack://@dtci/spellbook/./src/Input/Input.tsx","webpack://@dtci/spellbook/./src/Checkbox/Checkbox.tsx","webpack://@dtci/spellbook/./src/MultiSelect/MultiSelect.tsx","webpack://@dtci/spellbook/external commonjs \"@dtci/triton/hooks\"","webpack://@dtci/spellbook/./src/MultiSelect/MultiSelectPopout.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/slicedToArray\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react-select\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react-select/async\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react-select/creatable\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react-select/async-creatable\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Spinner.scss';\n\n// Types\nimport {\n  AnimationOptions,\n  LocationOptions,\n  SizeOptions,\n  TestMetadata,\n} from '../types';\n\nexport interface SpinnerProps {\n  /** Add a class to the spinner */\n  className?: string;\n  /** Loading text for screen readers */\n  loadText?: string;\n  /** Size: smaller, small, medium (default), large */\n  size?: SizeOptions;\n  /** Full URL to a custom image you would like to use */\n  imageUrl?: string;\n  /** Animation: spin (default), bounce, rock, wobble */\n  animation?: AnimationOptions;\n  /** Location: mask, background */\n  /** Mask can break some animations but allows you to change the color of the icon. Use background if Mask is causing problems. */\n  location?: LocationOptions;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Spinner: FC<SpinnerProps> = ({\n  className,\n  loadText = 'Loading...',\n  size = 'medium',\n  imageUrl,\n  animation = 'spin',\n  location = 'mask',\n  testMetadata,\n  ...otherProps\n}) => {\n  const spinnerClassnames = useMemo(\n    () =>\n      classNames(\n        `sb-spinner_${location}`,\n        `sb-spinner_animate_${animation}`,\n        `sb-spinner_${size}`,\n      ),\n    [size, animation, location],\n  );\n\n  let styles = {};\n  if (imageUrl) {\n    if (location === 'mask') {\n      styles = {\n        maskImage: `url(${imageUrl})`,\n        WebkitMaskImage: `url(${imageUrl})`,\n      };\n    } else {\n      styles = {\n        backgroundImage: `url(${imageUrl})`,\n      };\n    }\n  }\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames('sb-spinner', className)}\n      role=\"alert\"\n      aria-live=\"assertive\"\n      {...testMetadata}\n    >\n      <p className=\"sb-spinner-load-text\">{loadText}</p>\n      <div\n        className={spinnerClassnames}\n        style={styles}\n        data-testid=\"spinner-mask\"\n      />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import { ComponentProps, FC, ReactNode, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Link.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface LinkProps extends ComponentProps<'a'> {\n  /** Elements to Wrap */\n  children?: ReactNode;\n  /** Custom class name(s) for component container */\n  className?: string;\n  /** Disables the Link */\n  disabled?: boolean;\n  /** Address of the Link */\n  href?: string;\n  /**\n   * Relationship between the location in the document containing the hyperlink and the destination resource.\n   * Omitted if the href attribute is not present.\n   * Default is \"noopener noreferrer\" for security reasons: https://web.dev/external-anchors-use-rel-noopener/\n   */\n  rel?: string;\n  /** Text underline decoration*/\n  underline?: 'none' | 'hover' | 'always';\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Link: FC<LinkProps> = ({\n  children,\n  className,\n  disabled,\n  href,\n  testMetadata,\n  rel = 'noopener noreferrer',\n  underline = 'none',\n  ...otherProps\n}) => {\n  const buttonGroupClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-link',\n        `sb-link_underline_${underline}`,\n        {\n          'sb-link_disabled': disabled,\n        },\n        className,\n      ),\n    [className, underline, disabled],\n  );\n\n  return (\n    <a\n      aria-disabled={disabled}\n      className={buttonGroupClassNames}\n      href={href}\n      rel={href && rel}\n      {...testMetadata}\n      {...otherProps}\n    >\n      {children}\n    </a>\n  );\n};\n\nexport default Link;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@dtci/dash/analytics\");","import {\n  ClassAttributes,\n  DetailedHTMLProps,\n  FC,\n  InputHTMLAttributes,\n  useContext,\n  useCallback,\n  useMemo,\n} from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Input.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Analytics\nimport {\n  AnalyticsContext,\n  handleAnalyticsEvent,\n  TAnalyticsEventData,\n} from '@dtci/dash/analytics';\n\nexport interface InputProps\n  extends DetailedHTMLProps<\n    InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  > {\n  /** value of the input field */\n  value?: number | string;\n  /** Boolean to determine if field is required */\n  required?: boolean;\n  /** If label is not visible, use aria-label for screen readers */\n  labelText?: string;\n  /** ref form inner input **/\n  inputRef?: ClassAttributes<HTMLInputElement>['ref'];\n  /** Width of the Input */\n  width?: 'small' | 'medium' | 'large' | 'auto';\n  // For use with nested components, ie. inputProps\n  'data-testid'?: string;\n  testMetadata?: TestMetadata;\n  /** Error State */\n  isError?: boolean;\n  /** Disabled State */\n  isDisabled?: boolean;\n  /** Border Flush */\n  flush?: 'left' | 'right' | 'flush';\n  /** Indicate if input should have a border */\n  bordered?: boolean;\n  /** Additional event information to pass to analytics tracking */\n  analyticsEventData?: TAnalyticsEventData;\n}\n/** Input components are useful for editing text in forms */\nconst Input: FC<InputProps> = ({\n  className,\n  labelText,\n  inputRef,\n  type = 'text',\n  required,\n  width = 'small',\n  testMetadata,\n  isError = false,\n  flush,\n  bordered = true,\n  isDisabled,\n  analyticsEventData,\n  ...otherProps\n}) => {\n  const inputClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-input',\n        {\n          'sb-input_error': isError,\n          'sb-input__is-required': required,\n          'sb-input__is-disabled': isDisabled,\n          'sb-input__size-small': width === 'small',\n          'sb-input__size-medium': width === 'medium',\n          'sb-input__size-large': width === 'large',\n          'sb-input__size-auto': width === 'auto',\n          'sb-input__flush-right': flush === 'right',\n          'sb-input__flush': flush === 'flush',\n          'sb-input__flush-left': flush === 'left',\n          'sb-input__borderless': !bordered,\n        },\n        className,\n      ),\n    [className, required, width, isError, flush, bordered, isDisabled],\n  );\n\n  const analyticsContext = useContext(AnalyticsContext);\n  const { onFocus, onBlur, onKeyDown } = otherProps;\n\n  const handleOnFocus = useCallback(\n    (e: React.FocusEvent<HTMLInputElement>): void => {\n      onFocus?.(e);\n      handleAnalyticsEvent({\n        analyticsContext,\n        analyticsEventData,\n        componentType: 'Input',\n        actionName: 'focus',\n        label:\n          otherProps?.['aria-label'] ||\n          otherProps?.name ||\n          labelText ||\n          className ||\n          testMetadata?.['data-testid'] ||\n          '',\n        value: [{ text: e.target.value }],\n      });\n    },\n    [\n      analyticsContext,\n      analyticsEventData,\n      className,\n      labelText,\n      onFocus,\n      otherProps,\n      testMetadata,\n    ],\n  );\n\n  const handleOnBlur = useCallback(\n    (e: React.FocusEvent<HTMLInputElement>): void => {\n      onBlur?.(e);\n      handleAnalyticsEvent({\n        analyticsContext,\n        analyticsEventData,\n        componentType: 'Input',\n        actionName: 'blur',\n        label:\n          otherProps?.['aria-label'] ||\n          otherProps?.name ||\n          labelText ||\n          className ||\n          testMetadata?.['data-testid'] ||\n          '',\n        value: [{ text: e.target.value }],\n      });\n    },\n    [\n      analyticsContext,\n      analyticsEventData,\n      className,\n      labelText,\n      onBlur,\n      otherProps,\n      testMetadata,\n    ],\n  );\n\n  const handleOnKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>): void => {\n      onKeyDown?.(e);\n\n      if (e.key !== 'Enter') return;\n\n      handleAnalyticsEvent({\n        analyticsContext,\n        analyticsEventData,\n        componentType: 'Input',\n        actionName: 'enter',\n        label:\n          otherProps?.['aria-label'] ||\n          otherProps?.name ||\n          labelText ||\n          className ||\n          testMetadata?.['data-testid'] ||\n          '',\n        value: [{ text: e.currentTarget.value }],\n      });\n    },\n    [\n      analyticsContext,\n      analyticsEventData,\n      className,\n      labelText,\n      otherProps,\n      testMetadata,\n      onKeyDown,\n    ],\n  );\n\n  return (\n    <input\n      {...otherProps}\n      onFocus={handleOnFocus}\n      onBlur={handleOnBlur}\n      onKeyDown={handleOnKeyDown}\n      className={inputClassNames}\n      required={required}\n      aria-required={required}\n      aria-label={labelText}\n      ref={inputRef}\n      type={type}\n      {...testMetadata}\n    />\n  );\n};\n\nexport default Input;\n","import { FC, HTMLProps, Ref, useCallback, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Checkbox.scss';\n\n// Types\nimport { CheckOption, FormOptionOnChange, TestMetadata } from '../types';\n\nexport interface CheckboxProps {\n  /** Custom class name(s) for component container */\n  className?: string;\n  /** Method to control changing the checkbox */\n  onChange?: FormOptionOnChange;\n  /** Check box options such as name and id */\n  option: CheckOption;\n  /** Disables the checkbox */\n  disabled?: boolean;\n  /** Value to set the checked state */\n  checked?: boolean;\n  /** Initial checked value **/\n  defaultChecked?: boolean;\n  /** Input reference **/\n  inputRef?: Ref<HTMLInputElement>;\n  /** Additional input props for Input, based on the inputComponent */\n  inputProps?: HTMLProps<HTMLInputElement> & TestMetadata;\n  /** Error State */\n  isError?: boolean;\n  // Test IDs for sections of Checkbox\n  testMetadata?: TestMetadata;\n}\n\nconst Checkbox: FC<CheckboxProps> = ({\n  className,\n  option,\n  onChange,\n  disabled,\n  checked,\n  defaultChecked,\n  inputProps,\n  inputRef,\n  isError = false,\n  testMetadata,\n  ...otherProps\n}) => {\n  const inputClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-checkbox__input',\n        {\n          'sb-checkbox_error': isError,\n        },\n        inputProps?.className,\n      ),\n    [inputProps, isError],\n  );\n  const checkboxClassNames = useMemo(\n    () =>\n      classNames('sb-checkbox', className, {\n        'sb-checkbox_disabled': disabled,\n      }),\n    [className, disabled],\n  );\n\n  const memoizedOnChange = useCallback(\n    () => onChange?.(option.value),\n    [onChange, option.value],\n  );\n\n  return (\n    <div {...otherProps} className={checkboxClassNames}>\n      <label htmlFor={String(option.id)} className=\"sb-checkbox__label\">\n        <input\n          type=\"checkbox\"\n          name={String(option.name || option.id)}\n          id={String(option.id)}\n          disabled={disabled}\n          checked={checked}\n          onChange={memoizedOnChange}\n          defaultChecked={defaultChecked}\n          role=\"checkbox\"\n          ref={inputRef}\n          {...testMetadata}\n          {...inputProps}\n          className={inputClassNames}\n        />\n        <div>\n          <div className=\"sb-checkbox__label-text\">{option.label}</div>\n          {option.helpText && (\n            <div className=\"sb-checkbox__helper\">{option.helpText}</div>\n          )}\n        </div>\n      </label>\n    </div>\n  );\n};\n\nexport default Checkbox;\n","import {\n  useState,\n  useEffect,\n  useCallback,\n  ComponentType,\n  CSSProperties,\n  ReactNode,\n  useMemo,\n  useContext,\n} from 'react';\nimport classNames from 'classnames';\nimport ReactSelect, {\n  ActionMeta,\n  Props as ReactSelectProps,\n  OptionsType,\n  OptionTypeBase,\n  MenuListComponentProps,\n  IndicatorProps,\n  components as defaultComponents,\n  ValueContainerProps,\n  ValueType,\n  OptionProps,\n} from 'react-select';\nimport Async from 'react-select/async';\nimport CreatableSelect from 'react-select/creatable';\nimport AsyncCreatableSelect from 'react-select/async-creatable';\n\n// Components\nimport Spinner from '../Spinner';\nimport Link from '../Link';\nimport Input from '../Input';\nimport Checkbox from '../Checkbox';\n\n// Styles\nimport './MultiSelect.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Analytics\nimport { AnalyticsContext, handleAnalyticsEvent } from '@dtci/dash/analytics';\n\nenum SELECT_UNSELECT_ALL {\n  SELECT_ALL = 'Select All',\n  UNSELECT_ALL = 'Unselect All',\n  SELECT_ALL_VALUE = 'select_all',\n}\n\nconst ClearIndicator = <T extends OptionTypeBase>(\n  props: IndicatorProps<T, true>,\n): JSX.Element => {\n  const {\n    innerProps: { ref, ...restInnerProps },\n  } = props;\n  return (\n    <div {...restInnerProps} ref={ref}>\n      <div className=\"sb-multiselect__clear-indicator\">CLEAR ALL</div>\n    </div>\n  );\n};\n\nconst LoadingIndicator = (): JSX.Element => {\n  return <Spinner className=\"sb-select__loading-indicator\" size=\"small\" />;\n};\n\nexport type MultiSelectProps<T extends OptionTypeBase> = ReactSelectProps<\n  T,\n  true\n> & {\n  testMetadata?: TestMetadata;\n};\n\n// Add actions section next to menu list\nconst MenuList = <T extends OptionTypeBase>({\n  selectProps,\n  ...props\n}: MenuListComponentProps<T, true>): JSX.Element => {\n  const {\n    inputRef,\n    onInputChange,\n    inputValue,\n    onMenuInputFocus,\n    showSelectAllOption,\n    showInputPopout,\n    innerListRef,\n  } = selectProps;\n\n  return (\n    <div className=\"sb-muiltiselect_menu-list-wrapper\" ref={innerListRef}>\n      {showInputPopout && (\n        <div className=\"sb-multiselect_popout-actions\">\n          <Input\n            className=\"sb-multiselect_popout-input\"\n            inputRef={inputRef}\n            value={inputValue}\n            placeholder=\"Search...\"\n            width=\"auto\"\n            onChange={(e) => {\n              // Fire native react-select input change\n              if (onInputChange) {\n                onInputChange(e.currentTarget.value, {\n                  action: 'input-change',\n                });\n              }\n            }}\n            onMouseDown={(e) => {\n              // Prevent react-select from taking back focus\n              e.stopPropagation();\n              (e.target as HTMLSelectElement).focus();\n            }}\n            onTouchEnd={(e) => {\n              // Prevent react-select from taking back focus\n              e.stopPropagation();\n              (e.target as HTMLSelectElement).focus();\n            }}\n            onFocus={onMenuInputFocus}\n          />\n        </div>\n      )}\n      {showSelectAllOption && (\n        <div\n          className=\"sb-multiselect__select-all sb-link sb-link_underline_hover\"\n          onClick={selectProps.handleSelectAll}\n        >\n          <Link\n            testMetadata={{\n              'data-testid': 'selectAllLink',\n              'data-qeid': 'selectAllLink',\n            }}\n            underline=\"hover\"\n          >\n            {selectProps.selectAllText}\n          </Link>\n        </div>\n      )}\n      <defaultComponents.MenuList {...props} selectProps={selectProps} />\n    </div>\n  );\n};\n\nconst MultiSelect = <\n  T extends OptionTypeBase = {\n    value: string;\n    label: string;\n    isDisabled?: boolean;\n  },\n>({\n  onChange,\n  className,\n  isFetching,\n  icon,\n  testMetadata,\n  iconContainerClassName,\n  useMenuPortal = false,\n  isError = false,\n  customClear = true,\n  components,\n  flush,\n  creatable,\n  onCreateOption,\n  async,\n  loadOptions,\n  analyticsEventData,\n  showCheckboxes,\n  ...otherProps\n}: MultiSelectProps<T> & {\n  customClear?: boolean;\n  icon?: ReactNode;\n  iconContainerClassName?: string;\n  useMenuPortal?: boolean;\n  isError?: boolean;\n  flush?: 'left' | 'right' | 'flush';\n  creatable?: boolean;\n  showCheckboxes?: boolean;\n  onCreateOption?: (inputValue: string) => void;\n  async?: boolean;\n  loadOptions?: (\n    inputValue: string,\n    callback: (options: OptionsType<T>) => void,\n  ) => void | Promise<T[]>;\n}): JSX.Element | null => {\n  const [values, setValues] = useState<ValueType<T, true>>(\n    otherProps.value || [],\n  );\n  const [selectAllText, setSelectAllText] = useState<string>(\n    values?.length === otherProps?.options?.length\n      ? SELECT_UNSELECT_ALL.UNSELECT_ALL\n      : SELECT_UNSELECT_ALL.SELECT_ALL,\n  );\n\n  const analyticsContext = useContext(AnalyticsContext);\n\n  const onSelectChange = useCallback(\n    (selections: ValueType<T, true>, actionMeta: ActionMeta<T>) => {\n      setValues(selections);\n\n      onChange?.(selections, actionMeta);\n\n      handleAnalyticsEvent({\n        analyticsContext,\n        analyticsEventData,\n        componentType: 'MultiSelect',\n        actionName: 'onChange',\n        label:\n          otherProps?.['aria-label'] ||\n          otherProps?.name ||\n          className ||\n          testMetadata?.['data-testid'] ||\n          '',\n        value:\n          (selections !== null &&\n            selections !== undefined &&\n            Array.from(selections)) ||\n          [],\n      });\n    },\n    [\n      analyticsContext,\n      analyticsEventData,\n      className,\n      onChange,\n      otherProps,\n      testMetadata,\n    ],\n  );\n\n  const handleSelectAll = useCallback(() => {\n    const originalOptions = otherProps.options as OptionsType<T>;\n    const actionMeta: ActionMeta<T> = { action: 'select-option' };\n    if (SELECT_UNSELECT_ALL.SELECT_ALL === selectAllText) {\n      onSelectChange(originalOptions, actionMeta);\n    } else {\n      onSelectChange([], actionMeta);\n    }\n  }, [onSelectChange, otherProps.options, selectAllText]);\n\n  useEffect(() => {\n    setSelectAllText(\n      values?.length === otherProps?.options?.length\n        ? SELECT_UNSELECT_ALL.UNSELECT_ALL\n        : SELECT_UNSELECT_ALL.SELECT_ALL,\n    );\n  }, [values, otherProps]);\n\n  useEffect(() => {\n    setValues(otherProps.value);\n  }, [otherProps.value]);\n\n  const ValueContainer: ComponentType<ValueContainerProps<T, true>> = useMemo(\n    () =>\n      icon\n        ? ({ children, ...props }) => (\n            <defaultComponents.ValueContainer {...props}>\n              {!!children && (\n                <div\n                  className={classNames(\n                    'sb-multiselect__icon-container',\n                    iconContainerClassName,\n                  )}\n                >\n                  {icon}\n                </div>\n              )}\n              <div className=\"sb-multiselect__value-container-content\">\n                {children}\n              </div>\n            </defaultComponents.ValueContainer>\n          )\n        : defaultComponents.ValueContainer,\n    [icon, iconContainerClassName],\n  );\n\n  const props: MultiSelectProps<T> = {\n    menuPortalTarget:\n      useMenuPortal && typeof window !== 'undefined' ? document.body : null,\n    ...otherProps,\n    isLoading: isFetching,\n    instanceId: otherProps.instanceId || otherProps.id,\n    components: {\n      LoadingIndicator,\n      ValueContainer,\n      MenuList,\n      ...(customClear && { ClearIndicator: ClearIndicator }),\n      ...components,\n    },\n    isMulti: true,\n    styles: {\n      menu: (provided: CSSProperties) => ({\n        ...provided,\n        position: otherProps.expands ? 'static' : 'absolute',\n        border: otherProps.borderless ? 0 : provided.border,\n        boxShadow: otherProps.borderless ? 'none' : provided.boxShadow,\n        '&:hover': {\n          boxShadow: otherProps.borderless ? 'none' : provided.boxShadow,\n        },\n        zIndex: 20,\n      }),\n      menuPortal: (base: CSSProperties) => ({ ...base, zIndex: 20 }),\n    },\n    closeMenuOnSelect: false,\n    hideSelectedOptions: false,\n    tabSelectsValue: creatable || false,\n    classNamePrefix: 'sb-multiselect',\n    className: classNames(\n      'sb-multiselect',\n      {\n        'sb-multiselect_error': isError,\n        'sb-multiselect__flush-right': flush === 'right',\n        'sb-multiselect__flush-left': flush === 'left',\n        'sb-multiselect__flush': flush === 'flush',\n        'sb-multiselect_with-checkboxes': showCheckboxes,\n      },\n      className,\n    ),\n  };\n\n  if (showCheckboxes) {\n    const Option = <T extends OptionTypeBase>(\n      props: OptionProps<T, true>,\n    ): JSX.Element => (\n      <defaultComponents.Option {...props}>\n        <Checkbox\n          checked={props.isSelected}\n          option={{\n            id: props.data.id,\n            value: props.data.value,\n            label: props.label,\n          }}\n        />\n      </defaultComponents.Option>\n    );\n\n    return (\n      <ReactSelect<T, true>\n        {...props}\n        {...testMetadata}\n        components={{ ...props.components, Option }}\n        value={values}\n        selectAllText={selectAllText}\n        handleSelectAll={handleSelectAll}\n        onChange={onSelectChange}\n      />\n    );\n  }\n\n  if (creatable) {\n    if (async && loadOptions) {\n      return (\n        <AsyncCreatableSelect<T, true>\n          {...props}\n          {...testMetadata}\n          loadOptions={loadOptions}\n          onCreateOption={onCreateOption}\n          onChange={onSelectChange}\n          icon={icon}\n        />\n      );\n    } else {\n      return (\n        <CreatableSelect<T, true>\n          {...props}\n          {...testMetadata}\n          onCreateOption={onCreateOption}\n          onChange={onSelectChange}\n          icon={icon}\n        />\n      );\n    }\n  } else {\n    if (async && loadOptions) {\n      return (\n        <Async<T, true>\n          {...props}\n          {...testMetadata}\n          loadOptions={loadOptions}\n          onChange={onSelectChange}\n          icon={icon}\n        />\n      );\n    } else {\n      return (\n        <ReactSelect<T, true>\n          {...props}\n          {...testMetadata}\n          value={values}\n          selectAllText={selectAllText}\n          handleSelectAll={handleSelectAll}\n          onChange={onSelectChange}\n          icon={icon}\n        />\n      );\n    }\n  }\n};\n\nexport default MultiSelect;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@dtci/triton/hooks\");","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport {\n  ActionMeta,\n  components,\n  OptionsType,\n  OptionTypeBase,\n  ValueContainerProps,\n  ValueType,\n} from 'react-select';\nimport MultiSelect, { MultiSelectProps } from './MultiSelect';\nimport classNames from 'classnames';\nimport { useClickEscape } from '@dtci/triton/hooks';\n\n// Styles\nimport './MultiSelectPopout.scss';\n\nexport type MultiSelectPopoutProps<T extends OptionTypeBase> =\n  MultiSelectProps<T> & {\n    showCheckboxes?: boolean;\n    showSelectAllOption?: boolean;\n    groupSelected?: boolean;\n    summary?: boolean;\n    closeMenuOnScroll?: boolean;\n  };\n\n// Handles rendering the value in the Select\nconst ValueContainer = <T extends OptionTypeBase>({\n  children,\n  ...otherProps\n}: ValueContainerProps<T, true>): JSX.Element => {\n  const { hasSummary, placeholder, icon } = otherProps.selectProps;\n\n  const values = otherProps.getValue();\n  const hasValue = Boolean(values.length);\n  const valueString = values.map((option) => option.label).join(', ');\n\n  const className = classNames('sb-multiselect_popout_value-container', {\n    'sb-multiselect_popout_value-placeholder': !hasValue,\n  });\n\n  // Show comma separated list or summary\n  // Show placeholder (we use our own, since while the user is typing in the underlying input, we want to keep the placeholder active until selection)\n  return (\n    <components.ValueContainer {...otherProps}>\n      <div className={className}>\n        {icon && <>{icon}</>}\n        {hasValue && hasSummary && <>{values.length} selected</>}\n        {hasValue && !hasSummary && <>{valueString}</>}\n        {!hasValue && <>{placeholder}</>}\n      </div>\n      {children}\n    </components.ValueContainer>\n  );\n};\n\n// Basis: https://github.com/JedWatson/react-select/issues/3111#issuecomment-470911304\nconst MultiSelectPopout = <\n  T extends OptionTypeBase = {\n    value: string;\n    label: string;\n    isDisabled?: boolean;\n  },\n>({\n  className,\n  onChange,\n  summary,\n  groupSelected,\n  showCheckboxes,\n  showSelectAllOption,\n  closeMenuOnScroll,\n  closeMenuOnEscape = true,\n  ...otherProps\n}: MultiSelectPopoutProps<T>): JSX.Element => {\n  const innerListRef = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [shouldFocus, setShouldFocus] = useState(true);\n  const [isFocused, setIsFocused] = useState(false);\n  const [shouldClose, setShouldClose] = useState(false);\n  const [values, setValues] = useState<ValueType<T, true>>(\n    otherProps.value || [],\n  );\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(otherProps.options || []);\n\n  const wrapperClassNames = useMemo(\n    () =>\n      classNames('sb-multiselect-popout__wrapper', {\n        'sb-multiselect-popout--focused': isFocused,\n        'sb-multiselect-popout--should-close': shouldClose,\n      }),\n    [isFocused, shouldClose],\n  );\n\n  const multiSelectClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-multiselect-popout',\n        {\n          'sb-multiselect-popout__group-selected': groupSelected,\n        },\n        className,\n      ),\n    [className, groupSelected],\n  );\n\n  const onSelectChange = useCallback(\n    (selections: ValueType<T, true>, actionMeta: ActionMeta<T>) => {\n      setValues(selections);\n      if (onChange) onChange(selections, actionMeta);\n    },\n    [onChange],\n  );\n\n  // Need to allow for updates to the options prop for async handling\n  useEffect(() => {\n    if (otherProps.options) {\n      setOptions(otherProps.options);\n    }\n  }, [otherProps.options]);\n\n  useEffect(() => {\n    if (groupSelected) {\n      let selected: OptionsType<T> = [];\n      let unselected: OptionsType<T> = [];\n\n      const originalOptions = otherProps.options as OptionsType<T>; //assume group was not passed in\n\n      unselected = originalOptions.filter((filter) =>\n        values ? !values.includes(filter) : true,\n      );\n      selected = originalOptions.filter((filter) =>\n        values ? values.includes(filter) : false,\n      );\n\n      setOptions([\n        { label: 'Selected', options: selected },\n        { label: 'Unselected', options: unselected },\n      ]);\n    }\n  }, [groupSelected, otherProps.options, values]);\n\n  useEffect(() => {\n    if (isFocused && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isFocused]);\n\n  const handleMouseDown = (e: MouseEvent | Event): void => {\n    const container = containerRef.current;\n    const menu = innerListRef.current;\n\n    const menuContains =\n      e.target instanceof Element && e.target.id\n        ? menu?.querySelector('#' + e.target.id)\n        : menu?.contains(e.target as Element);\n\n    if (\n      (!(e.target instanceof Element) ||\n        (container?.classList.contains('sb-multiselect-popout--should-close') &&\n          !menuContains) ||\n        (!container?.contains(e.target as Element) && !menuContains)) &&\n      // react-select targets the document body when scroll lock is enabled\n      (e.target as Element).tagName !== 'BODY'\n    ) {\n      setShouldFocus(true);\n      setShouldClose(false);\n      setIsFocused(false);\n      setInputValue('');\n      const activeElement = document.activeElement as HTMLElement;\n      // Prevents issues with focus on react-select by clicking on the input again to close it\n      if (container?.contains(activeElement)) {\n        activeElement.blur();\n      }\n    } else {\n      setShouldClose(true);\n    }\n  };\n\n  // Handles swapping the state, since focus is being controlled outside of react-select\n  // https://github.com/facebook/react/issues/20325\n  useEffect(() => {\n    document.addEventListener('click', handleMouseDown, { capture: true });\n    document.addEventListener('touchend', handleMouseDown, { capture: true });\n    return () => {\n      document.removeEventListener('click', handleMouseDown, { capture: true });\n      document.removeEventListener('touchend', handleMouseDown, {\n        capture: true,\n      });\n    };\n  }, []);\n\n  // Need to allow for updates to the values prop for controlled values\n  useEffect(() => {\n    setValues(otherProps.value);\n  }, [otherProps.value]);\n\n  useClickEscape(() => {\n    if (closeMenuOnEscape) {\n      setShouldFocus(true);\n      setShouldClose(false);\n      setIsFocused(false);\n    }\n  }, [setShouldFocus, setShouldClose, setIsFocused, closeMenuOnEscape]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={wrapperClassNames}\n      data-testid=\"multiSelectPopout\"\n    >\n      <MultiSelect<T>\n        {...otherProps}\n        isClearable={\n          'isClearable' in otherProps ? otherProps.isClearable : true\n        }\n        components={{\n          ...otherProps.components,\n          ValueContainer,\n          // Normal placeholder disappears while typing, lets ditch it\n          Placeholder: () => {\n            return <></>;\n          },\n          // Don't want to render pills\n          MultiValue: () => {\n            return <></>;\n          },\n          // Don't want to render pill wrapper\n          MultiValueContainer: () => {\n            return <></>;\n          },\n        }}\n        closeMenuOnScroll={(e) => {\n          if (!closeMenuOnScroll) {\n            return;\n          }\n          if (\n            e.target instanceof Element &&\n            !e.target.classList?.contains('select__menu-list')\n          ) {\n            setShouldFocus(true);\n            setShouldClose(false);\n            setIsFocused(false);\n            setInputValue('');\n          }\n        }}\n        // Track inner input focus\n        onFocus={() => {\n          if (shouldFocus) {\n            setIsFocused(true);\n          }\n        }}\n        // Track inner input focus\n        onMenuInputFocus={() => {\n          setIsFocused(true);\n        }}\n        // Keep menu open while inner input is focused\n        menuIsOpen={isFocused}\n        isSearchable={false}\n        onChange={(selections, actionMeta) => {\n          if (actionMeta.action === 'clear') {\n            setShouldFocus(false);\n          } else {\n            setShouldFocus(true);\n          }\n          onSelectChange(selections, actionMeta);\n          // Push focus back to input on change\n          setTimeout(() => {\n            isFocused && inputRef.current && inputRef.current.focus();\n          }, 0);\n        }}\n        value={values}\n        options={options}\n        className={multiSelectClassNames}\n        showInputPopout\n        showCheckboxes={showCheckboxes}\n        showSelectAllOption={showSelectAllOption}\n        hasSummary={summary}\n        inputRef={inputRef}\n        innerListRef={innerListRef}\n        inputValue={inputValue}\n        onInputChange={(val) => setInputValue(val)}\n      />\n    </div>\n  );\n};\n\nexport default MultiSelectPopout;\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","className","loadText","size","imageUrl","animation","location","testMetadata","otherProps","spinnerClassnames","useMemo","classNames","styles","maskImage","WebkitMaskImage","backgroundImage","role","style","children","disabled","href","rel","underline","buttonGroupClassNames","labelText","inputRef","type","required","width","isError","flush","bordered","isDisabled","analyticsEventData","inputClassNames","analyticsContext","useContext","AnalyticsContext","onFocus","onBlur","onKeyDown","handleOnFocus","useCallback","e","handleAnalyticsEvent","componentType","actionName","label","name","text","target","handleOnBlur","handleOnKeyDown","currentTarget","ref","SELECT_UNSELECT_ALL","option","onChange","checked","defaultChecked","inputProps","checkboxClassNames","memoizedOnChange","htmlFor","String","id","helpText","ClearIndicator","props","innerProps","restInnerProps","LoadingIndicator","MenuList","selectProps","onInputChange","inputValue","onMenuInputFocus","showSelectAllOption","showInputPopout","innerListRef","placeholder","action","onMouseDown","stopPropagation","focus","onTouchEnd","onClick","handleSelectAll","selectAllText","isFetching","icon","iconContainerClassName","useMenuPortal","customClear","components","creatable","onCreateOption","async","loadOptions","showCheckboxes","useState","values","setValues","length","options","UNSELECT_ALL","SELECT_ALL","setSelectAllText","onSelectChange","selections","actionMeta","Array","from","originalOptions","useEffect","ValueContainer","defaultComponents","menuPortalTarget","window","document","body","isLoading","instanceId","isMulti","menu","provided","position","expands","border","borderless","boxShadow","zIndex","menuPortal","base","closeMenuOnSelect","hideSelectedOptions","tabSelectsValue","classNamePrefix","Option","isSelected","data","hasSummary","getValue","hasValue","Boolean","valueString","map","join","summary","groupSelected","closeMenuOnScroll","closeMenuOnEscape","useRef","containerRef","shouldFocus","setShouldFocus","isFocused","setIsFocused","shouldClose","setShouldClose","setInputValue","setOptions","wrapperClassNames","multiSelectClassNames","selected","unselected","filter","includes","current","handleMouseDown","container","menuContains","Element","querySelector","contains","classList","tagName","activeElement","blur","addEventListener","capture","removeEventListener","useClickEscape","isClearable","Placeholder","MultiValue","MultiValueContainer","menuIsOpen","isSearchable","setTimeout","val"],"sourceRoot":""}