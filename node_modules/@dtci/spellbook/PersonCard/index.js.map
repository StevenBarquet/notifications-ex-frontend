{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/Image/Image.tsx","webpack://@dtci/spellbook/./src/_utils/config.ts","webpack://@dtci/spellbook/./src/Avatar/Avatar.tsx","webpack://@dtci/spellbook/./src/BadgedContainer/BadgedContainer.tsx","webpack://@dtci/spellbook/./src/Linear/Linear.tsx","webpack://@dtci/spellbook/./src/Spinner/Spinner.tsx","webpack://@dtci/spellbook/./src/Loader/Loader.tsx","webpack://@dtci/spellbook/./src/Container/Container.tsx","webpack://@dtci/spellbook/./src/Card/Card.tsx","webpack://@dtci/spellbook/external commonjs \"@tippyjs/react\"","webpack://@dtci/spellbook/./src/Popover/Popover.tsx","webpack://@dtci/spellbook/./src/Tooltip/Tooltip.tsx","webpack://@dtci/spellbook/external commonjs \"tippy.js\"","webpack://@dtci/spellbook/./src/Typography/Typography.tsx","webpack://@dtci/spellbook/./src/PersonCard/PersonCard.tsx","webpack://@dtci/spellbook/./src/PersonCard/useMinimalCardClasses.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import { ComponentProps, forwardRef } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Image.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\ntype Props = ComponentProps<'img'>;\nexport type ImageProps = ComponentProps<typeof Image> & {\n  testMetadata?: TestMetadata;\n};\n\nconst Image = forwardRef<HTMLImageElement, Props>(function InnerImage(\n  { className, alt = '', ...otherProps },\n  ref,\n) {\n  return (\n    <img\n      alt={alt}\n      className={classNames('sb-image', className)}\n      ref={ref}\n      {...otherProps}\n    />\n  );\n});\n\nexport default Image;\n","export const ASSET_URL = 'https://dtci-spellbook.s3-us-west-2.amazonaws.com';\n\nexport const IMAGE_URL = `${ASSET_URL}/img`;\n\nexport const ICON_URL = `${IMAGE_URL}/icons`;\n\nexport const STORIES_URL =\n  'https://gitlab.disney.com/dtci-bp-software-solutions/ui/spellbook/-/blob/develop/src';\n","import {\n  ComponentProps,\n  FC,\n  ReactEventHandler,\n  RefObject,\n  useMemo,\n} from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Image from '../Image';\n\n// Styles\nimport './Avatar.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Utils\nimport { IMAGE_URL } from '../_utils/config';\n\nexport interface AvatarProps extends ComponentProps<'div'> {\n  /** Accessibility label (do not set if name appears with text) */\n  accessibilityLabel?: string;\n  /** Image URL (fallback if none provided)*/\n  imgSrc?: string;\n  /** Type of border radius: circle (default), rounded */\n  radiusType?: 'circle' | 'rounded';\n  /** Size: xs (32x32), small (40x40), medium (48x48, default), large (72x72), xl (120x120) */\n  size?: 'xs' | 'small' | 'medium' | 'large' | 'xl';\n  /** Class name */\n  className?: string;\n  /** Enable text mode */\n  textMode?: boolean;\n  /** Text to display */\n  text?: string;\n  /** Title to display when mouseover */\n  title?: string;\n  // Test IDs for sections of Avatar\n  testMetadata?: {\n    avatar?: TestMetadata;\n    avatarImg?: TestMetadata;\n  };\n  /** Callback for image loading failures */\n  onError?: ReactEventHandler<HTMLImageElement>;\n  /** Image reference */\n  imgRef?: RefObject<HTMLImageElement>;\n}\n\nexport const avatarPlaceholder = `${IMAGE_URL}/avatar.jpg`;\n\nconst Avatar: FC<AvatarProps> = ({\n  accessibilityLabel,\n  imgSrc,\n  radiusType = 'circle',\n  size = 'medium',\n  className,\n  textMode = false,\n  text = '',\n  title,\n  testMetadata = {\n    avatar: { 'data-testid': 'avatar' },\n    avatarImg: { 'data-testid': 'avatarImg' },\n  },\n  onError,\n  imgRef,\n  ...otherProps\n}) => {\n  const avatarClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-avatar',\n        {\n          'sb-avatar_circle': radiusType === 'circle',\n          'sb-avatar_rounded': radiusType === 'rounded',\n          'sb-avatar_xs': size === 'xs',\n          'sb-avatar_small': size === 'small',\n          'sb-avatar_medium': size === 'medium',\n          'sb-avatar_large': size === 'large',\n          'sb-avatar_xl': size === 'xl',\n          'sb-avatar_text': textMode,\n        },\n        className,\n      ),\n    [className, radiusType, size, textMode],\n  );\n\n  return (\n    <div {...otherProps} className={avatarClassNames} {...testMetadata?.avatar}>\n      {!textMode && (\n        <Image\n          className=\"sb-avatar__image\"\n          src={imgSrc || avatarPlaceholder}\n          alt={accessibilityLabel}\n          title={title}\n          onError={onError}\n          ref={imgRef}\n          {...testMetadata?.avatarImg}\n        />\n      )}\n      {textMode && (\n        <div className=\"sb-avatar__text\">\n          <div className=\"sb-avatar__text_content\">{text}</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Avatar;\n","import { FC, HTMLAttributes, ReactNode } from 'react';\nimport classNames from 'classnames';\n\n//Styles\nimport './BadgedContainer.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface BadgedContainerBadgeProps {\n  position: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n  class?: string;\n  component: ReactNode;\n}\n\nexport interface BadgedContainerProps extends HTMLAttributes<HTMLDivElement> {\n  /** Class name **/\n  className?: string;\n  /** Children */\n  children: ReactNode;\n  /** Badges that are positioned on the container */\n  badges: BadgedContainerBadgeProps | BadgedContainerBadgeProps[];\n  // Test IDs for sections of BadgedContainer\n  testMetadata?: TestMetadata;\n}\n\nconst BadgedContainer: FC<BadgedContainerProps> = ({\n  className,\n  badges,\n  children,\n  testMetadata,\n  ...otherProps\n}) => {\n  if (!Array.isArray(badges)) {\n    badges = [badges];\n  }\n  return (\n    <div\n      className={classNames('sb-badged-container__container', className)}\n      {...testMetadata}\n      {...otherProps}\n    >\n      {badges.map((badge, index) => (\n        <div\n          key={index}\n          className={classNames(\n            `sb-badged-container__badge \n            sb-badged-container__${badge.position}-badge`,\n            badge.class,\n          )}\n        >\n          {badge.component}\n        </div>\n      ))}\n      {children}\n    </div>\n  );\n};\n\nexport default BadgedContainer;\n","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Linear.scss';\n\n// Types\nimport { SizeOptions } from '../types';\nimport { TestMetadata } from 'types';\n\nexport interface LinearProps {\n  /** Add a class to the spinner */\n  className?: string;\n  /** Size: small, medium, large */\n  size?: SizeOptions;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n  /** variant */\n  variant?: 'determinate' | 'indeterminate';\n  /** max value for determinate variant */\n  max?: number;\n  /** current value for determinate variant */\n  value?: number;\n  /** to show or hide label */\n  showLabel?: boolean;\n}\n\nconst Linear: FC<LinearProps> = ({\n  className,\n  size,\n  testMetadata,\n  variant = 'indeterminate',\n  value = 0,\n  max = 100,\n  showLabel = false,\n  ...otherProps\n}) => {\n  const currentValue = useMemo(() => {\n    if (value >= 0 && max > 0) {\n      if (value > max) return 100;\n      return Math.round((value / max) * 100);\n    }\n    return 0;\n  }, [max, value]);\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames('sb-linear-container', className, {\n        'sb-linear-small': size === 'small',\n        'sb-linear-large': size === 'large',\n      })}\n      role=\"alert\"\n      aria-live=\"assertive\"\n      {...testMetadata}\n    >\n      <div\n        className={`sb-${variant}`}\n        data-testid={\n          testMetadata?.['data-testid'] ? 'linear-variant' : undefined\n        }\n      />\n      {variant === 'determinate' && (\n        <>\n          <div\n            className={classNames(\n              'sb-determinate-bar',\n              `sb-${variant}-bar_${currentValue}`,\n            )}\n          />\n          {showLabel && (\n            <div className=\"sb-determinate-label\">{`${currentValue}%`}</div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Linear;\n","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Spinner.scss';\n\n// Types\nimport {\n  AnimationOptions,\n  LocationOptions,\n  SizeOptions,\n  TestMetadata,\n} from '../types';\n\nexport interface SpinnerProps {\n  /** Add a class to the spinner */\n  className?: string;\n  /** Loading text for screen readers */\n  loadText?: string;\n  /** Size: smaller, small, medium (default), large */\n  size?: SizeOptions;\n  /** Full URL to a custom image you would like to use */\n  imageUrl?: string;\n  /** Animation: spin (default), bounce, rock, wobble */\n  animation?: AnimationOptions;\n  /** Location: mask, background */\n  /** Mask can break some animations but allows you to change the color of the icon. Use background if Mask is causing problems. */\n  location?: LocationOptions;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Spinner: FC<SpinnerProps> = ({\n  className,\n  loadText = 'Loading...',\n  size = 'medium',\n  imageUrl,\n  animation = 'spin',\n  location = 'mask',\n  testMetadata,\n  ...otherProps\n}) => {\n  const spinnerClassnames = useMemo(\n    () =>\n      classNames(\n        `sb-spinner_${location}`,\n        `sb-spinner_animate_${animation}`,\n        `sb-spinner_${size}`,\n      ),\n    [size, animation, location],\n  );\n\n  let styles = {};\n  if (imageUrl) {\n    if (location === 'mask') {\n      styles = {\n        maskImage: `url(${imageUrl})`,\n        WebkitMaskImage: `url(${imageUrl})`,\n      };\n    } else {\n      styles = {\n        backgroundImage: `url(${imageUrl})`,\n      };\n    }\n  }\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames('sb-spinner', className)}\n      role=\"alert\"\n      aria-live=\"assertive\"\n      {...testMetadata}\n    >\n      <p className=\"sb-spinner-load-text\">{loadText}</p>\n      <div\n        className={spinnerClassnames}\n        style={styles}\n        data-testid=\"spinner-mask\"\n      />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import { FC, ReactElement } from 'react';\n\n// Components\nimport Linear from '../Linear';\nimport Spinner from '../Spinner';\n\n// Styles\nimport './Loader.scss';\n\n// Types\nimport { SizeOptions, TestMetadata } from '../types';\n\ntype LoaderType = 'spinner' | 'linear';\n\nexport interface LoaderProps {\n  /** Text to display above the loader */\n  text?: string;\n  /** Size of the loader */\n  size: SizeOptions;\n  /** Custom class name for the component */\n  className?: string;\n  /** Type of loader (Spinner default) */\n  type?: LoaderType;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst loader = (type: LoaderType, size: SizeOptions): ReactElement => {\n  switch (type) {\n    case 'linear':\n      return <Linear size={size} />;\n    case 'spinner':\n    default:\n      return <Spinner size={size} loadText=\"\" />;\n  }\n};\n\nconst Loader: FC<LoaderProps> = ({\n  className,\n  text,\n  type = 'spinner',\n  size,\n  testMetadata,\n  ...otherProps\n}) => (\n  <div\n    {...otherProps}\n    role=\"progressbar\"\n    className={className}\n    {...testMetadata}\n  >\n    {text && <div className=\"sb-loader-text\">{text}</div>}\n    {loader(type, size)}\n  </div>\n);\n\nexport default Loader;\n","import { ComponentProps, FC, ReactNode, Ref, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Loader, { LoaderProps } from '../Loader';\n\n// Styles\nimport './Container.scss';\n\n// Types\nimport {\n  ElevationHeight,\n  PrismFill,\n  SizeOptions,\n  SpacingOptions,\n  WidthOptions,\n  MarginOptions,\n  TestMetadata,\n  ContainerStateType,\n} from '../types';\n\nexport interface ContainerProps extends ComponentProps<'div'> {\n  /** Elements to Wrap */\n  children: ReactNode;\n  /** Class name */\n  className?: string;\n  /** Controls the fill of the container: transparent, white (default), gray, theme */\n  fill?: 'transparent' | 'error-light' | PrismFill;\n  /** Controls the padding: none, normal (default), tight, loose. Either set one value to set all positions or four (T-R-B-L) */\n  padding?: SpacingOptions | SpacingOptions[];\n  /** Controls the margin: none, normal (default), tight, loose, centered. Either set one value to set all positions or four (T-R-B-L) */\n  margin?: MarginOptions | SpacingOptions[];\n  /** Controls the width of the stroke on the container: none (default), standard, thin, thick */\n  strokeWidth?: WidthOptions;\n  /** Controls the color of the stroke, prism system colors with black by default */\n  strokeColor?: PrismFill;\n  /** Drives corner radius and geometric shape: none, small (default), medium, large  */\n  cornerRadius?: 'none' | SizeOptions;\n  /** Creates visual hierarchy by using shadow and Z-depth: none, low, mid (default), high  */\n  elevation?: ElevationHeight;\n  /** Event to fire when the card is clicked */\n  onClick?: () => void;\n  /** Ref for container div */\n  containerRef?: Ref<HTMLDivElement>;\n  /** Height of the container */\n  height?: 'auto' | 'full';\n  /** Test IDs for sections of Container */\n  testMetadata?: TestMetadata;\n  /** Container state props */\n  containerStateProps?: ContainerStateProps;\n}\n\nexport interface ContainerStateProps {\n  /** The current state of the container */\n  containerState?: ContainerStateType;\n  /** An optional override message to display */\n  message?: string;\n  /** Loader size to be used for loading state */\n  loaderSize?: LoaderProps['size'];\n}\n\nconst defaultMessage: {\n  [key in ContainerStateType]: string;\n} = {\n  loading: 'Loading...',\n  error: 'Something went wrong when fetching data',\n  empty: 'No results',\n};\n\nconst Container: FC<ContainerProps> = ({\n  children,\n  className,\n  padding = 'none',\n  margin = 'none',\n  strokeWidth = 'none',\n  strokeColor = 'black',\n  cornerRadius = 'none',\n  elevation = 'none',\n  fill = 'transparent',\n  height = 'auto',\n  containerRef,\n  testMetadata,\n  containerStateProps,\n  ...otherProps\n}) => {\n  const containerClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-container',\n        ['sb-container_size-' + height],\n        ['sb-container_corner-radius-' + cornerRadius],\n        ['sb-container_elevation-' + elevation],\n        ['sb-container_fill-' + fill],\n        ['sb-container_stroke-width-' + strokeWidth],\n        ['sb-container_stroke-color-' + strokeColor],\n        {\n          /** Only add state class when its set */\n          'sb-container_state':\n            containerStateProps &&\n            containerStateProps?.containerState !== undefined,\n          ['sb-container_state-' + containerStateProps?.containerState]:\n            containerStateProps &&\n            containerStateProps?.containerState !== undefined,\n\n          /** If padding is not array - just set the class, ie sb-container_padding-loose */\n          ['sb-container_padding-' + padding]: !Array.isArray(padding),\n\n          /** Else go through top-right-bottom-left and set, ie sb-container_padding-top-loose */\n          ['sb-container_padding-top-' + padding[0]]:\n            Array.isArray(padding) && padding.length > 0,\n          ['sb-container_padding-right-' + padding[1]]:\n            Array.isArray(padding) && padding.length > 1,\n          ['sb-container_padding-bottom-' + padding[2]]:\n            Array.isArray(padding) && padding.length > 2,\n          ['sb-container_padding-left-' + padding[3]]:\n            Array.isArray(padding) && padding.length > 3,\n\n          /** If margin is not array - just set the class, ie sb-container_margin-loose */\n          ['sb-container_margin-' + margin]: !Array.isArray(margin),\n\n          /** Else go through top-right-bottom-left and set, ie sb-container_margin-top-loose */\n          ['sb-container_margin-top-' + margin[0]]:\n            Array.isArray(margin) && margin.length > 0,\n          ['sb-container_margin-right-' + margin[1]]:\n            Array.isArray(margin) && margin.length > 1,\n          ['sb-container_margin-bottom-' + margin[2]]:\n            Array.isArray(margin) && margin.length > 2,\n          ['sb-container_margin-left-' + margin[3]]:\n            Array.isArray(margin) && margin.length > 3,\n        },\n        className,\n      ),\n    [\n      strokeWidth,\n      strokeColor,\n      cornerRadius,\n      elevation,\n      fill,\n      className,\n      padding,\n      margin,\n      height,\n      containerStateProps,\n    ],\n  );\n\n  return (\n    <div\n      {...otherProps}\n      className={containerClassNames}\n      ref={containerRef}\n      {...testMetadata}\n    >\n      {containerStateProps?.containerState && (\n        <div>\n          {containerStateProps.message ??\n            defaultMessage[containerStateProps.containerState]}\n          {containerStateProps.containerState === 'loading' && (\n            <Loader size={containerStateProps?.loaderSize || 'large'} />\n          )}\n        </div>\n      )}\n\n      {!containerStateProps?.containerState && children}\n    </div>\n  );\n};\n\nexport default Container;\n","import { FC, ReactNode, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Container, { ContainerProps } from '../Container';\n\n// Styles\nimport './Card.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface CardProps {\n  /** Elements to Wrap */\n  children: ReactNode;\n  /** Class name */\n  className?: string;\n  /** Determines if the whole card is an interactive object*/\n  isInteractive?: boolean;\n  /** Determines if the card in a active state */\n  isActive?: boolean;\n  /** Event to fire when the card is clicked */\n  onClick?: () => void;\n  /** Determines what kind of background style has the card - backed (default), floating */\n  cardStyle?: 'backed' | 'floating';\n  /** Determines what kind of orientation will have the children of the card - stacked (default), inline */\n  orientation?: 'stacked' | 'inline';\n  // Test IDs for sections of AccordionPanel\n  testMetadata?: TestMetadata;\n  /** Set the container props the card uses */\n  containerProps?: Omit<ContainerProps, 'children'>;\n}\n\nconst Card: FC<CardProps> = ({\n  children,\n  isActive,\n  isInteractive,\n  className,\n  cardStyle = 'backed',\n  orientation = 'stacked',\n  containerProps,\n  testMetadata,\n  ...otherProps\n}) => {\n  const cardClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-card',\n        {\n          'sb-card_default-padding': !containerProps?.padding,\n          'sb-card_active': isActive,\n          'sb-card_interactive': isInteractive,\n          'sb-card_inline': orientation === 'inline',\n          'sb-card_stacked': orientation === 'stacked',\n        },\n        className,\n      ),\n    [className, isActive, isInteractive, orientation, containerProps?.padding],\n  );\n\n  const cardContainerProps = useMemo(() => {\n    let cardProps: Partial<ContainerProps> = {};\n\n    if (cardStyle === 'backed') {\n      cardProps = {\n        ...cardProps,\n        fill: 'white',\n        strokeWidth: 'thin',\n        strokeColor: 'white', // in the css this was transparent\n        cornerRadius: 'small',\n        elevation: 'low',\n      };\n    }\n\n    if (isActive) {\n      cardProps = {\n        ...cardProps,\n        fill: 'theme',\n        strokeWidth: 'thin',\n      };\n    }\n\n    return { ...cardProps, ...containerProps };\n  }, [containerProps, isActive, cardStyle]);\n\n  return (\n    <Container\n      {...testMetadata}\n      {...otherProps}\n      {...cardContainerProps}\n      className={cardClassNames}\n    >\n      {children}\n    </Container>\n  );\n};\n\nexport default Card;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tippyjs/react\");","import { FC, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport Tippy, { TippyProps } from '@tippyjs/react';\n\n// Styles\nimport './Popover.scss';\nimport 'tippy.js/dist/tippy.css';\nimport 'tippy.js/themes/light.css';\nimport 'tippy.js/themes/light-border.css';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface PopoverProps {\n  /** Wrapped element that will toggle the popover */\n  children: ReactNode;\n  /** Class name */\n  className?: string;\n  /** Content Class name */\n  contentClassName?: string;\n  /** The actual content of the popover */\n  popoverContent: TippyProps['content'];\n  /** Props to be passed to the instanced Tippy component */\n  tippyProps?: TippyProps;\n  /** Prop to control hide/show behaviour */\n  visible?: boolean;\n  /** Test IDs for component sections */\n  testMetadata?: {\n    popover?: TestMetadata;\n    popoverContent?: TestMetadata;\n  };\n}\n\nconst defaulTippyProps: TippyProps = {\n  arrow: false,\n};\n\nconst Popover: FC<PopoverProps> = ({\n  className,\n  contentClassName,\n  children,\n  popoverContent,\n  tippyProps,\n  testMetadata,\n  visible,\n}) => {\n  return (\n    <Tippy\n      {...defaulTippyProps}\n      {...tippyProps}\n      className={classNames('sb-popover', className)}\n      visible={visible}\n      content={popoverContent}\n      {...testMetadata?.popover}\n    >\n      <div\n        className={classNames('sb-popover__content', contentClassName)}\n        {...testMetadata?.popoverContent}\n      >\n        {children}\n      </div>\n    </Tippy>\n  );\n};\n\nexport default Popover;\n","import { FC, ReactElement, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport { TippyProps } from '@tippyjs/react';\n\n// Components\nimport Popover from '../Popover/';\n\n// Styles\nimport './Tooltip.scss';\nimport 'tippy.js/dist/tippy.css';\nimport 'tippy.js/themes/light.css';\nimport 'tippy.js/themes/light-border.css';\nimport 'tippy.js/animations/scale.css';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface TooltipProps {\n  children: ReactNode;\n  tippyProps?: TippyProps;\n  className?: string;\n  contentClassName?: string;\n  tooltipContent: ReactElement | string;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst defaultTippyProps: TippyProps = {\n  maxWidth: 'none',\n  interactive: true,\n  arrow: true,\n};\n\nconst Tooltip: FC<TooltipProps> = ({\n  children,\n  className,\n  contentClassName,\n  tooltipContent,\n  tippyProps,\n  testMetadata,\n}) => {\n  return (\n    <Popover\n      className={classNames('sb-tooltip', className)}\n      popoverContent={tooltipContent}\n      tippyProps={{ ...defaultTippyProps, ...tippyProps }}\n      {...testMetadata}\n      {...{ contentClassName }}\n    >\n      {children}\n    </Popover>\n  );\n};\n\nexport default Tooltip;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"tippy.js\");","import { FC, HTMLAttributes, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Tooltip from '../Tooltip';\n\n// Styles\nimport './Typography.scss';\n\n// Types\nimport { TestMetadata, TypographyVariants } from 'types';\n\nconst variantsMapping = {\n  T100: 'h1',\n  T90: 'h2',\n  T80: 'h3',\n  T70: 'h4',\n  T60: 'h5',\n  T50: 'h6',\n  T40: 'p',\n  T30: 'p',\n  T20: 'p',\n  T15: 'p',\n  T10: 'p',\n  T05: 'p',\n} as const;\n\nexport interface TypographyProps extends HTMLAttributes<HTMLElement> {\n  /** Applies the typography style */\n  variant: TypographyVariants;\n  /** Add vertical spacing below the typography element **/\n  bottomGutter?: boolean;\n  clickable?: boolean;\n  bold?: boolean;\n  italic?: boolean;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n  /** Flag to control whether the variants should change size based on screen size */\n  responsive?: boolean;\n  /** Trim text to container and add ellipsis */\n  truncate?: boolean;\n  /** Wrap text */\n  wrap?: boolean;\n  //** Title in tag */\n  name?: string;\n}\n\nconst Typography: FC<TypographyProps> = ({\n  variant,\n  className,\n  bottomGutter = false,\n  clickable = false,\n  bold = false,\n  italic = false,\n  children,\n  testMetadata,\n  responsive = false,\n  truncate = false,\n  wrap = false,\n  name,\n  ...props\n}) => {\n  const CustomTag = variantsMapping[variant];\n\n  const typographyClassNames = useMemo(\n    () =>\n      classNames(\n        `sb-typography sb-typography_${variant}`,\n        {\n          'sb-typography_with-bottom-gutter': bottomGutter,\n          'sb-typography_clickable': clickable,\n          'sb-typography_bold': bold,\n          'sb-typography_italic': italic,\n          'sb-typography_responsive': responsive,\n          'sb-typography_truncate': truncate,\n          'sb-typography_wrap': wrap,\n        },\n        className,\n      ),\n    [\n      variant,\n      bottomGutter,\n      clickable,\n      bold,\n      italic,\n      responsive,\n      truncate,\n      className,\n      wrap,\n    ],\n  );\n\n  const text = (\n    <CustomTag\n      title={name}\n      className={typographyClassNames}\n      {...props}\n      {...testMetadata}\n    >\n      {children}\n    </CustomTag>\n  );\n\n  return truncate ? (\n    <Tooltip tooltipContent={<>{children}</>}>{text}</Tooltip>\n  ) : (\n    text\n  );\n};\n\nexport default Typography;\n","import { FC } from 'react';\n\n// Components\nimport Avatar, { AvatarProps } from '../Avatar';\nimport BadgedContainer, { BadgedContainerBadgeProps } from '../BadgedContainer';\nimport Card from '../Card';\nimport Container from '../Container';\nimport Typography from '../Typography';\n\n// Hooks\nimport { useMinimalCardClasses } from './useMinimalCardClasses';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Styles\nimport './PersonCard.scss';\n\nexport interface ComponentsClassNames {\n  card?: string;\n  avatar?: string;\n  name?: string;\n  title?: string;\n  container?: string;\n}\n\nexport interface PersonCardProps {\n  /** Badges that are positioned on the container */\n  badges?: BadgedContainerBadgeProps | BadgedContainerBadgeProps[];\n  /** Avatar source string */\n  avatarSrc?: string;\n  /** Avatar Props */\n  avatarProps?: AvatarProps;\n  /** Accessibility label (do not set if name appears with text) */\n  accessibilityLabel?: string;\n  /** Person name string */\n  name?: string;\n  /** Person role string */\n  title?: string;\n  /** Object to add custom classes to the components */\n  componentsClassNames?: ComponentsClassNames;\n  /** Determines if the whole card is an interactive object*/\n  isInteractive?: boolean;\n  /** Determines if the card in a active state */\n  isActive?: boolean;\n  /** Event to fire when the card is clicked */\n  onClick?: () => void;\n  /** Determines what kind of background style has the card */\n  cardStyle?: 'backed' | 'floating';\n  /** Test IDs for component sections*/\n  testMetadata?: {\n    personCard?: TestMetadata;\n    personAvatar?: TestMetadata;\n  };\n  /** Whether it is or not a minimal Variant*/\n  isMinimalVariant?: boolean;\n}\n\nconst PersonCard: FC<PersonCardProps> = ({\n  badges = [],\n  avatarSrc,\n  accessibilityLabel,\n  name,\n  title,\n  componentsClassNames = {},\n  children,\n  testMetadata,\n  isMinimalVariant = false,\n  avatarProps = {},\n  ...otherProps\n}) => {\n  const { cardClassName, containerClassName, titleClassName, nameClassName } =\n    useMinimalCardClasses(componentsClassNames, isMinimalVariant);\n\n  return (\n    <Card\n      orientation=\"inline\"\n      className={cardClassName}\n      {...testMetadata?.personCard}\n      {...otherProps}\n    >\n      {!isMinimalVariant && (\n        <BadgedContainer badges={badges}>\n          <Avatar\n            imgSrc={avatarSrc}\n            accessibilityLabel={accessibilityLabel}\n            radiusType=\"circle\"\n            size=\"medium\"\n            className={componentsClassNames.avatar}\n            {...testMetadata?.personAvatar}\n            {...avatarProps}\n          />\n        </BadgedContainer>\n      )}\n      <Container padding=\"normal\" className={containerClassName}>\n        {!!name && (\n          <Typography\n            variant={isMinimalVariant ? 'T20' : 'T70'}\n            className={nameClassName}\n          >\n            {name}\n          </Typography>\n        )}\n        {!!title && (\n          <Typography\n            variant={isMinimalVariant ? 'T10' : 'T30'}\n            className={titleClassName}\n          >\n            {title}\n          </Typography>\n        )}\n        {children}\n      </Container>\n    </Card>\n  );\n};\n\nexport default PersonCard;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { ComponentsClassNames } from './PersonCard';\n\ninterface ReturnClasses {\n  cardClassName: string;\n  containerClassName: string;\n  titleClassName: string;\n  nameClassName: string;\n}\n\nexport function useMinimalCardClasses(\n  componentsClassNames: ComponentsClassNames,\n  isMinimalVariant: boolean,\n): ReturnClasses {\n  const cardClassName = useMemo(\n    () =>\n      classNames(\n        { 'sb-minimal-person-card': isMinimalVariant },\n        componentsClassNames.card,\n      ),\n    [componentsClassNames.card, isMinimalVariant],\n  );\n  const containerClassName = useMemo(\n    () =>\n      classNames(\n        { 'sb-minimal-person-card__container': isMinimalVariant },\n        componentsClassNames.container,\n      ),\n    [componentsClassNames.container, isMinimalVariant],\n  );\n  const titleClassName = useMemo(\n    () =>\n      classNames(\n        { 'sb-minimal-person-card__title': isMinimalVariant },\n        componentsClassNames.title,\n      ),\n    [componentsClassNames.title, isMinimalVariant],\n  );\n  const nameClassName = useMemo(\n    () =>\n      classNames(\n        { 'sb-minimal-person-card__name': isMinimalVariant },\n        componentsClassNames.name,\n      ),\n    [componentsClassNames.name, isMinimalVariant],\n  );\n\n  return { cardClassName, containerClassName, titleClassName, nameClassName };\n}\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","Image","forwardRef","ref","className","alt","otherProps","classNames","IMAGE_URL","avatarPlaceholder","accessibilityLabel","imgSrc","radiusType","size","textMode","text","title","testMetadata","avatar","avatarImg","onError","imgRef","avatarClassNames","useMemo","src","badges","children","Array","isArray","map","badge","index","position","class","component","variant","max","showLabel","currentValue","Math","round","role","undefined","loadText","imageUrl","animation","location","spinnerClassnames","styles","maskImage","WebkitMaskImage","backgroundImage","style","loader","type","defaultMessage","loading","error","empty","padding","margin","strokeWidth","strokeColor","cornerRadius","elevation","fill","height","containerRef","containerStateProps","containerClassNames","containerState","length","message","loaderSize","isActive","isInteractive","cardStyle","orientation","containerProps","cardClassNames","cardContainerProps","cardProps","defaulTippyProps","arrow","contentClassName","popoverContent","tippyProps","visible","content","popover","defaultTippyProps","maxWidth","interactive","tooltipContent","variantsMapping","T100","T90","T80","T70","T60","T50","T40","T30","T20","T15","T10","T05","bottomGutter","clickable","bold","italic","responsive","truncate","wrap","name","props","CustomTag","typographyClassNames","avatarSrc","componentsClassNames","isMinimalVariant","avatarProps","cardClassName","card","containerClassName","container","titleClassName","nameClassName","useMinimalCardClasses","personCard","personAvatar"],"sourceRoot":""}