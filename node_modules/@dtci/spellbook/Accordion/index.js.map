{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/toConsumableArray\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/slicedToArray\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/Accordion/Accordion.tsx","webpack://@dtci/spellbook/external commonjs \"shortid\"","webpack://@dtci/spellbook/./src/CollapsiblePanel/CollapsiblePanel.tsx","webpack://@dtci/spellbook/./src/Accordion/AccordionPanel.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/toConsumableArray\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/slicedToArray\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import { createContext, FC, useState, useCallback } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Accordion.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface AccordionProps {\n  /** Class name **/\n  className?: string;\n  /** ID of the default opened panel */\n  openByDefault?: string[];\n  /** Allow more than one child to be expanded */\n  allowMultipleOpen?: boolean;\n  /** Called when panels open or close */\n  onToggleOpen?: (panelId: string, nextValue: boolean) => void;\n  // Test IDs for sections of Accordion\n  testMetadata?: TestMetadata;\n}\n\ninterface AccordionContextProps {\n  /** Array of panel IDs that are currently open */\n  openPanelIds: string[];\n  /** Function that gets called when a panel is toggled */\n  onPanelToggle: (panelId: string, nextStateIsOpen: boolean) => void;\n}\n\nexport const AccordionContext = createContext<AccordionContextProps>({\n  openPanelIds: [],\n  onPanelToggle: () => {\n    // noop\n  },\n});\n\nconst Accordion: FC<AccordionProps> = ({\n  children,\n  className,\n  openByDefault = [],\n  allowMultipleOpen = true,\n  onToggleOpen = () => void 0,\n  testMetadata,\n  ...otherProps\n}) => {\n  const [openPanelIds, setOpenPanelIds] = useState(openByDefault);\n\n  const accordionClassNames = classNames('sb-accordion', className);\n\n  const onPanelToggle = useCallback(\n    (panelId: string, nextIsOpen: boolean): void => {\n      if (nextIsOpen) {\n        if (!allowMultipleOpen) {\n          openPanelIds.forEach((id) => onToggleOpen(id, false));\n        }\n        setOpenPanelIds(\n          allowMultipleOpen ? (state) => [...state, panelId] : [panelId],\n        );\n      } else {\n        setOpenPanelIds((state) => state.filter((id) => id !== panelId));\n      }\n      onToggleOpen(panelId, nextIsOpen);\n    },\n    [allowMultipleOpen, onToggleOpen, openPanelIds],\n  );\n\n  return (\n    <AccordionContext.Provider\n      value={{ openPanelIds: openPanelIds, onPanelToggle: onPanelToggle }}\n    >\n      <div {...otherProps} className={accordionClassNames} {...testMetadata}>\n        {children}\n      </div>\n    </AccordionContext.Provider>\n  );\n};\n\nexport default Accordion;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"shortid\");","import {\n  FC,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport shortid from 'shortid';\n\n// Styles\nimport './CollapsiblePanel.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface CollapsiblePanelProps {\n  /** Elements to Wrap **/\n  children?: ReactNode;\n  /** Class name **/\n  className?: string;\n  /** Determines if panel is open by default when uncontrolled, ignored if `isOpen` is used **/\n  isOpenByDefault?: boolean;\n  /** Determines if panel is open **/\n  isOpen?: boolean;\n  /** Callback run when changing the open state is requested **/\n  onToggleOpen?: (nextValue: boolean) => void;\n  /** Content element id, will generate a random one if not provided **/\n  contentId?: string;\n  /** Header button element id, will generate a random one if not provided **/\n  headerButtonId?: string;\n  /** remove the border of the component **/\n  borderless?: boolean;\n  /** Element to toggle content  **/\n  toggleBar?: ReactNode;\n  /** Toggle bar location in relation to content - top (default), bottom  **/\n  toggleBarLocation?: 'top' | 'bottom';\n  /** Toggle bar clickable area */\n  toggleBarClick?: 'icon' | 'full';\n  /** toggleBar horizontal alignment alignment - left (default), right, center **/\n  toggleHorizontalAlignment?: 'left' | 'right' | 'center';\n  /** type for button on the collapsible header*/\n  buttonType?: 'button' | 'submit' | 'reset';\n  // Test IDs for sections of CollapsiblePanel\n  testMetadata?: {\n    collapsiblePanel?: TestMetadata;\n    content?: TestMetadata;\n  };\n  /** Function that returns an element to toggle content  **/\n  renderToggleBar?: (isOpen: boolean) => JSX.Element;\n  /** ToggleIcon */\n  toggleIcon?: string;\n  /** toggleClass */\n  toggleClass?: string;\n  /** Selectable */\n  selectable?: boolean;\n  /** Selected */\n  selected?: boolean;\n}\n\nconst CollapsiblePanel: FC<CollapsiblePanelProps> = ({\n  children,\n  className,\n  contentId: maybeContentId,\n  headerButtonId: maybeHeaderButtonId,\n  toggleBar,\n  isOpen: isOpenInput,\n  isOpenByDefault = false,\n  borderless,\n  onToggleOpen,\n  toggleBarLocation = 'top',\n  toggleHorizontalAlignment = 'left',\n  buttonType = 'button',\n  testMetadata,\n  renderToggleBar = () => toggleBar,\n  toggleIcon = 'chevron-right',\n  toggleClass,\n  toggleBarClick = 'full',\n  selectable,\n  selected,\n  ...otherProps\n}) => {\n  const [isOpen, setIsOpen] = useState(\n    typeof isOpenInput === 'undefined' ? isOpenByDefault : isOpenInput,\n  );\n\n  useEffect(() => {\n    if (typeof isOpenInput !== 'undefined') {\n      setIsOpen(isOpenInput);\n    }\n  }, [isOpenInput, setIsOpen]);\n\n  const handleHeaderButtonClick = useCallback(() => {\n    if (typeof isOpenInput === 'undefined') {\n      setIsOpen(!isOpen);\n      if (onToggleOpen) {\n        onToggleOpen(!isOpen);\n      }\n    } else {\n      if (onToggleOpen) {\n        onToggleOpen(!isOpenInput);\n      }\n    }\n  }, [setIsOpen, isOpen, isOpenInput, onToggleOpen]);\n\n  // TODO: change to isomorphic friendly solution when available\n  // https://github.com/reactjs/rfcs/pull/32\n  // headerButtonId is used identify the label for the content (see aria-labelledby)\n  const headerButtonId = useMemo(\n    () => maybeHeaderButtonId || shortid.generate(),\n    [maybeHeaderButtonId],\n  );\n\n  // contentId is used to identify that the button controls the content (see aria-controls)\n  const contentId = useMemo(\n    () => maybeContentId || shortid.generate(),\n    [maybeContentId],\n  );\n\n  const collapsiblePanelClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-collapsible-panel',\n        {\n          'sb-collapsible-panel__borderless': borderless,\n        },\n        className,\n      ),\n    [className, borderless],\n  );\n\n  const collapsiblePanelTitleClassNames = useMemo(\n    () =>\n      classNames('sb-collapsible-panel__title', {\n        'sb-collapsible-panel__title--open': isOpen,\n        'sb-collapsible-panel__title--selectable': selectable,\n        'sb-collapsible-panel__title--selected': selected,\n        'sb-collapsible-panel__toggle-alignment-left':\n          toggleHorizontalAlignment === 'left',\n        'sb-collapsible-panel__toggle-alignment-center':\n          toggleHorizontalAlignment === 'center',\n        'sb-collapsible-panel__toggle-alignment-right':\n          toggleHorizontalAlignment === 'right',\n        'sb-collapsible-panel__title-clickable': toggleBarClick === 'full',\n      }),\n    [isOpen, toggleHorizontalAlignment, toggleBarClick, selectable, selected],\n  );\n\n  const collapsiblePanelIconClassNames = useMemo(\n    () =>\n      classNames(\n        `fas fa-${toggleIcon} sb-collapsible-panel__icon`,\n        {\n          'sb-collapsible-panel__icon--down': isOpen,\n        },\n        toggleClass,\n      ),\n    [toggleIcon, isOpen, toggleClass],\n  );\n\n  const collapsiblePanelContentClassNames = useMemo(\n    () =>\n      classNames('sb-collapsible-panel__content', {\n        'sb-collapsible-panel__content--collapsed': !isOpen,\n      }),\n    [isOpen],\n  );\n\n  const toggleButton =\n    toggleBarClick === 'full' ? (\n      <button\n        className={collapsiblePanelTitleClassNames}\n        onClick={handleHeaderButtonClick}\n        aria-expanded={isOpen}\n        aria-controls={contentId}\n        id={headerButtonId}\n        type={buttonType}\n        // TODO: remove when isomorphic friendly solution is implemented\n        suppressHydrationWarning\n      >\n        <div className={collapsiblePanelIconClassNames} />\n        {renderToggleBar &&\n          typeof renderToggleBar === 'function' &&\n          toggleBarClick === 'full' &&\n          renderToggleBar(isOpen)}\n      </button>\n    ) : (\n      <div\n        className={collapsiblePanelTitleClassNames}\n        aria-controls={contentId}\n      >\n        <button\n          className={classNames('sb-collapsible-panel__button', {\n            'sb-collapsible-panel__button--open': isOpen,\n          })}\n          onClick={handleHeaderButtonClick}\n          aria-expanded={isOpen}\n          id={headerButtonId}\n          type={buttonType}\n          // TODO: remove when isomorphic friendly solution is implemented\n          suppressHydrationWarning\n        >\n          <div className={collapsiblePanelIconClassNames} />\n        </button>\n        {renderToggleBar &&\n          typeof renderToggleBar === 'function' &&\n          toggleBarClick === 'icon' &&\n          renderToggleBar(isOpen)}\n      </div>\n    );\n\n  return (\n    <div\n      {...otherProps}\n      className={collapsiblePanelClassNames}\n      {...testMetadata?.collapsiblePanel}\n    >\n      {toggleBarLocation === 'top' && toggleButton}\n      <div\n        id={contentId}\n        className={collapsiblePanelContentClassNames}\n        role=\"region\"\n        aria-labelledby={headerButtonId}\n        // TODO: remove when isomorphic friendly solution is implemented\n        suppressHydrationWarning\n        {...testMetadata?.content}\n      >\n        <div className=\"sb-collapsible-panel__content-inner\">{children}</div>\n      </div>\n\n      {toggleBarLocation === 'bottom' && toggleButton}\n    </div>\n  );\n};\n\nexport default CollapsiblePanel;\n","import { FC, useCallback, useContext, useMemo } from 'react';\n\n// Components\nimport CollapsiblePanel, { CollapsiblePanelProps } from '../CollapsiblePanel';\n\n// Context\nimport { AccordionContext } from './Accordion';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport type Props = Omit<\n  CollapsiblePanelProps,\n  'onToggleOpen' | 'isOpen' | 'isOpenByDefault'\n> & {\n  /** ID of the panel, used to control open/close */\n  panelId: string;\n  // Test IDs for sections of AccordionPanel\n  testMetadata?: TestMetadata;\n};\n\nconst AccordionPanel: FC<Props> = ({\n  /** ID of the panel, used to control open/close */\n  panelId,\n  testMetadata,\n  ...otherProps\n}) => {\n  const { openPanelIds, onPanelToggle } = useContext(AccordionContext);\n\n  const isOpen = useMemo(\n    () => openPanelIds.includes(panelId),\n    [openPanelIds, panelId],\n  );\n\n  const onToggleOpen = useCallback(\n    (nextIsOpen: boolean): void => {\n      onPanelToggle(panelId, nextIsOpen);\n    },\n    [panelId, onPanelToggle],\n  );\n\n  return (\n    <CollapsiblePanel\n      isOpen={isOpen}\n      onToggleOpen={onToggleOpen}\n      {...testMetadata}\n      {...otherProps}\n    />\n  );\n};\n\nexport default AccordionPanel;\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","AccordionContext","createContext","openPanelIds","onPanelToggle","children","className","openByDefault","allowMultipleOpen","onToggleOpen","testMetadata","otherProps","useState","setOpenPanelIds","accordionClassNames","classNames","useCallback","panelId","nextIsOpen","forEach","id","state","filter","Provider","maybeContentId","contentId","maybeHeaderButtonId","headerButtonId","toggleBar","isOpenInput","isOpen","isOpenByDefault","borderless","toggleBarLocation","toggleHorizontalAlignment","buttonType","renderToggleBar","toggleIcon","toggleClass","toggleBarClick","selectable","selected","setIsOpen","useEffect","handleHeaderButtonClick","useMemo","shortid","collapsiblePanelClassNames","collapsiblePanelTitleClassNames","collapsiblePanelIconClassNames","collapsiblePanelContentClassNames","toggleButton","onClick","type","suppressHydrationWarning","collapsiblePanel","role","content","useContext","includes"],"sourceRoot":""}