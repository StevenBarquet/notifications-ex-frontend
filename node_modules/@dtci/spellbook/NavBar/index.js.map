{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/NavBar/NavBar.tsx","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/./src/Image/Image.tsx","webpack://@dtci/spellbook/./src/Link/Link.tsx","webpack://@dtci/spellbook/./src/NavBarItem/NavBarItem.tsx","webpack://@dtci/spellbook/external commonjs \"@tippyjs/react\"","webpack://@dtci/spellbook/./src/Popover/Popover.tsx","webpack://@dtci/spellbook/./src/Tooltip/Tooltip.tsx","webpack://@dtci/spellbook/external commonjs \"tippy.js\"","webpack://@dtci/spellbook/./src/Typography/Typography.tsx","webpack://@dtci/spellbook/./src/_utils/config.ts","webpack://@dtci/spellbook/./src/NavBar/Brand/Brand.tsx","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/slicedToArray\"","webpack://@dtci/spellbook/external commonjs \"@dtci/dash/analytics\"","webpack://@dtci/spellbook/./src/Spinner/Spinner.tsx","webpack://@dtci/spellbook/./src/Button/Button.tsx","webpack://@dtci/spellbook/./src/NavBar/Controls/Controls.tsx","webpack://@dtci/spellbook/./src/NavBar/Utility/Utility.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import { ComponentProps, FC } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './NavBar.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface NavBarProps extends ComponentProps<'nav'> {\n  /** Prop to control if you want navbar to be sticky to top (default true) */\n  sticky?: boolean;\n  /** Custom class name passed down to nav */\n  className?: string;\n  /** TestMetadata used for nav */\n  testMetadata?: TestMetadata;\n  /** Pass in your Brand, Controls, and Utility children */\n  children?: JSX.Element | JSX.Element[];\n}\n\nconst NavBar: FC<NavBarProps> = ({\n  sticky = true,\n  className,\n  testMetadata,\n  children,\n  ...otherProps\n}) => {\n  return (\n    <nav\n      className={classNames(\n        'sb-navbar',\n        { [`sb-navbar__sticky`]: sticky },\n        className,\n      )}\n      {...testMetadata}\n      {...otherProps}\n    >\n      {children}\n    </nav>\n  );\n};\n\nexport default NavBar;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","import { ComponentProps, forwardRef } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Image.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\ntype Props = ComponentProps<'img'>;\nexport type ImageProps = ComponentProps<typeof Image> & {\n  testMetadata?: TestMetadata;\n};\n\nconst Image = forwardRef<HTMLImageElement, Props>(function InnerImage(\n  { className, alt = '', ...otherProps },\n  ref,\n) {\n  return (\n    <img\n      alt={alt}\n      className={classNames('sb-image', className)}\n      ref={ref}\n      {...otherProps}\n    />\n  );\n});\n\nexport default Image;\n","import { ComponentProps, FC, ReactNode, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Link.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface LinkProps extends ComponentProps<'a'> {\n  /** Elements to Wrap */\n  children?: ReactNode;\n  /** Custom class name(s) for component container */\n  className?: string;\n  /** Disables the Link */\n  disabled?: boolean;\n  /** Address of the Link */\n  href?: string;\n  /**\n   * Relationship between the location in the document containing the hyperlink and the destination resource.\n   * Omitted if the href attribute is not present.\n   * Default is \"noopener noreferrer\" for security reasons: https://web.dev/external-anchors-use-rel-noopener/\n   */\n  rel?: string;\n  /** Text underline decoration*/\n  underline?: 'none' | 'hover' | 'always';\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Link: FC<LinkProps> = ({\n  children,\n  className,\n  disabled,\n  href,\n  testMetadata,\n  rel = 'noopener noreferrer',\n  underline = 'none',\n  ...otherProps\n}) => {\n  const buttonGroupClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-link',\n        `sb-link_underline_${underline}`,\n        {\n          'sb-link_disabled': disabled,\n        },\n        className,\n      ),\n    [className, underline, disabled],\n  );\n\n  return (\n    <a\n      aria-disabled={disabled}\n      className={buttonGroupClassNames}\n      href={href}\n      rel={href && rel}\n      {...testMetadata}\n      {...otherProps}\n    >\n      {children}\n    </a>\n  );\n};\n\nexport default Link;\n","import { ComponentProps, FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Styles\nimport './NavBarItem.scss';\n\nexport interface NavBarItemProps extends ComponentProps<'div'> {\n  /** Custom class to pass to nav bar item */\n  className?: string;\n  /** TestMetadata to use for nar bar item */\n  testMetadata?: TestMetadata;\n  /** Set visibility on narbaritem */\n  visibility?: 'all' | 'desktop' | 'mobile';\n}\n\nconst NavBarItem: FC<NavBarItemProps> = ({\n  className,\n  testMetadata,\n  children,\n  visibility = 'all',\n  ...otherProps\n}) => {\n  const navBarItemClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-navbar-item',\n        {\n          [`sb-navbar-item__visibility-${visibility}`]: visibility !== 'all',\n        },\n        className,\n      ),\n    [className, visibility],\n  );\n\n  return (\n    <div className={navBarItemClassNames} {...testMetadata} {...otherProps}>\n      {children}\n    </div>\n  );\n};\n\nexport default NavBarItem;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tippyjs/react\");","import { FC, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport Tippy, { TippyProps } from '@tippyjs/react';\n\n// Styles\nimport './Popover.scss';\nimport 'tippy.js/dist/tippy.css';\nimport 'tippy.js/themes/light.css';\nimport 'tippy.js/themes/light-border.css';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface PopoverProps {\n  /** Wrapped element that will toggle the popover */\n  children: ReactNode;\n  /** Class name */\n  className?: string;\n  /** Content Class name */\n  contentClassName?: string;\n  /** The actual content of the popover */\n  popoverContent: TippyProps['content'];\n  /** Props to be passed to the instanced Tippy component */\n  tippyProps?: TippyProps;\n  /** Prop to control hide/show behaviour */\n  visible?: boolean;\n  /** Test IDs for component sections */\n  testMetadata?: {\n    popover?: TestMetadata;\n    popoverContent?: TestMetadata;\n  };\n}\n\nconst defaulTippyProps: TippyProps = {\n  arrow: false,\n};\n\nconst Popover: FC<PopoverProps> = ({\n  className,\n  contentClassName,\n  children,\n  popoverContent,\n  tippyProps,\n  testMetadata,\n  visible,\n}) => {\n  return (\n    <Tippy\n      {...defaulTippyProps}\n      {...tippyProps}\n      className={classNames('sb-popover', className)}\n      visible={visible}\n      content={popoverContent}\n      {...testMetadata?.popover}\n    >\n      <div\n        className={classNames('sb-popover__content', contentClassName)}\n        {...testMetadata?.popoverContent}\n      >\n        {children}\n      </div>\n    </Tippy>\n  );\n};\n\nexport default Popover;\n","import { FC, ReactElement, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport { TippyProps } from '@tippyjs/react';\n\n// Components\nimport Popover from '../Popover/';\n\n// Styles\nimport './Tooltip.scss';\nimport 'tippy.js/dist/tippy.css';\nimport 'tippy.js/themes/light.css';\nimport 'tippy.js/themes/light-border.css';\nimport 'tippy.js/animations/scale.css';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface TooltipProps {\n  children: ReactNode;\n  tippyProps?: TippyProps;\n  className?: string;\n  contentClassName?: string;\n  tooltipContent: ReactElement | string;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst defaultTippyProps: TippyProps = {\n  maxWidth: 'none',\n  interactive: true,\n  arrow: true,\n};\n\nconst Tooltip: FC<TooltipProps> = ({\n  children,\n  className,\n  contentClassName,\n  tooltipContent,\n  tippyProps,\n  testMetadata,\n}) => {\n  return (\n    <Popover\n      className={classNames('sb-tooltip', className)}\n      popoverContent={tooltipContent}\n      tippyProps={{ ...defaultTippyProps, ...tippyProps }}\n      {...testMetadata}\n      {...{ contentClassName }}\n    >\n      {children}\n    </Popover>\n  );\n};\n\nexport default Tooltip;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"tippy.js\");","import { FC, HTMLAttributes, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Tooltip from '../Tooltip';\n\n// Styles\nimport './Typography.scss';\n\n// Types\nimport { TestMetadata, TypographyVariants } from 'types';\n\nconst variantsMapping = {\n  T100: 'h1',\n  T90: 'h2',\n  T80: 'h3',\n  T70: 'h4',\n  T60: 'h5',\n  T50: 'h6',\n  T40: 'p',\n  T30: 'p',\n  T20: 'p',\n  T15: 'p',\n  T10: 'p',\n  T05: 'p',\n} as const;\n\nexport interface TypographyProps extends HTMLAttributes<HTMLElement> {\n  /** Applies the typography style */\n  variant: TypographyVariants;\n  /** Add vertical spacing below the typography element **/\n  bottomGutter?: boolean;\n  clickable?: boolean;\n  bold?: boolean;\n  italic?: boolean;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n  /** Flag to control whether the variants should change size based on screen size */\n  responsive?: boolean;\n  /** Trim text to container and add ellipsis */\n  truncate?: boolean;\n  /** Wrap text */\n  wrap?: boolean;\n  //** Title in tag */\n  name?: string;\n}\n\nconst Typography: FC<TypographyProps> = ({\n  variant,\n  className,\n  bottomGutter = false,\n  clickable = false,\n  bold = false,\n  italic = false,\n  children,\n  testMetadata,\n  responsive = false,\n  truncate = false,\n  wrap = false,\n  name,\n  ...props\n}) => {\n  const CustomTag = variantsMapping[variant];\n\n  const typographyClassNames = useMemo(\n    () =>\n      classNames(\n        `sb-typography sb-typography_${variant}`,\n        {\n          'sb-typography_with-bottom-gutter': bottomGutter,\n          'sb-typography_clickable': clickable,\n          'sb-typography_bold': bold,\n          'sb-typography_italic': italic,\n          'sb-typography_responsive': responsive,\n          'sb-typography_truncate': truncate,\n          'sb-typography_wrap': wrap,\n        },\n        className,\n      ),\n    [\n      variant,\n      bottomGutter,\n      clickable,\n      bold,\n      italic,\n      responsive,\n      truncate,\n      className,\n      wrap,\n    ],\n  );\n\n  const text = (\n    <CustomTag\n      title={name}\n      className={typographyClassNames}\n      {...props}\n      {...testMetadata}\n    >\n      {children}\n    </CustomTag>\n  );\n\n  return truncate ? (\n    <Tooltip tooltipContent={<>{children}</>}>{text}</Tooltip>\n  ) : (\n    text\n  );\n};\n\nexport default Typography;\n","export const ASSET_URL = 'https://dtci-spellbook.s3-us-west-2.amazonaws.com';\n\nexport const IMAGE_URL = `${ASSET_URL}/img`;\n\nexport const ICON_URL = `${IMAGE_URL}/icons`;\n\nexport const STORIES_URL =\n  'https://gitlab.disney.com/dtci-bp-software-solutions/ui/spellbook/-/blob/develop/src';\n","import { FC, ReactNode, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Image from '../../Image';\nimport Link from '../../Link';\nimport NavBarItem from '../../NavBarItem';\nimport Typography from '../../Typography';\n\n// Styles\nimport './Brand.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Utils\nimport { IMAGE_URL } from '../../_utils/config';\n\nexport interface BrandProps {\n  /** Pass in src of image URL to override the default logo */\n  logoSrc?: string;\n  /** Pass in your own logo to use */\n  logo?: ReactNode;\n  /** Text to display after the logo - T50 variant */\n  text?: string;\n  /** Flag to determine if you want text to hide on mobile */\n  hideTextOnMobile?: boolean;\n  /** Path for on click, root default */\n  path?: string;\n  /** Classname for site brand section */\n  className?: string;\n  /** TestMetadata for site brand - wrapper, logo, text */\n  testMetadata?: {\n    wrapper?: TestMetadata;\n    link?: TestMetadata;\n    logo?: TestMetadata;\n    text?: TestMetadata;\n  };\n}\n\nconst Brand: FC<BrandProps> = ({\n  logoSrc = `${IMAGE_URL}/logos/DMED_Icon_White@3x.png`,\n  logo,\n  text,\n  hideTextOnMobile = true,\n  path = '/',\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const siteBrandClassNames = useMemo(\n    () => classNames('sb-brand', className),\n    [className],\n  );\n\n  return (\n    <NavBarItem\n      className={siteBrandClassNames}\n      {...testMetadata?.wrapper}\n      {...otherProps}\n    >\n      <Link href={path} {...testMetadata?.link} className=\"sb-brand__link\">\n        {logo ? (\n          logo\n        ) : (\n          <Image\n            className=\"sb-brand__logo\"\n            src={logoSrc}\n            alt={text ? text : 'App Logo'}\n            {...testMetadata?.logo}\n          />\n        )}\n\n        {text && (\n          <Typography\n            variant=\"T50\"\n            bold\n            className={classNames('sb-brand__text', {\n              'sb-brand__hide-on-mobile': hideTextOnMobile,\n            })}\n            {...testMetadata?.text}\n          >\n            {text}\n          </Typography>\n        )}\n      </Link>\n    </NavBarItem>\n  );\n};\n\nexport default Brand;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/slicedToArray\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@dtci/dash/analytics\");","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Spinner.scss';\n\n// Types\nimport {\n  AnimationOptions,\n  LocationOptions,\n  SizeOptions,\n  TestMetadata,\n} from '../types';\n\nexport interface SpinnerProps {\n  /** Add a class to the spinner */\n  className?: string;\n  /** Loading text for screen readers */\n  loadText?: string;\n  /** Size: smaller, small, medium (default), large */\n  size?: SizeOptions;\n  /** Full URL to a custom image you would like to use */\n  imageUrl?: string;\n  /** Animation: spin (default), bounce, rock, wobble */\n  animation?: AnimationOptions;\n  /** Location: mask, background */\n  /** Mask can break some animations but allows you to change the color of the icon. Use background if Mask is causing problems. */\n  location?: LocationOptions;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Spinner: FC<SpinnerProps> = ({\n  className,\n  loadText = 'Loading...',\n  size = 'medium',\n  imageUrl,\n  animation = 'spin',\n  location = 'mask',\n  testMetadata,\n  ...otherProps\n}) => {\n  const spinnerClassnames = useMemo(\n    () =>\n      classNames(\n        `sb-spinner_${location}`,\n        `sb-spinner_animate_${animation}`,\n        `sb-spinner_${size}`,\n      ),\n    [size, animation, location],\n  );\n\n  let styles = {};\n  if (imageUrl) {\n    if (location === 'mask') {\n      styles = {\n        maskImage: `url(${imageUrl})`,\n        WebkitMaskImage: `url(${imageUrl})`,\n      };\n    } else {\n      styles = {\n        backgroundImage: `url(${imageUrl})`,\n      };\n    }\n  }\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames('sb-spinner', className)}\n      role=\"alert\"\n      aria-live=\"assertive\"\n      {...testMetadata}\n    >\n      <p className=\"sb-spinner-load-text\">{loadText}</p>\n      <div\n        className={spinnerClassnames}\n        style={styles}\n        data-testid=\"spinner-mask\"\n      />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import {\n  ButtonHTMLAttributes,\n  DetailedHTMLProps,\n  FC,\n  HTMLProps,\n  MouseEvent,\n  MouseEventHandler,\n  forwardRef,\n  useCallback,\n  useMemo,\n  useContext,\n} from 'react';\nimport classNames from 'classnames';\n\n// Analytics\nimport {\n  AnalyticsContext,\n  TAnalyticsEventData,\n  handleAnalyticsEvent,\n} from '@dtci/dash/analytics';\n\n// Components\nimport Spinner from '../Spinner';\n\n// Styles\nimport './Button.scss';\n\n// Types\nimport { FontAwesomePackage, TestMetadata } from 'types';\n\nexport interface ButtonProps\n  extends DetailedHTMLProps<\n    ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  > {\n  /** Set the button style: promoted (default), standard, demoted, link */\n  styleType?: 'promoted' | 'standard' | 'demoted' | 'link';\n  /** Set the button color: primary (default), secondary, success, error, warning */\n  colorType?: 'primary' | 'secondary' | 'success' | 'error' | 'warning';\n  /** Set the icon position: before (default), after, stacked */\n  iconPlacement?: 'before' | 'after' | 'stacked';\n  /** Can change the size of the button: smaller, small, large */\n  sizeType?: 'smaller' | 'small' | 'large' | 'auto';\n  /** Name of Font Awesome icon to show or custom icon component */\n  iconType?: string | JSX.Element;\n  /** Package of Font Awesome icon */\n  iconPackage?: FontAwesomePackage;\n  /** Boolean to determine if button has an icon and no label */\n  iconOnly?: boolean;\n  /** Set label text for accessibility, should match button text **/\n  labelText?: string;\n  /** shakeOnDisabledHover */\n  shakeOnDisabledHover?: boolean;\n  /** Indicates if button should be disabled */\n  disabled?: boolean;\n  /** Indicates an async loading state */\n  isFetching?: boolean;\n  /** onClick event handler  */\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  // Test IDs for sections of Button\n  testMetadata?: TestMetadata;\n  /** Border Flush */\n  flush?: 'left' | 'right' | 'flush';\n  /** Additional event information to pass to analytics tracking */\n  analyticsEventData?: TAnalyticsEventData;\n}\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      colorType = 'primary',\n      styleType = 'promoted',\n      labelText,\n      iconType,\n      iconPackage = 'fas',\n      iconPlacement = 'before',\n      sizeType,\n      iconOnly,\n      children,\n      shakeOnDisabledHover,\n      disabled,\n      isFetching = false,\n      onClick,\n      testMetadata,\n      flush,\n      analyticsEventData,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const isStackedButton = iconPlacement === 'stacked';\n\n    const analyticsContext = useContext(AnalyticsContext);\n\n    const handleClick = useCallback(\n      (event: MouseEvent<HTMLButtonElement>) => {\n        if (isFetching) {\n          event.preventDefault();\n          event.stopPropagation();\n          return;\n        }\n        onClick?.(event);\n        handleAnalyticsEvent({\n          analyticsContext,\n          analyticsEventData,\n          componentType: 'Button',\n          actionName: 'click',\n          label:\n            otherProps?.['aria-label'] ||\n            labelText ||\n            children?.toString() ||\n            iconType?.toString() ||\n            '',\n        });\n      },\n      [\n        isFetching,\n        onClick,\n        analyticsContext,\n        otherProps,\n        labelText,\n        children,\n        iconType,\n        analyticsEventData,\n      ],\n    );\n\n    const buttonClassNames = useMemo(\n      () =>\n        classNames(\n          'sb-button',\n          {\n            ['sb-button_' + colorType]: colorType,\n            ['sb-button_' + styleType]: styleType,\n            ['sb-button_' + sizeType]: sizeType,\n            ['sb-button_icon-' + iconPlacement]: iconType && iconPlacement,\n            'sb-button_icon-only': iconOnly,\n            'sb-button_no-icon': !iconType,\n            'sb-button_fetching': isFetching,\n            'sb-button_disabled': isStackedButton && disabled, // only stacked needs to have a class for disabled\n            'sb-shake-on-disabled': shakeOnDisabledHover,\n            'sb-button_async': isFetching,\n            'sb-button__flush-right': flush === 'right',\n            'sb-button__flush': flush === 'flush',\n            'sb-button__flush-left': flush === 'left',\n          },\n          className,\n        ),\n      [\n        colorType,\n        styleType,\n        iconPlacement,\n        iconOnly,\n        shakeOnDisabledHover,\n        className,\n        disabled,\n        isStackedButton,\n        sizeType,\n        isFetching,\n        iconType,\n        flush,\n      ],\n    );\n\n    const stackedButtonWrapperClassNames = useMemo(\n      () =>\n        classNames('sb-stacked-wrapper', {\n          'sb-stacked-wrapper-disabled': disabled,\n        }),\n      [disabled],\n    );\n\n    const loader = (\n      <div className=\"sb-button_spinner-container\">\n        <Spinner size=\"small\" className=\"sb-button_spinner\" />\n      </div>\n    );\n\n    const icon = (\n      <span className=\"sb-button_icon-container\">\n        {typeof iconType === 'string' ? (\n          <>\n            {isFetching && loader}\n            <i\n              className={`${iconPackage} ${iconType} sb-button_icon`}\n              data-testid={\n                testMetadata?.['data-testid'] ? 'button-icon' : undefined\n              }\n            />\n          </>\n        ) : (\n          <>\n            {isFetching && loader}\n            <span className=\"sb-button_icon\">{iconType}</span>\n          </>\n        )}\n      </span>\n    );\n\n    return (\n      <>\n        {!isStackedButton && (\n          <button\n            {...otherProps}\n            ref={ref}\n            className={buttonClassNames}\n            aria-label={labelText}\n            title={labelText}\n            disabled={disabled}\n            onClick={handleClick}\n            {...testMetadata}\n          >\n            {iconType &&\n              (iconOnly || !iconPlacement || iconPlacement === 'before') &&\n              icon}\n\n            {!iconOnly && <span className=\"sb-button-text\">{children}</span>}\n            {isFetching && !iconType && loader}\n            {iconType && !iconOnly && iconPlacement === 'after' && icon}\n          </button>\n        )}\n\n        {isStackedButton && (\n          <button\n            {...otherProps}\n            disabled={disabled}\n            aria-label={labelText}\n            ref={ref}\n            title={labelText}\n            className={stackedButtonWrapperClassNames}\n            onClick={handleClick}\n          >\n            <span className={buttonClassNames}>{icon}</span>\n            <div className=\"sb-stacked-label\">{children}</div>\n          </button>\n        )}\n      </>\n    );\n  },\n);\n\nButton.displayName = 'Button';\n\nexport default Button as FC<HTMLProps<HTMLButtonElement> & ButtonProps>;\n","import { FC, useState, useCallback, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Button from '../../Button';\nimport NavBarItem from '../../NavBarItem';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Styles\nimport './Controls.scss';\n\nexport interface ControlsProps {\n  /** Classname for Controls section */\n  className?: string;\n  /** TestMetadata for container and expand button */\n  testMetadata?: {\n    container?: TestMetadata;\n    expandButton?: TestMetadata;\n  };\n}\n\nconst Controls: FC<ControlsProps> = ({ className, testMetadata, children }) => {\n  const [collapse, setCollapse] = useState<boolean>(true);\n\n  const hamburgerClick = useCallback(() => {\n    setCollapse(!collapse);\n  }, [collapse]);\n\n  const controlsClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-controls',\n        {\n          'sb-controls__collapsed': collapse,\n          'sb-controls__open': !collapse,\n        },\n        className,\n      ),\n    [className, collapse],\n  );\n\n  return (\n    <>\n      <NavBarItem className={controlsClassNames} {...testMetadata?.container}>\n        {children}\n      </NavBarItem>\n\n      {children && (\n        <Button\n          className=\"sb-controls__button\"\n          iconType={collapse ? 'fa-bars' : 'fa-times'}\n          iconOnly\n          labelText=\"Toggle Controls Section\"\n          styleType=\"link\"\n          sizeType=\"large\"\n          {...testMetadata?.expandButton}\n          onClick={hamburgerClick}\n          role=\"button\"\n        />\n      )}\n    </>\n  );\n};\n\nexport default Controls;\n","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport NavBarItem from '../../NavBarItem';\n\n// Styles\nimport './Utility.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface UtilityProps {\n  /** Classname for site brand section */\n  className?: string;\n  /** TestMetadata for utility section - menu wrapper, menu */\n  testMetadata?: TestMetadata;\n}\n\nexport const Utility: FC<UtilityProps> = ({\n  className,\n  testMetadata,\n  children,\n}) => {\n  const utilityClassNames = useMemo(\n    () => classNames('sb-utility', className),\n    [className],\n  );\n\n  return (\n    <NavBarItem className={utilityClassNames} {...testMetadata}>\n      {children}\n    </NavBarItem>\n  );\n};\n\nexport default Utility;\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","sticky","className","testMetadata","children","otherProps","classNames","Image","forwardRef","ref","alt","disabled","href","rel","underline","buttonGroupClassNames","useMemo","visibility","navBarItemClassNames","defaulTippyProps","arrow","contentClassName","popoverContent","tippyProps","visible","content","popover","defaultTippyProps","maxWidth","interactive","tooltipContent","variantsMapping","T100","T90","T80","T70","T60","T50","T40","T30","T20","T15","T10","T05","variant","bottomGutter","clickable","bold","italic","responsive","truncate","wrap","name","props","CustomTag","typographyClassNames","text","title","IMAGE_URL","logoSrc","logo","hideTextOnMobile","path","siteBrandClassNames","wrapper","link","src","loadText","size","imageUrl","animation","location","spinnerClassnames","styles","maskImage","WebkitMaskImage","backgroundImage","role","style","Button","colorType","styleType","labelText","iconType","iconPackage","iconPlacement","sizeType","iconOnly","shakeOnDisabledHover","isFetching","onClick","flush","analyticsEventData","isStackedButton","analyticsContext","useContext","AnalyticsContext","handleClick","useCallback","event","preventDefault","stopPropagation","handleAnalyticsEvent","componentType","actionName","label","toString","buttonClassNames","stackedButtonWrapperClassNames","loader","icon","undefined","displayName","useState","collapse","setCollapse","hamburgerClick","controlsClassNames","container","expandButton","utilityClassNames"],"sourceRoot":""}