import { SyntheticEvent, ReactNode } from 'react';
import { ContainerProps } from 'Container';
import { PanelProps } from 'PanelLayout';
import { Column } from './ContentPlatforms/StandardTable/types';
import { OptionTypeBase } from 'react-select';
export type FormDateRangeValue = {
    startDate: Date;
    endDate: Date;
};
export type FormValue = number | string | boolean | FormDateRangeValue;
export type OnChangeType = (e: SyntheticEvent) => void;
export type LocationOptions = 'background' | 'mask';
export type AnimationOptions = 'spin' | 'bounce' | 'wobble' | 'rock';
export type SizeOptions = 'smaller' | 'small' | 'medium' | 'large';
export type SpacingOptions = 'none' | 'normal' | 'tight' | 'loose';
export type MarginOptions = 'centered' | SpacingOptions;
export type WidthOptions = 'none' | 'standard' | 'thin' | 'thick';
export type BorderOptions = 'none' | 'top' | 'right' | 'bottom' | 'left';
export type MessageType = 'warning' | 'error' | 'success';
export type PrismFill = 'black' | 'white' | 'error' | 'success' | 'warning' | 'gray' | 'theme' | 'black-alpha-10' | 'black-alpha-15' | 'black-alpha-20' | 'white-alpha-10' | 'white-alpha-15' | 'white-alpha-20';
export type ElevationHeight = 'none' | 'low' | 'mid' | 'high';
export type FontAwesomePackage = 'fas' | 'fab' | 'far' | 'fal' | 'fad' | 'fa-solid' | 'fa-brands' | 'fa-regular' | 'fa-light' | 'fa-thin' | 'fa-duotone';
export interface FormOption {
    label: string | ReactNode;
    value: FormValue;
    helpText?: string;
    name?: string;
}
export interface FormCheckboxFieldOption extends CheckOption {
    readonly?: boolean;
}
export interface CheckOption extends FormOption {
    id: string | number;
}
export interface Result {
    id?: number;
    image?: string;
    title: string;
    description?: string;
}
export type FormOptionOnChange = (value: FormValue) => void;
export interface Option {
    label: string;
    value: string;
    meta?: Record<string, unknown>;
}
export interface SelectOption extends OptionTypeBase {
    value: string;
    label: string;
    isDisabled?: boolean;
}
export interface ReleaseNote {
    authorId: string;
    id: string;
    note: string;
    published: boolean;
    releaseDate: string;
    title: string;
    unread: boolean;
    versionNumber: string;
}
export interface TestMetadata {
    'data-testid'?: string;
    'data-qeid'?: string;
}
export interface FAQQuestion {
    title: string;
    content: string;
}
export interface FAQGroup {
    title: string;
    questions: FAQQuestion[];
}
export type TemplateProps = Omit<PanelProps, 'name'> & Partial<Pick<PanelProps, 'name'>>;
export interface PanelTemplateProps extends TemplateProps {
    /** Container overrides */
    containerProps?: Omit<ContainerProps, 'children'>;
    /** Custom class name for layout */
    className?: string;
    /** Test data IDs for layout */
    testMetadata?: TestMetadata;
}
export type NivoBar = {
    [key: string]: string | number;
};
export interface SBFile extends Pick<File, 'name' | 'lastModified' | 'type' | 'size'> {
    id?: string;
    error?: boolean;
    message?: string;
    url?: string;
    new?: boolean;
    deleting?: boolean;
    uploadedDate?: number;
    isReadOnly?: boolean;
}
export type DataType = 'text' | 'number' | 'date' | 'array';
export declare enum ActionType {
    Sort = "Sort",
    Display = "Display"
}
export type DataUtilityWrapperConfig = {
    /** Defines what the data in the data utility looks like and how it should behave */
    dataDefinition: DataDefinition[];
    /** What are the current action states for each action that should be applied */
    actionState?: ActionState[];
    /** Export options that the data utility bar should display */
    exportOptions?: Option[];
};
export type ActionState = {
    actionType: ActionType.Sort | ActionType.Display;
    dataKey: string;
    dataLabel: string;
    value?: string | number;
    direction?: SortDirection;
    hidden?: boolean;
};
export type DataDefinition = {
    dataKey: string;
    dataType: DataType;
    field: string;
    label: string;
    sortDefinition?: DataSortDefinition;
    displayDefinition?: DataDisplayDefinition;
    column?: Column;
};
export type SortDirection = 'ASC' | 'DESC';
export type DataSortDefinition = {
    sortable: boolean;
    direction: SortDirection;
};
export interface Option {
    value: string;
    label: string;
}
export type DataFilterParams = {
    filterValues?: Option[];
    pickListName?: string;
};
export type FilterType = 'text' | 'typeahead' | 'select' | 'multiselect' | 'date' | 'daterange';
export type DataDisplayDefinition = {
    visible: boolean;
    allowHide?: boolean;
};
export type BadgeTypes = 'primary' | 'secondary' | 'base' | 'error' | 'success' | 'warning' | 'active';
export type TypographyVariants = 'T100' | 'T90' | 'T80' | 'T70' | 'T60' | 'T50' | 'T40' | 'T30' | 'T20' | 'T15' | 'T10' | 'T05';
export type ContainerStateType = 'error' | 'loading' | 'empty';
