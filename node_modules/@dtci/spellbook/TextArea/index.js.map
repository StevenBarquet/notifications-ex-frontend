{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/slicedToArray\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"@tippyjs/react\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/Popover/Popover.tsx","webpack://@dtci/spellbook/./src/Tooltip/Tooltip.tsx","webpack://@dtci/spellbook/external commonjs \"tippy.js\"","webpack://@dtci/spellbook/./src/Typography/Typography.tsx","webpack://@dtci/spellbook/external commonjs \"@dtci/dash/analytics\"","webpack://@dtci/spellbook/./src/TextArea/TextArea.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/slicedToArray\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tippyjs/react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import { FC, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport Tippy, { TippyProps } from '@tippyjs/react';\n\n// Styles\nimport './Popover.scss';\nimport 'tippy.js/dist/tippy.css';\nimport 'tippy.js/themes/light.css';\nimport 'tippy.js/themes/light-border.css';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface PopoverProps {\n  /** Wrapped element that will toggle the popover */\n  children: ReactNode;\n  /** Class name */\n  className?: string;\n  /** Content Class name */\n  contentClassName?: string;\n  /** The actual content of the popover */\n  popoverContent: TippyProps['content'];\n  /** Props to be passed to the instanced Tippy component */\n  tippyProps?: TippyProps;\n  /** Prop to control hide/show behaviour */\n  visible?: boolean;\n  /** Test IDs for component sections */\n  testMetadata?: {\n    popover?: TestMetadata;\n    popoverContent?: TestMetadata;\n  };\n}\n\nconst defaulTippyProps: TippyProps = {\n  arrow: false,\n};\n\nconst Popover: FC<PopoverProps> = ({\n  className,\n  contentClassName,\n  children,\n  popoverContent,\n  tippyProps,\n  testMetadata,\n  visible,\n}) => {\n  return (\n    <Tippy\n      {...defaulTippyProps}\n      {...tippyProps}\n      className={classNames('sb-popover', className)}\n      visible={visible}\n      content={popoverContent}\n      {...testMetadata?.popover}\n    >\n      <div\n        className={classNames('sb-popover__content', contentClassName)}\n        {...testMetadata?.popoverContent}\n      >\n        {children}\n      </div>\n    </Tippy>\n  );\n};\n\nexport default Popover;\n","import { FC, ReactElement, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport { TippyProps } from '@tippyjs/react';\n\n// Components\nimport Popover from '../Popover/';\n\n// Styles\nimport './Tooltip.scss';\nimport 'tippy.js/dist/tippy.css';\nimport 'tippy.js/themes/light.css';\nimport 'tippy.js/themes/light-border.css';\nimport 'tippy.js/animations/scale.css';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface TooltipProps {\n  children: ReactNode;\n  tippyProps?: TippyProps;\n  className?: string;\n  contentClassName?: string;\n  tooltipContent: ReactElement | string;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst defaultTippyProps: TippyProps = {\n  maxWidth: 'none',\n  interactive: true,\n  arrow: true,\n};\n\nconst Tooltip: FC<TooltipProps> = ({\n  children,\n  className,\n  contentClassName,\n  tooltipContent,\n  tippyProps,\n  testMetadata,\n}) => {\n  return (\n    <Popover\n      className={classNames('sb-tooltip', className)}\n      popoverContent={tooltipContent}\n      tippyProps={{ ...defaultTippyProps, ...tippyProps }}\n      {...testMetadata}\n      {...{ contentClassName }}\n    >\n      {children}\n    </Popover>\n  );\n};\n\nexport default Tooltip;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"tippy.js\");","import { FC, HTMLAttributes, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Tooltip from '../Tooltip';\n\n// Styles\nimport './Typography.scss';\n\n// Types\nimport { TestMetadata, TypographyVariants } from 'types';\n\nconst variantsMapping = {\n  T100: 'h1',\n  T90: 'h2',\n  T80: 'h3',\n  T70: 'h4',\n  T60: 'h5',\n  T50: 'h6',\n  T40: 'p',\n  T30: 'p',\n  T20: 'p',\n  T15: 'p',\n  T10: 'p',\n  T05: 'p',\n} as const;\n\nexport interface TypographyProps extends HTMLAttributes<HTMLElement> {\n  /** Applies the typography style */\n  variant: TypographyVariants;\n  /** Add vertical spacing below the typography element **/\n  bottomGutter?: boolean;\n  clickable?: boolean;\n  bold?: boolean;\n  italic?: boolean;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n  /** Flag to control whether the variants should change size based on screen size */\n  responsive?: boolean;\n  /** Trim text to container and add ellipsis */\n  truncate?: boolean;\n  /** Wrap text */\n  wrap?: boolean;\n  //** Title in tag */\n  name?: string;\n}\n\nconst Typography: FC<TypographyProps> = ({\n  variant,\n  className,\n  bottomGutter = false,\n  clickable = false,\n  bold = false,\n  italic = false,\n  children,\n  testMetadata,\n  responsive = false,\n  truncate = false,\n  wrap = false,\n  name,\n  ...props\n}) => {\n  const CustomTag = variantsMapping[variant];\n\n  const typographyClassNames = useMemo(\n    () =>\n      classNames(\n        `sb-typography sb-typography_${variant}`,\n        {\n          'sb-typography_with-bottom-gutter': bottomGutter,\n          'sb-typography_clickable': clickable,\n          'sb-typography_bold': bold,\n          'sb-typography_italic': italic,\n          'sb-typography_responsive': responsive,\n          'sb-typography_truncate': truncate,\n          'sb-typography_wrap': wrap,\n        },\n        className,\n      ),\n    [\n      variant,\n      bottomGutter,\n      clickable,\n      bold,\n      italic,\n      responsive,\n      truncate,\n      className,\n      wrap,\n    ],\n  );\n\n  const text = (\n    <CustomTag\n      title={name}\n      className={typographyClassNames}\n      {...props}\n      {...testMetadata}\n    >\n      {children}\n    </CustomTag>\n  );\n\n  return truncate ? (\n    <Tooltip tooltipContent={<>{children}</>}>{text}</Tooltip>\n  ) : (\n    text\n  );\n};\n\nexport default Typography;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@dtci/dash/analytics\");","import {\n  ClassAttributes,\n  DetailedHTMLProps,\n  FC,\n  TextareaHTMLAttributes,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Typography from '../Typography';\n\n// Styles\nimport './TextArea.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Analytics\nimport {\n  AnalyticsContext,\n  handleAnalyticsEvent,\n  TAnalyticsEventData,\n} from '@dtci/dash/analytics';\n\nexport interface TextAreaProps\n  extends DetailedHTMLProps<\n    TextareaHTMLAttributes<HTMLTextAreaElement>,\n    HTMLTextAreaElement\n  > {\n  /** string value of the text insides the text area */\n  value?: string;\n  /** Determine if field is required */\n  required?: boolean;\n  /** If label is not visible, use aria-label for screen readers */\n  labelText?: string;\n  /** ref form inner input **/\n  inputRef?: ClassAttributes<HTMLTextAreaElement>['ref'];\n  /** Width of the Text Area */\n  width?: 'small' | 'medium' | 'large' | 'auto';\n  /** Error State */\n  isError?: boolean;\n  /** default number of lines to determine height */\n  rows?: number;\n  /** Max length of characters required */\n  maxLength?: number;\n  /** show a character count */\n  charCount?: boolean;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n  /** Additional event information to pass to analytics tracking */\n  analyticsEventData?: TAnalyticsEventData;\n}\n\n/** TextArea components are useful for editing large areas of text such as paragraphs */\nconst TextArea: FC<TextAreaProps> = ({\n  className,\n  inputRef,\n  required,\n  labelText,\n  width = 'small',\n  isError = false,\n  rows,\n  maxLength,\n  charCount = false,\n  testMetadata,\n  analyticsEventData,\n  ...otherProps\n}) => {\n  const textAreaClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-textarea',\n        {\n          'sb-textarea_error': isError,\n          'sb-textarea__is-required': required,\n          'sb-textarea__size-small': width === 'small',\n          'sb-textarea__size-medium': width === 'medium',\n          'sb-textarea__size-large': width === 'large',\n          'sb-textarea__size-auto': width === 'auto',\n          'sb-textarea__height-auto': rows,\n        },\n        className,\n      ),\n    [className, required, width, rows, isError],\n  );\n\n  const analyticsContext = useContext(AnalyticsContext);\n  const [chars, setChars] = useState(0);\n  const { onFocus, onBlur, onChange, defaultValue } = otherProps;\n\n  useEffect(() => {\n    if (defaultValue && charCount) {\n      setChars(defaultValue?.toString().length);\n    }\n  }, [defaultValue, charCount]);\n\n  const handleOnFocus = (e: React.FocusEvent<HTMLTextAreaElement>): void => {\n    onFocus?.(e);\n    handleAnalyticsEvent({\n      analyticsContext,\n      analyticsEventData,\n      componentType: 'TextArea',\n      actionName: 'focus',\n      label:\n        otherProps?.['aria-label'] ||\n        otherProps?.name ||\n        labelText ||\n        testMetadata?.['data-testid'] ||\n        className ||\n        '',\n      value: [{ text: e.target.value }],\n    });\n  };\n\n  const handleOnBlur = (e: React.FocusEvent<HTMLTextAreaElement>): void => {\n    onBlur?.(e);\n    handleAnalyticsEvent({\n      analyticsContext,\n      analyticsEventData,\n      componentType: 'TextArea',\n      actionName: 'blur',\n      label:\n        otherProps?.['aria-label'] ||\n        otherProps?.name ||\n        labelText ||\n        className ||\n        testMetadata?.['data-testid'] ||\n        '',\n      value: [{ text: e.target.value }],\n    });\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n    charCount && setChars(e.target.value.length);\n    onChange?.(e);\n  };\n\n  return (\n    <div>\n      <textarea\n        {...otherProps}\n        onFocus={handleOnFocus}\n        onBlur={handleOnBlur}\n        className={textAreaClassNames}\n        required={required}\n        aria-required={required}\n        aria-label={labelText}\n        ref={inputRef}\n        rows={rows}\n        onChange={handleChange}\n        maxLength={maxLength}\n        {...testMetadata}\n      />\n      {charCount && (\n        <Typography\n          variant=\"T10\"\n          className=\"sb-textarea__characters\"\n          testMetadata={{ 'data-testid': 'textAreaCharCount' }}\n        >{`${chars} ${maxLength ? ' / ' + maxLength : ''}`}</Typography>\n      )}\n    </div>\n  );\n};\n\nexport default TextArea;\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","defaulTippyProps","arrow","className","contentClassName","children","popoverContent","tippyProps","testMetadata","visible","classNames","content","popover","defaultTippyProps","maxWidth","interactive","tooltipContent","variantsMapping","T100","T90","T80","T70","T60","T50","T40","T30","T20","T15","T10","T05","variant","bottomGutter","clickable","bold","italic","responsive","truncate","wrap","name","props","CustomTag","typographyClassNames","useMemo","text","title","inputRef","required","labelText","width","isError","rows","maxLength","charCount","analyticsEventData","otherProps","textAreaClassNames","analyticsContext","useContext","AnalyticsContext","useState","chars","setChars","onFocus","onBlur","onChange","defaultValue","useEffect","toString","length","e","handleAnalyticsEvent","componentType","actionName","label","target","ref"],"sourceRoot":""}