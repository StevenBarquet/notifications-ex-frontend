import { ComponentProps, FC, ReactNode, Ref } from 'react';
import { LoaderProps } from '../Loader';
import './Container.scss';
import { ElevationHeight, PrismFill, SizeOptions, SpacingOptions, WidthOptions, MarginOptions, TestMetadata, ContainerStateType } from '../types';
export interface ContainerProps extends ComponentProps<'div'> {
    /** Elements to Wrap */
    children: ReactNode;
    /** Class name */
    className?: string;
    /** Controls the fill of the container: transparent, white (default), gray, theme */
    fill?: 'transparent' | 'error-light' | PrismFill;
    /** Controls the padding: none, normal (default), tight, loose. Either set one value to set all positions or four (T-R-B-L) */
    padding?: SpacingOptions | SpacingOptions[];
    /** Controls the margin: none, normal (default), tight, loose, centered. Either set one value to set all positions or four (T-R-B-L) */
    margin?: MarginOptions | SpacingOptions[];
    /** Controls the width of the stroke on the container: none (default), standard, thin, thick */
    strokeWidth?: WidthOptions;
    /** Controls the color of the stroke, prism system colors with black by default */
    strokeColor?: PrismFill;
    /** Drives corner radius and geometric shape: none, small (default), medium, large  */
    cornerRadius?: 'none' | SizeOptions;
    /** Creates visual hierarchy by using shadow and Z-depth: none, low, mid (default), high  */
    elevation?: ElevationHeight;
    /** Event to fire when the card is clicked */
    onClick?: () => void;
    /** Ref for container div */
    containerRef?: Ref<HTMLDivElement>;
    /** Height of the container */
    height?: 'auto' | 'full';
    /** Test IDs for sections of Container */
    testMetadata?: TestMetadata;
    /** Container state props */
    containerStateProps?: ContainerStateProps;
}
export interface ContainerStateProps {
    /** The current state of the container */
    containerState?: ContainerStateType;
    /** An optional override message to display */
    message?: string;
    /** Loader size to be used for loading state */
    loaderSize?: LoaderProps['size'];
}
declare const Container: FC<ContainerProps>;
export default Container;
