{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/Image/Image.tsx","webpack://@dtci/spellbook/./src/_utils/config.ts","webpack://@dtci/spellbook/./src/Avatar/Avatar.tsx","webpack://@dtci/spellbook/./src/AvatarGroup/AvatarGroup.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import { ComponentProps, forwardRef } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Image.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\ntype Props = ComponentProps<'img'>;\nexport type ImageProps = ComponentProps<typeof Image> & {\n  testMetadata?: TestMetadata;\n};\n\nconst Image = forwardRef<HTMLImageElement, Props>(function InnerImage(\n  { className, alt = '', ...otherProps },\n  ref,\n) {\n  return (\n    <img\n      alt={alt}\n      className={classNames('sb-image', className)}\n      ref={ref}\n      {...otherProps}\n    />\n  );\n});\n\nexport default Image;\n","export const ASSET_URL = 'https://dtci-spellbook.s3-us-west-2.amazonaws.com';\n\nexport const IMAGE_URL = `${ASSET_URL}/img`;\n\nexport const ICON_URL = `${IMAGE_URL}/icons`;\n\nexport const STORIES_URL =\n  'https://gitlab.disney.com/dtci-bp-software-solutions/ui/spellbook/-/blob/develop/src';\n","import {\n  ComponentProps,\n  FC,\n  ReactEventHandler,\n  RefObject,\n  useMemo,\n} from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Image from '../Image';\n\n// Styles\nimport './Avatar.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\n// Utils\nimport { IMAGE_URL } from '../_utils/config';\n\nexport interface AvatarProps extends ComponentProps<'div'> {\n  /** Accessibility label (do not set if name appears with text) */\n  accessibilityLabel?: string;\n  /** Image URL (fallback if none provided)*/\n  imgSrc?: string;\n  /** Type of border radius: circle (default), rounded */\n  radiusType?: 'circle' | 'rounded';\n  /** Size: xs (32x32), small (40x40), medium (48x48, default), large (72x72), xl (120x120) */\n  size?: 'xs' | 'small' | 'medium' | 'large' | 'xl';\n  /** Class name */\n  className?: string;\n  /** Enable text mode */\n  textMode?: boolean;\n  /** Text to display */\n  text?: string;\n  /** Title to display when mouseover */\n  title?: string;\n  // Test IDs for sections of Avatar\n  testMetadata?: {\n    avatar?: TestMetadata;\n    avatarImg?: TestMetadata;\n  };\n  /** Callback for image loading failures */\n  onError?: ReactEventHandler<HTMLImageElement>;\n  /** Image reference */\n  imgRef?: RefObject<HTMLImageElement>;\n}\n\nexport const avatarPlaceholder = `${IMAGE_URL}/avatar.jpg`;\n\nconst Avatar: FC<AvatarProps> = ({\n  accessibilityLabel,\n  imgSrc,\n  radiusType = 'circle',\n  size = 'medium',\n  className,\n  textMode = false,\n  text = '',\n  title,\n  testMetadata = {\n    avatar: { 'data-testid': 'avatar' },\n    avatarImg: { 'data-testid': 'avatarImg' },\n  },\n  onError,\n  imgRef,\n  ...otherProps\n}) => {\n  const avatarClassNames = useMemo(\n    () =>\n      classNames(\n        'sb-avatar',\n        {\n          'sb-avatar_circle': radiusType === 'circle',\n          'sb-avatar_rounded': radiusType === 'rounded',\n          'sb-avatar_xs': size === 'xs',\n          'sb-avatar_small': size === 'small',\n          'sb-avatar_medium': size === 'medium',\n          'sb-avatar_large': size === 'large',\n          'sb-avatar_xl': size === 'xl',\n          'sb-avatar_text': textMode,\n        },\n        className,\n      ),\n    [className, radiusType, size, textMode],\n  );\n\n  return (\n    <div {...otherProps} className={avatarClassNames} {...testMetadata?.avatar}>\n      {!textMode && (\n        <Image\n          className=\"sb-avatar__image\"\n          src={imgSrc || avatarPlaceholder}\n          alt={accessibilityLabel}\n          title={title}\n          onError={onError}\n          ref={imgRef}\n          {...testMetadata?.avatarImg}\n        />\n      )}\n      {textMode && (\n        <div className=\"sb-avatar__text\">\n          <div className=\"sb-avatar__text_content\">{text}</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Avatar;\n","import { useMemo, useCallback, FC } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport Avatar, { AvatarProps } from '../Avatar/Avatar';\n\n// Styles\nimport './AvatarGroup.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface AvatarGroupProps {\n  /* Max visible avatars */\n  maxVisible?: number;\n  /* Avartars elements*/\n  avatars: JSX.Element[];\n  /* Props for count text avatar */\n  avatarCountProps?: AvatarProps;\n  /* Spacing type */\n  spacing?: 'none' | 'stack' | 'small' | 'medium' | 'large';\n  /**Custom classes */\n  className?: string;\n  // Test IDs for sections of AvatarGroup\n  testMetadata?: TestMetadata;\n}\n\nconst AvatarGroup: FC<AvatarGroupProps> = ({\n  maxVisible,\n  spacing = 'stack',\n  avatars,\n  avatarCountProps,\n  testMetadata,\n  className,\n}) => {\n  const hideNumber = useMemo(() => {\n    if (maxVisible || maxVisible === 0) {\n      if (avatars.length > maxVisible) {\n        return avatars.length - maxVisible;\n      } else {\n        return undefined;\n      }\n    }\n  }, [avatars.length, maxVisible]);\n\n  const ovelapStyles = useCallback(\n    (index) => {\n      return { zIndex: avatars.length - index };\n    },\n    [avatars],\n  );\n\n  return (\n    <div\n      className={classNames(\n        'sb-avatar-group',\n        {\n          'sb-avatar-group_stacked': spacing === 'stack',\n          'sb-avatar-group_small': spacing === 'small',\n          'sb-avatar-group_medium': spacing === 'medium',\n          'sb-avatar-group_large': spacing === 'large',\n        },\n        className,\n      )}\n      {...testMetadata}\n    >\n      {\n        // NOTE: if `maxVisible` is undefined it'll not exclude any elements\n        avatars.slice(0, maxVisible).map((avatar, index) => (\n          <div\n            key={index}\n            className=\"sb-avatar-group__avatar-container\"\n            style={spacing === 'stack' ? ovelapStyles(index) : {}}\n          >\n            {avatar}\n          </div>\n        ))\n      }\n      {hideNumber && (\n        <div className=\"sb-avatar-group__avatar-container\">\n          <Avatar\n            textMode\n            text={`+${hideNumber}`}\n            className=\"sb-avatar-group_text\"\n            {...avatarCountProps}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AvatarGroup;\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","Image","forwardRef","ref","className","alt","otherProps","classNames","IMAGE_URL","avatarPlaceholder","accessibilityLabel","imgSrc","radiusType","size","textMode","text","title","testMetadata","avatar","avatarImg","onError","imgRef","avatarClassNames","useMemo","src","maxVisible","spacing","avatars","avatarCountProps","hideNumber","length","ovelapStyles","useCallback","index","zIndex","slice","map","style"],"sourceRoot":""}