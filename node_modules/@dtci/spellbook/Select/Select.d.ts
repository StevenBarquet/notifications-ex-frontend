import { ReactNode } from 'react';
import { Props as ReactSelectProps, OptionTypeBase, OptionsType } from 'react-select';
import './Select.scss';
import { TestMetadata } from 'types';
export type SelectProps<T extends OptionTypeBase> = ReactSelectProps<T> & {
    testMetadata?: TestMetadata;
};
declare const Select: <T extends OptionTypeBase = {
    value: string;
    label: string;
    isDisabled?: boolean | undefined;
}>({ className, components, styles, isFetching, icon, useMenuPortal, iconContainerClassName, isError, testMetadata, flush, creatable, async, loadOptions, analyticsEventData, ...otherProps }: ReactSelectProps<T, false> & {
    testMetadata?: TestMetadata | undefined;
} & {
    icon?: ReactNode;
    iconContainerClassName?: string | undefined;
    useMenuPortal?: boolean | undefined;
    isError?: boolean | undefined;
    flush?: "left" | "right" | "flush" | undefined;
    creatable?: boolean | undefined;
    async?: boolean | undefined;
    loadOptions?: ((inputValue: string, callback: (options: OptionsType<T>) => void) => void | Promise<T[]>) | undefined;
}) => JSX.Element | null;
export default Select;
