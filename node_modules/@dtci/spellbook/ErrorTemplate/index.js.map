{"version":3,"file":"index.js","mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,MAAM,WACT,O,wBCTA,IAAIC,EAAsB,CCA1BA,EAAwB,SAASN,GAChC,IAAIO,EAASP,GAAUA,EAAOQ,WAC7B,WAAa,OAAOR,EAAgB,OAAG,EACvC,WAAa,OAAOA,CAAQ,EAE7B,OADAM,EAAoBG,EAAEF,EAAQ,CAAEJ,EAAGI,IAC5BA,CACR,ECNAD,EAAwB,SAASP,EAASW,GACzC,IAAI,IAAIC,KAAOD,EACXJ,EAAoBM,EAAEF,EAAYC,KAASL,EAAoBM,EAAEb,EAASY,IAC5EE,OAAOC,eAAef,EAASY,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAG3E,ECPAL,EAAwB,SAASW,EAAKC,GAAQ,OAAOL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,EAAO,ECCtGZ,EAAwB,SAASP,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAef,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAef,EAAS,aAAc,CAAEyB,OAAO,GACvD,G,iSCNA,IAAI,EAA+BC,QAAQ,yC,SCAvC,EAA+BA,QAAQ,kD,SCAvC,EAA+BA,QAAQ,SCAvC,EAA+BA,QAAQ,c,SCAvC,EAA+BA,QAAQ,qB,2mBCiB3C,IAkBA,EAlB4C,SAAH,GAKnC,IAJJC,EAAQ,EAARA,SACAC,EAAS,EAATA,UACAC,EAAY,EAAZA,aACGC,EAAU,SAEPC,GAAyBC,EAAAA,EAAAA,UAC7B,kBAAMC,IAAW,mBAAoBL,EAAU,GAC/C,CAACA,IAGH,OACE,wBAASE,GAAU,IAAEF,UAAWG,GAA4BF,GAAY,aACrEF,IAGP,E,+lBChBA,IAYA,EAZ8C,SAAH,OACzCA,EAAQ,EAARA,SACAE,EAAY,EAAZA,aACGC,EAAU,gBAEb,sBAAKF,UAAU,qBAAwBC,GAAkBC,GAAU,cACjE,SAAC,EAAY,CAACF,UAAU,kCAAiC,SACtDD,MAEC,EC1BJ,EAA+BD,QAAQ,wB,opBCgC3C,IAoDA,EApDkC,SAAH,GASzB,IARJE,EAAS,EAATA,UAAS,IACTM,SAAAA,OAAQ,IAAG,eAAY,MACvBC,KAAAA,OAAI,IAAG,WAAQ,EACfC,EAAQ,EAARA,SAAQ,IACRC,UAAAA,OAAS,IAAG,SAAM,MAClBC,SAAAA,OAAQ,IAAG,SAAM,EACjBT,EAAY,EAAZA,aACGC,EAAU,SAEPS,GAAoBP,EAAAA,EAAAA,UACxB,kBACEC,IAAW,cAAD,OACMK,GAAQ,6BACAD,GAAS,qBACjBF,GACf,GACH,CAACA,EAAME,EAAWC,IAGhBE,EAAS,CAAC,EAcd,OAbIJ,IAEAI,EADe,SAAbF,EACO,CACPG,UAAW,OAAF,OAASL,EAAQ,KAC1BM,gBAAiB,OAAF,OAASN,EAAQ,MAGzB,CACPO,gBAAiB,OAAF,OAASP,EAAQ,QAMpC,yBACMN,GAAU,IACdF,UAAWK,IAAW,aAAcL,GACpCgB,KAAK,QACL,YAAU,aACNf,GAAY,eAEhB,cAAGD,UAAU,uBAAsB,SAAEM,KACrC,gBACEN,UAAWW,EACXM,MAAOL,EACP,cAAY,oBAIpB,E,oyBCfA,IAAMM,GAASC,EAAAA,EAAAA,aACb,WAqBEC,GACG,IApBDpB,EAAS,EAATA,UAAS,IACTqB,UAAAA,OAAS,IAAG,YAAS,MACrBC,UAAAA,OAAS,IAAG,aAAU,EACtBC,EAAS,EAATA,UACAC,EAAQ,EAARA,SAAQ,IACRC,YAAAA,OAAW,IAAG,QAAK,MACnBC,cAAAA,OAAa,IAAG,WAAQ,EACxBC,EAAQ,EAARA,SACAC,EAAQ,EAARA,SACA7B,EAAQ,EAARA,SACA8B,EAAoB,EAApBA,qBACAC,EAAQ,EAARA,SAAQ,IACRC,WAAAA,OAAU,IAAG,GAAK,EAClBC,EAAO,EAAPA,QACA/B,EAAY,EAAZA,aACAgC,EAAK,EAALA,MACAC,EAAkB,EAAlBA,mBACGhC,EAAU,SAITiC,EAAoC,YAAlBT,EAElBU,GAAmBC,EAAAA,EAAAA,YAAWC,EAAAA,kBAE9BC,GAAcC,EAAAA,EAAAA,cAClB,SAACC,GACC,GAAIV,EAGF,OAFAU,EAAMC,sBACND,EAAME,kBAGRX,SAAAA,EAAUS,IACVG,EAAAA,EAAAA,sBAAqB,CACnBR,iBAAAA,EACAF,mBAAAA,EACAW,cAAe,SACfC,WAAY,QACZC,OACE7C,aAAU,EAAVA,EAAa,gBACbqB,IACAxB,aAAQ,EAARA,EAAUiD,cACVxB,aAAQ,EAARA,EAAUwB,aACV,IAEN,GACA,CACEjB,EACAC,EACAI,EACAlC,EACAqB,EACAxB,EACAyB,EACAU,IAIEe,GAAmB7C,EAAAA,EAAAA,UACvB,wBACEC,IACE,aAAW,WAER,aAAegB,EAAYA,GAAS,MACpC,aAAeC,EAAYA,GAAS,MACpC,aAAeK,EAAWA,GAAQ,MAClC,kBAAoBD,EAAgBF,GAAYE,GAAa,MAC9D,sBAAuBE,GAAQ,MAC/B,qBAAsBJ,GAAQ,MAC9B,qBAAsBO,GAAU,MAChC,qBAAsBI,GAAmBL,GAAQ,MACjD,uBAAwBD,GAAoB,MAC5C,kBAAmBE,GAAU,MAC7B,yBAAoC,UAAVE,GAAiB,MAC3C,mBAA8B,UAAVA,GAAiB,MACrC,wBAAmC,SAAVA,GAAgB,GAE3CjC,EACD,GACH,CACEqB,EACAC,EACAI,EACAE,EACAC,EACA7B,EACA8B,EACAK,EACAR,EACAI,EACAP,EACAS,IAIEiB,GAAiC9C,EAAAA,EAAAA,UACrC,kBACEC,IAAW,qBAAsB,CAC/B,8BAA+ByB,GAC/B,GACJ,CAACA,IAGGqB,GACJ,gBAAKnD,UAAU,8BAA6B,UAC1C,SAAC,EAAO,CAACO,KAAK,QAAQP,UAAU,wBAI9BoD,GACJ,iBAAMpD,UAAU,2BAA0B,SACnB,iBAAbwB,GACN,gCACGO,GAAcoB,GACf,cACEnD,UAAS,UAAKyB,EAAW,YAAID,EAAQ,mBACrC,cACEvB,SAAAA,EAAe,eAAiB,mBAAgBoD,QAKtD,gCACGtB,GAAcoB,GACf,iBAAMnD,UAAU,iBAAgB,SAAEwB,SAM1C,OACE,iCACIW,IACA,4BACMjC,GAAU,IACdkB,IAAKA,EACLpB,UAAWiD,EACX,aAAY1B,EACZ+B,MAAO/B,EACPO,SAAUA,EACVE,QAASO,GACLtC,GAAY,cAEfuB,IACEI,IAAaF,GAAmC,WAAlBA,IAC/B0B,GAEAxB,IAAY,iBAAM5B,UAAU,iBAAgB,SAAED,IAC/CgC,IAAeP,GAAY2B,EAC3B3B,IAAaI,GAA8B,UAAlBF,GAA6B0B,MAI1DjB,IACC,0BACMjC,GAAU,IACd4B,SAAUA,EACV,aAAYP,EACZH,IAAKA,EACLkC,MAAO/B,EACPvB,UAAWkD,EACXlB,QAASO,EAAY,WAErB,iBAAMvC,UAAWiD,EAAiB,SAAEG,KACpC,gBAAKpD,UAAU,mBAAkB,SAAED,UAK7C,IAGFmB,EAAOqC,YAAc,SAErB,Q,imBCzOA,IAYA,EAZgC,SAAH,GAIvB,IAHJC,EAAU,EAAVA,WACAvD,EAAY,EAAZA,aACGC,EAAU,SAEb,OACE,uBAAOA,GAAU,IAAEF,UAAU,0BAA6BC,GAAY,eACpE,4BAAQ,gBAAoB,IAAEuD,KAGpC,E,ikBCDA,IAwCA,EAxC0C,SAAH,GAKjC,IAJJA,EAAU,EAAVA,WACAC,EAAO,EAAPA,QACAxD,EAAY,EAAZA,aACAyD,EAAa,EAAbA,cAEA,OACE,iCACE,sBAAQzD,aAAY,EAAZA,EAAc0D,aAAW,cAAE,oCACMF,EAAU,OAAH,OAAUA,GAAY,GAAG,SAEzE,yBAAG,mFAEY,KACb,cACEG,KAAK,2CACLC,OAAO,SACPC,IAAI,sBAAqB,SAC1B,yBAGAL,EAAU,iBAAH,OAAoBA,EAAO,qBAAsB,GAAG,OAE7DD,IAAc,SAAC,EAAM,CAACA,WAAYA,IAClCE,IACC,SAAC,EAAM,KACL1D,UAAU,kCACVuB,UAAU,UACVC,SAAS,UACTH,UAAU,UACVW,QAAS0B,GACLzD,aAAY,EAAZA,EAAc8D,mBAAiB,aACpC,oBAMT,E,ikBCtCA,IAwCA,EAxC4C,SAAH,GAKnC,IAJJP,EAAU,EAAVA,WACAC,EAAO,EAAPA,QACAxD,EAAY,EAAZA,aACAyD,EAAa,EAAbA,cAEA,OACE,iCACE,qBAAQzD,aAAY,EAAZA,EAAc+D,cAAY,aAAE,mCACpC,yBAAG,6JAGmB,KACpB,cACEJ,KAAK,2CACLC,OAAO,SACPC,IAAI,sBAAqB,SAC1B,yBAGAL,EAAU,iBAAH,OAAoBA,EAAO,qBAAsB,GAAG,OAE7DD,IAAc,SAAC,EAAM,CAACA,WAAYA,KACnC,SAAC,EAAM,KACLxD,UAAU,kCACVuB,UAAU,UACVC,SAAS,UACTH,UAAU,UACVW,QAAS0B,GACLzD,aAAY,EAAZA,EAAc8D,mBAAiB,aACpC,mBAGD,cAAG/D,UAAU,iCAAgC,SAAC,sEAKpD,E,ikBCxCA,IAqBA,EArBoC,SAAH,OAAMiE,EAAM,EAANA,OAAQhE,EAAY,EAAZA,aAAY,OACzD,iCACE,qBAAQA,aAAY,EAAZA,EAAciE,UAAQ,aAAE,6BAChC,uBAAG,sFAIH,SAAC,EAAM,CAACV,WAAY,OACpB,SAAC,EAAM,KACLxD,UAAU,kCACVuB,UAAU,OACVC,SAAS,gBACTH,UAAU,UACVW,QAASiC,GACLhE,aAAY,EAAZA,EAAckE,cAAY,aAC/B,eAGA,E,ikBCnBL,IA2BA,EA3BgD,SAAH,GAGvC,IAFJC,EAAW,EAAXA,YACAnE,EAAY,EAAZA,aAEA,OACE,iCACE,qBAAQA,aAAY,EAAZA,EAAcoE,gBAAc,aAAE,uCAGtC,uBAAG,0FAIH,uBAAG,sCACH,SAAC,EAAM,KACLrE,UAAU,kCACVuB,UAAU,mBACVF,UAAU,UACVW,QAASoC,GACLnE,aAAY,EAAZA,EAAcqE,aAAW,aAC9B,sBAES,MAGhB,E,ikBCtBA,IAqDA,EArDoD,SAAH,GAQ3C,IAPJb,EAAO,EAAPA,QACAc,EAAgB,EAAhBA,iBACAC,EAAM,EAANA,OACAvE,EAAY,EAAZA,aAAY,IACZwE,QAAAA,OAAO,IAAG,4IAAyI,EACnJf,EAAa,EAAbA,cACAgB,EAAM,EAANA,OAEA,OACE,iCACE,wBACGF,GAAM,iBACKf,GAAoB,mBAAkB,0BAEpD,uBAAIgB,IACHF,IACC,oBAAOtE,GAAY,mDAEfsE,EAAiBI,mBAAmB,QAAS,CAC3CC,KAAM,UACNC,MAAO,OACPC,IAAK,YAEP,IACAP,EAAiBQ,mBAAmB,QAAS,CAC3CC,KAAM,UACNC,OAAQ,YACR,QAIPvB,IACC,SAAC,EAAM,CACL1D,UAAU,kCACVuB,UAAU,UACVC,SAAS,UACTH,UAAU,UACVW,QAAS0B,EAAc,SACxB,iBAIFgB,IACC,cAAG1E,UAAU,iCAAgC,SAAC,qEAIhD,SAAC,EAAM,CAACwD,WAAY,QAG1B,E,ikBChDA,IAwCA,EAxC4C,SAAH,GAQnC,IAPJA,EAAU,EAAVA,WACAC,EAAO,EAAPA,QACAyB,EAAe,EAAfA,gBACAjF,EAAY,EAAZA,aACAkF,EAAW,EAAXA,YAAW,IACXC,eAAAA,OAAc,IAAG,6CAA0C,EAC3D1B,EAAa,EAAbA,cAEA,OACE,iCACE,sBAAQzD,aAAY,EAAZA,EAAcoF,cAAY,cAAE,uDAEjC5B,EAAU,OAAH,OAAUA,GAAY,GAAG,QAElCyB,IAAmB,uBAAIA,KACxB,yBACGC,EAAY,UAAQ,KACrB,cAAGvB,KAAMwB,EAAgBvB,OAAO,SAASC,IAAI,sBAAqB,SAAC,yBAGlEL,EAAU,iBAAH,OAAoBA,EAAO,qBAAsB,GAAG,OAE7DD,IAAc,SAAC,EAAM,CAACA,WAAYA,IAClCE,IACC,SAAC,EAAM,KACL1D,UAAU,kCACVuB,UAAU,UACVC,SAAS,UACTH,UAAU,UACVW,QAAS0B,GACLzD,aAAY,EAAZA,EAAc8D,mBAAiB,aACpC,oBAMT,E","sources":["webpack://@dtci/spellbook/webpack/universalModuleDefinition","webpack://@dtci/spellbook/webpack/bootstrap","webpack://@dtci/spellbook/webpack/runtime/compat get default export","webpack://@dtci/spellbook/webpack/runtime/define property getters","webpack://@dtci/spellbook/webpack/runtime/hasOwnProperty shorthand","webpack://@dtci/spellbook/webpack/runtime/make namespace object","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@dtci/spellbook/external commonjs \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@dtci/spellbook/external commonjs \"react\"","webpack://@dtci/spellbook/external commonjs \"classnames\"","webpack://@dtci/spellbook/external commonjs \"react/jsx-runtime\"","webpack://@dtci/spellbook/./src/ContentBlock/ContentBlock.tsx","webpack://@dtci/spellbook/./src/ErrorTemplate/ErrorTemplate.tsx","webpack://@dtci/spellbook/external commonjs \"@dtci/dash/analytics\"","webpack://@dtci/spellbook/./src/Spinner/Spinner.tsx","webpack://@dtci/spellbook/./src/Button/Button.tsx","webpack://@dtci/spellbook/./src/ErrorTemplate/Status.tsx","webpack://@dtci/spellbook/./src/ErrorTemplate/InvalidUser.tsx","webpack://@dtci/spellbook/./src/ErrorTemplate/UnknownError.tsx","webpack://@dtci/spellbook/./src/ErrorTemplate/NotFound.tsx","webpack://@dtci/spellbook/./src/ErrorTemplate/ExpiredSession.tsx","webpack://@dtci/spellbook/./src/ErrorTemplate/ExpectedDowntime.tsx","webpack://@dtci/spellbook/./src/ErrorTemplate/Unauthorized.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"classnames\");","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","import { FC, ReactNode, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './ContentBlock.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface ContentBlockProps {\n  children: ReactNode;\n  /** Class name for content block container */\n  className?: string;\n  // Test IDs for sections of ContentBlock\n  testMetadata?: TestMetadata;\n}\n\nconst ContentBlock: FC<ContentBlockProps> = ({\n  children,\n  className,\n  testMetadata,\n  ...otherProps\n}) => {\n  const contentBlockClassNames = useMemo(\n    () => classNames('sb-content-block', className),\n    [className],\n  );\n\n  return (\n    <div {...otherProps} className={contentBlockClassNames} {...testMetadata}>\n      {children}\n    </div>\n  );\n};\n\nexport default ContentBlock;\n","import { FC, ReactNode } from 'react';\n\n// Components\nimport ContentBlock from '../ContentBlock';\n\n// Styles\nimport './ErrorTemplate.scss';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface ErrorTemplateProps {\n  children: ReactNode;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst ErrorTemplate: FC<ErrorTemplateProps> = ({\n  children,\n  testMetadata,\n  ...otherProps\n}) => (\n  <div className=\"sb-error-template\" {...testMetadata} {...otherProps}>\n    <ContentBlock className=\"sb-error-template_content-block\">\n      {children}\n    </ContentBlock>\n  </div>\n);\n\nexport default ErrorTemplate;\n","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"@dtci/dash/analytics\");","import { FC, useMemo } from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport './Spinner.scss';\n\n// Types\nimport {\n  AnimationOptions,\n  LocationOptions,\n  SizeOptions,\n  TestMetadata,\n} from '../types';\n\nexport interface SpinnerProps {\n  /** Add a class to the spinner */\n  className?: string;\n  /** Loading text for screen readers */\n  loadText?: string;\n  /** Size: smaller, small, medium (default), large */\n  size?: SizeOptions;\n  /** Full URL to a custom image you would like to use */\n  imageUrl?: string;\n  /** Animation: spin (default), bounce, rock, wobble */\n  animation?: AnimationOptions;\n  /** Location: mask, background */\n  /** Mask can break some animations but allows you to change the color of the icon. Use background if Mask is causing problems. */\n  location?: LocationOptions;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Spinner: FC<SpinnerProps> = ({\n  className,\n  loadText = 'Loading...',\n  size = 'medium',\n  imageUrl,\n  animation = 'spin',\n  location = 'mask',\n  testMetadata,\n  ...otherProps\n}) => {\n  const spinnerClassnames = useMemo(\n    () =>\n      classNames(\n        `sb-spinner_${location}`,\n        `sb-spinner_animate_${animation}`,\n        `sb-spinner_${size}`,\n      ),\n    [size, animation, location],\n  );\n\n  let styles = {};\n  if (imageUrl) {\n    if (location === 'mask') {\n      styles = {\n        maskImage: `url(${imageUrl})`,\n        WebkitMaskImage: `url(${imageUrl})`,\n      };\n    } else {\n      styles = {\n        backgroundImage: `url(${imageUrl})`,\n      };\n    }\n  }\n\n  return (\n    <div\n      {...otherProps}\n      className={classNames('sb-spinner', className)}\n      role=\"alert\"\n      aria-live=\"assertive\"\n      {...testMetadata}\n    >\n      <p className=\"sb-spinner-load-text\">{loadText}</p>\n      <div\n        className={spinnerClassnames}\n        style={styles}\n        data-testid=\"spinner-mask\"\n      />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import {\n  ButtonHTMLAttributes,\n  DetailedHTMLProps,\n  FC,\n  HTMLProps,\n  MouseEvent,\n  MouseEventHandler,\n  forwardRef,\n  useCallback,\n  useMemo,\n  useContext,\n} from 'react';\nimport classNames from 'classnames';\n\n// Analytics\nimport {\n  AnalyticsContext,\n  TAnalyticsEventData,\n  handleAnalyticsEvent,\n} from '@dtci/dash/analytics';\n\n// Components\nimport Spinner from '../Spinner';\n\n// Styles\nimport './Button.scss';\n\n// Types\nimport { FontAwesomePackage, TestMetadata } from 'types';\n\nexport interface ButtonProps\n  extends DetailedHTMLProps<\n    ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  > {\n  /** Set the button style: promoted (default), standard, demoted, link */\n  styleType?: 'promoted' | 'standard' | 'demoted' | 'link';\n  /** Set the button color: primary (default), secondary, success, error, warning */\n  colorType?: 'primary' | 'secondary' | 'success' | 'error' | 'warning';\n  /** Set the icon position: before (default), after, stacked */\n  iconPlacement?: 'before' | 'after' | 'stacked';\n  /** Can change the size of the button: smaller, small, large */\n  sizeType?: 'smaller' | 'small' | 'large' | 'auto';\n  /** Name of Font Awesome icon to show or custom icon component */\n  iconType?: string | JSX.Element;\n  /** Package of Font Awesome icon */\n  iconPackage?: FontAwesomePackage;\n  /** Boolean to determine if button has an icon and no label */\n  iconOnly?: boolean;\n  /** Set label text for accessibility, should match button text **/\n  labelText?: string;\n  /** shakeOnDisabledHover */\n  shakeOnDisabledHover?: boolean;\n  /** Indicates if button should be disabled */\n  disabled?: boolean;\n  /** Indicates an async loading state */\n  isFetching?: boolean;\n  /** onClick event handler  */\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  // Test IDs for sections of Button\n  testMetadata?: TestMetadata;\n  /** Border Flush */\n  flush?: 'left' | 'right' | 'flush';\n  /** Additional event information to pass to analytics tracking */\n  analyticsEventData?: TAnalyticsEventData;\n}\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      colorType = 'primary',\n      styleType = 'promoted',\n      labelText,\n      iconType,\n      iconPackage = 'fas',\n      iconPlacement = 'before',\n      sizeType,\n      iconOnly,\n      children,\n      shakeOnDisabledHover,\n      disabled,\n      isFetching = false,\n      onClick,\n      testMetadata,\n      flush,\n      analyticsEventData,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const isStackedButton = iconPlacement === 'stacked';\n\n    const analyticsContext = useContext(AnalyticsContext);\n\n    const handleClick = useCallback(\n      (event: MouseEvent<HTMLButtonElement>) => {\n        if (isFetching) {\n          event.preventDefault();\n          event.stopPropagation();\n          return;\n        }\n        onClick?.(event);\n        handleAnalyticsEvent({\n          analyticsContext,\n          analyticsEventData,\n          componentType: 'Button',\n          actionName: 'click',\n          label:\n            otherProps?.['aria-label'] ||\n            labelText ||\n            children?.toString() ||\n            iconType?.toString() ||\n            '',\n        });\n      },\n      [\n        isFetching,\n        onClick,\n        analyticsContext,\n        otherProps,\n        labelText,\n        children,\n        iconType,\n        analyticsEventData,\n      ],\n    );\n\n    const buttonClassNames = useMemo(\n      () =>\n        classNames(\n          'sb-button',\n          {\n            ['sb-button_' + colorType]: colorType,\n            ['sb-button_' + styleType]: styleType,\n            ['sb-button_' + sizeType]: sizeType,\n            ['sb-button_icon-' + iconPlacement]: iconType && iconPlacement,\n            'sb-button_icon-only': iconOnly,\n            'sb-button_no-icon': !iconType,\n            'sb-button_fetching': isFetching,\n            'sb-button_disabled': isStackedButton && disabled, // only stacked needs to have a class for disabled\n            'sb-shake-on-disabled': shakeOnDisabledHover,\n            'sb-button_async': isFetching,\n            'sb-button__flush-right': flush === 'right',\n            'sb-button__flush': flush === 'flush',\n            'sb-button__flush-left': flush === 'left',\n          },\n          className,\n        ),\n      [\n        colorType,\n        styleType,\n        iconPlacement,\n        iconOnly,\n        shakeOnDisabledHover,\n        className,\n        disabled,\n        isStackedButton,\n        sizeType,\n        isFetching,\n        iconType,\n        flush,\n      ],\n    );\n\n    const stackedButtonWrapperClassNames = useMemo(\n      () =>\n        classNames('sb-stacked-wrapper', {\n          'sb-stacked-wrapper-disabled': disabled,\n        }),\n      [disabled],\n    );\n\n    const loader = (\n      <div className=\"sb-button_spinner-container\">\n        <Spinner size=\"small\" className=\"sb-button_spinner\" />\n      </div>\n    );\n\n    const icon = (\n      <span className=\"sb-button_icon-container\">\n        {typeof iconType === 'string' ? (\n          <>\n            {isFetching && loader}\n            <i\n              className={`${iconPackage} ${iconType} sb-button_icon`}\n              data-testid={\n                testMetadata?.['data-testid'] ? 'button-icon' : undefined\n              }\n            />\n          </>\n        ) : (\n          <>\n            {isFetching && loader}\n            <span className=\"sb-button_icon\">{iconType}</span>\n          </>\n        )}\n      </span>\n    );\n\n    return (\n      <>\n        {!isStackedButton && (\n          <button\n            {...otherProps}\n            ref={ref}\n            className={buttonClassNames}\n            aria-label={labelText}\n            title={labelText}\n            disabled={disabled}\n            onClick={handleClick}\n            {...testMetadata}\n          >\n            {iconType &&\n              (iconOnly || !iconPlacement || iconPlacement === 'before') &&\n              icon}\n\n            {!iconOnly && <span className=\"sb-button-text\">{children}</span>}\n            {isFetching && !iconType && loader}\n            {iconType && !iconOnly && iconPlacement === 'after' && icon}\n          </button>\n        )}\n\n        {isStackedButton && (\n          <button\n            {...otherProps}\n            disabled={disabled}\n            aria-label={labelText}\n            ref={ref}\n            title={labelText}\n            className={stackedButtonWrapperClassNames}\n            onClick={handleClick}\n          >\n            <span className={buttonClassNames}>{icon}</span>\n            <div className=\"sb-stacked-label\">{children}</div>\n          </button>\n        )}\n      </>\n    );\n  },\n);\n\nButton.displayName = 'Button';\n\nexport default Button as FC<HTMLProps<HTMLButtonElement> & ButtonProps>;\n","import { FC } from 'react';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface StatusProps {\n  statusCode: number;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst Status: FC<StatusProps> = ({\n  statusCode,\n  testMetadata,\n  ...otherProps\n}) => {\n  return (\n    <p {...otherProps} className=\"sb-error-template_code\" {...testMetadata}>\n      <strong>Error code:</strong> {statusCode}\n    </p>\n  );\n};\n\nexport default Status;\n","import { FC } from 'react';\n\n// Components\nimport Button from '../Button';\nimport Status from './Status';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface InvalidUserProps {\n  statusCode: number;\n  appName?: string;\n  handleRefresh?: () => void;\n  // Test IDs for component sections\n  testMetadata?: {\n    invalidUser?: TestMetadata;\n    refreshPageButton?: TestMetadata;\n  };\n}\n\nconst InvalidUser: FC<InvalidUserProps> = ({\n  statusCode,\n  appName,\n  testMetadata,\n  handleRefresh,\n}) => {\n  return (\n    <>\n      <h2 {...testMetadata?.invalidUser}>\n        Sorry, you don&apos;t yet have access {appName ? ` to ${appName}` : ''}.\n      </h2>\n      <p>\n        For any production support related issues or access request, please\n        submit using{' '}\n        <a\n          href=\"https://issues.dmed.technology/report/ep\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          the DMED Issues tool\n        </a>\n        {appName ? `, then enter \"${appName}\" as the app name` : ''}.\n      </p>\n      {statusCode && <Status statusCode={statusCode} />}\n      {handleRefresh && (\n        <Button\n          className=\"sb-error-template_action-button\"\n          labelText=\"Refresh\"\n          iconType=\"fa-sync\"\n          colorType=\"primary\"\n          onClick={handleRefresh}\n          {...testMetadata?.refreshPageButton}\n        >\n          Refresh page\n        </Button>\n      )}\n    </>\n  );\n};\n\nexport default InvalidUser;\n","import { FC } from 'react';\n\n// Components\nimport Button from '../Button';\nimport Status from './Status';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface UnknownErrorProps {\n  statusCode?: number;\n  appName?: string;\n  handleRefresh: () => void;\n  // Test IDs for component sections\n  testMetadata?: {\n    unknownError?: TestMetadata;\n    refreshPageButton?: TestMetadata;\n  };\n}\n\nconst UnknownError: FC<UnknownErrorProps> = ({\n  statusCode,\n  appName,\n  testMetadata,\n  handleRefresh,\n}) => {\n  return (\n    <>\n      <h2 {...testMetadata?.unknownError}>Sorry, something went wrong.</h2>\n      <p>\n        An unexpected error has occurred, and your request couldn’t be\n        completed. For any production support related issues or access request,\n        please submit using{' '}\n        <a\n          href=\"https://issues.dmed.technology/report/ep\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          the DMED Issues tool\n        </a>\n        {appName ? `, then enter \"${appName}\" as the app name` : ''}.\n      </p>\n      {statusCode && <Status statusCode={statusCode} />}\n      <Button\n        className=\"sb-error-template_action-button\"\n        labelText=\"Refresh\"\n        iconType=\"fa-sync\"\n        colorType=\"primary\"\n        onClick={handleRefresh}\n        {...testMetadata?.refreshPageButton}\n      >\n        Refresh page\n      </Button>\n      <p className=\"sb-error-template_back-message\">\n        Keep seeing this message? Please come back and try again later.\n      </p>\n    </>\n  );\n};\n\nexport default UnknownError;\n","import { FC } from 'react';\n\n// Components\nimport Button from '../Button';\nimport Status from './Status';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface NotFoundProps {\n  goBack: () => void;\n  // Test IDs for component sections\n  testMetadata?: {\n    notFound?: TestMetadata;\n    goBackButton?: TestMetadata;\n  };\n}\n\nconst NotFound: FC<NotFoundProps> = ({ goBack, testMetadata }) => (\n  <>\n    <h2 {...testMetadata?.notFound}>Sorry, page not found.</h2>\n    <p>\n      We couldn’t find the page you’re looking for. It may have been moved or\n      deleted.\n    </p>\n    <Status statusCode={404} />\n    <Button\n      className=\"sb-error-template_action-button\"\n      labelText=\"Back\"\n      iconType=\"fa-arrow-left\"\n      colorType=\"primary\"\n      onClick={goBack}\n      {...testMetadata?.goBackButton}\n    >\n      Go back\n    </Button>\n  </>\n);\n\nexport default NotFound;\n","import { FC } from 'react';\n\n// Components\nimport Button from '../Button';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface ExpiredSessionProps {\n  handleLogin: () => void;\n  // Test IDs for component sections\n  testMetadata?: {\n    expiredSession?: TestMetadata;\n    logInButton?: TestMetadata;\n  };\n}\n\nconst ExpiredSession: FC<ExpiredSessionProps> = ({\n  handleLogin,\n  testMetadata,\n}) => {\n  return (\n    <>\n      <h2 {...testMetadata?.expiredSession}>\n        Sorry, your session has expired.\n      </h2>\n      <p>\n        For security purposes, you have been logged out. We apologize for the\n        inconvenience.\n      </p>\n      <p>Please log in again to continue.</p>\n      <Button\n        className=\"sb-error-template_action-button\"\n        labelText=\"Log in with MyID\"\n        colorType=\"primary\"\n        onClick={handleLogin}\n        {...testMetadata?.logInButton}\n      >\n        Log in with MyID\n      </Button>{' '}\n    </>\n  );\n};\n\nexport default ExpiredSession;\n","import { FC } from 'react';\n\n// Components\nimport Button from '../Button';\nimport Status from './Status';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface ExpectedDowntimeProps {\n  appName?: string;\n  header?: string;\n  message?: string;\n  expectedTimeBack?: Date;\n  handleRefresh?: () => void;\n  footer?: boolean;\n  // Test IDs for component sections\n  testMetadata?: TestMetadata;\n}\n\nconst ExpectedDowntime: FC<ExpectedDowntimeProps> = ({\n  appName,\n  expectedTimeBack,\n  header,\n  testMetadata,\n  message = 'This application is currently down for scheduled maintenance. Please come back and try again later. We apologize for any inconvenience.',\n  handleRefresh,\n  footer,\n}) => {\n  return (\n    <>\n      <h2>\n        {header ||\n          `Sorry, ${appName ? appName : 'this application'} is currently down.`}\n      </h2>\n      <p>{message}</p>\n      {expectedTimeBack && (\n        <p {...testMetadata}>\n          {`The estimated time back is: ${\n            expectedTimeBack.toLocaleDateString('en-us', {\n              year: 'numeric',\n              month: 'long',\n              day: 'numeric',\n            }) +\n            ' ' +\n            expectedTimeBack.toLocaleTimeString('en-us', {\n              hour: 'numeric',\n              minute: '2-digit',\n            })\n          }.`}\n        </p>\n      )}\n      {handleRefresh && (\n        <Button\n          className=\"sb-error-template_action-button\"\n          labelText=\"Refresh\"\n          iconType=\"fa-sync\"\n          colorType=\"primary\"\n          onClick={handleRefresh}\n        >\n          Refresh page\n        </Button>\n      )}\n      {footer && (\n        <p className=\"sb-error-template_back-message\">\n          Keep seeing this message? Please come back and try again later.\n        </p>\n      )}\n      <Status statusCode={503} />\n    </>\n  );\n};\n\nexport default ExpectedDowntime;\n","import { FC } from 'react';\n\n// Components\nimport Button from '../Button';\nimport Status from './Status';\n\n// Types\nimport { TestMetadata } from 'types';\n\nexport interface UnauthorizedProps {\n  statusCode: number;\n  appName?: string;\n  detailedMessage?: string;\n  requestText: string;\n  issuesToolLink?: string;\n  handleRefresh?: () => void;\n  // Test IDs for component sections\n  testMetadata?: {\n    unauthorized?: TestMetadata;\n    refreshPageButton?: TestMetadata;\n  };\n}\n\nconst Unauthorized: FC<UnauthorizedProps> = ({\n  statusCode,\n  appName,\n  detailedMessage,\n  testMetadata,\n  requestText,\n  issuesToolLink = 'https://issues.dmed.technology/report/ep',\n  handleRefresh,\n}) => {\n  return (\n    <>\n      <h2 {...testMetadata?.unauthorized}>\n        Sorry, you are not authorized to perform that action\n        {appName ? ` in ${appName}` : ''}.\n      </h2>\n      {detailedMessage && <p>{detailedMessage}</p>}\n      <p>\n        {requestText}, go to{' '}\n        <a href={issuesToolLink} target=\"_blank\" rel=\"noopener noreferrer\">\n          the DMED Issues tool\n        </a>\n        {appName ? `, then enter \"${appName}\" as the app name` : ''}.\n      </p>\n      {statusCode && <Status statusCode={statusCode} />}\n      {handleRefresh && (\n        <Button\n          className=\"sb-error-template_action-button\"\n          labelText=\"Refresh\"\n          iconType=\"fa-sync\"\n          colorType=\"primary\"\n          onClick={handleRefresh}\n          {...testMetadata?.refreshPageButton}\n        >\n          Refresh page\n        </Button>\n      )}\n    </>\n  );\n};\n\nexport default Unauthorized;\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","children","className","testMetadata","otherProps","contentBlockClassNames","useMemo","classNames","loadText","size","imageUrl","animation","location","spinnerClassnames","styles","maskImage","WebkitMaskImage","backgroundImage","role","style","Button","forwardRef","ref","colorType","styleType","labelText","iconType","iconPackage","iconPlacement","sizeType","iconOnly","shakeOnDisabledHover","disabled","isFetching","onClick","flush","analyticsEventData","isStackedButton","analyticsContext","useContext","AnalyticsContext","handleClick","useCallback","event","preventDefault","stopPropagation","handleAnalyticsEvent","componentType","actionName","label","toString","buttonClassNames","stackedButtonWrapperClassNames","loader","icon","undefined","title","displayName","statusCode","appName","handleRefresh","invalidUser","href","target","rel","refreshPageButton","unknownError","goBack","notFound","goBackButton","handleLogin","expiredSession","logInButton","expectedTimeBack","header","message","footer","toLocaleDateString","year","month","day","toLocaleTimeString","hour","minute","detailedMessage","requestText","issuesToolLink","unauthorized"],"sourceRoot":""}